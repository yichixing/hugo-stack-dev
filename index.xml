<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>个人笔记博客</title>
        <link>https://yichixing.github.io/hugo-stack-dev/</link>
        <description>Recent content on 个人笔记博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Mon, 28 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://yichixing.github.io/hugo-stack-dev/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>AI逻辑测试题题目本身（只有少数模型能答对） </title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/ai%E9%80%BB%E8%BE%91%E6%B5%8B%E8%AF%95%E9%A2%98%E9%A2%98%E7%9B%AE%E6%9C%AC%E8%BA%AB%E5%8F%AA%E6%9C%89%E5%B0%91%E6%95%B0%E6%A8%A1%E5%9E%8B%E8%83%BD%E7%AD%94%E5%AF%B9/</link>
        <pubDate>Mon, 28 Apr 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/ai%E9%80%BB%E8%BE%91%E6%B5%8B%E8%AF%95%E9%A2%98%E9%A2%98%E7%9B%AE%E6%9C%AC%E8%BA%AB%E5%8F%AA%E6%9C%89%E5%B0%91%E6%95%B0%E6%A8%A1%E5%9E%8B%E8%83%BD%E7%AD%94%E5%AF%B9/</guid>
        <description>&lt;h1 id=&#34;题目&#34;&gt;题目：
&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;  1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 86
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 87
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 88
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 89
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 90
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 91
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 92
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 93
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 94
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 95
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 96
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 97
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 98
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 99
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;100
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;101
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;102
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;103
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;104
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;105
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;106
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;107
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;108
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;109
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;110
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;111
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;112
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;113
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;114
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;115
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;116
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;117
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;118
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;119
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;120
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;121
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;122
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;123
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;124
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;125
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;126
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;127
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;128
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;129
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;130
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;131
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;132
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;133
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;134
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;135
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;136
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;137
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;138
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;139
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;140
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;141
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;142
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;143
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;144
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;145
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;146
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;147
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;148
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;149
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;150
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;151
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;152
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;153
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;154
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;155
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;156
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;157
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;158
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;159
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;160
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;161
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;162
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;163
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;164
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;165
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;166
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;167
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;168
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;169
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;170
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;171
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;172
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;173
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;174
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;175
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;176
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;177
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;178
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;179
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;180
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;181
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;182
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;183
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;184
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;185
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;186
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;187
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;188
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;189
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;190
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;191
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;192
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;193
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;194
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;195
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;196
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;197
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;198
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;199
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;200
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;201
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;202
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;203
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;204
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;205
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;206
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;207
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;208
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;209
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;210
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;211
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;212
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;213
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;214
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;215
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;216
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;217
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;218
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;219
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;220
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;221
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;222
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;223
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;224
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;225
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;226
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;227
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;228
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;229
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;230
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;231
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;232
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;233
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;如果我修改了baseURL&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;的https:&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//yichixing.github.io/hugo-Fixlt-dev/，那github pag估计就用不了，也就是github page 和 cloudflare page二选一：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;好的，用户现在遇到了一个问题，他们想同时在GitHub&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Pages和Cloudflare&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Pages上部署Hugo博客，但修改baseURL后导致其中一个平台无法正常使用。用户可能希望两个平台都能正确显示，但目前只能二选一。我需要分析问题根源，并提供解决方案。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;首先，用户提到修改baseURL为GitHub&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Pages的路径后，Cloudflare&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Pages出现问题。这是因为baseURL决定了生成静态文件中资源（如CSS、JS）的路径。如果baseURL设置为GitHub&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Pages的子路径，那么在Cloudflare&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Pages上，这些资源路径会指向错误的URL，导致样式加载失败。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;用户的需求是让两个平台都能正常工作，但当前的配置只能支持一个。这可能是因为Hugo的baseURL是硬编码的，无法同时适应两个不同的部署路径。需要找到一种方法，让Hugo在不同环境下生成不同的baseURL，或者使用相对路径来避免绝对路径的问题。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;接下来，我需要考虑可能的解决方案。例如，使用环境变量在构建时动态设置baseURL，或者在Cloudflare&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Pages中配置自定义域名，使其路径与GitHub&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Pages一致。另外，检查是否启用了相对URLs选项，这可以让资源使用相对路径，而不是绝对路径，从而适应不同的部署路径。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;用户可能对Hugo的配置和持续集成/持续部署（CI/CD）流程不太熟悉，所以需要提供详细的步骤，比如如何在GitHub&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Actions中设置不同的环境变量，或者在Cloudflare&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Pages中配置构建命令。同时，需要确保用户理解每个步骤的作用，避免混淆。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;还要考虑用户是否希望通过自定义域名来统一访问路径，这样无论部署到哪个平台，baseURL都可以指向同一个自定义域名，从而避免路径冲突。这可能需要配置DNS和SSL证书，但可以从根本上解决问题。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;最后，总结解决方案，分步骤说明如何配置，确保用户能够逐步操作，并验证每个步骤的效果，确保两个平台都能正常显示。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;方案&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：动态设置&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;baseURL（通过环境变量）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;在构建时动态注入&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;baseURL，实现不同平台的差异化配置。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;GitHub&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;toml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;复制&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;baseURL&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://yichixing.github.io/hugo-Fixlt-dev/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Cloudflare&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;在&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Cloudflare&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;的构建设置中添加环境变量&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;变量名&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;：HUGO_BASEURL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;值&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;：https:&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//your-cloudflare-domain.com/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;修改&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;config.toml&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;toml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;复制&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;baseURL&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;env.HUGO_BASEURL&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;优先使用环境变量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;正确写法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;toml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;复制&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;baseURL&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;env.HUGO_BASEURL&amp;#34;&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;✅&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;使用双引号包裹&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;工作流名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;deploy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;触发工作流的事件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;on:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;push:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;branches:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;仅在&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;分支被推送时触发&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;定义工作流中的作业&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;jobs:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;定义一个名为&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;deploy&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;的作业&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;deploy:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;指定作业运行的环境为最新的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Ubuntu&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;系统&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;runs-on:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;ubuntu-latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;定义作业中的步骤&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;steps:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;步骤&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：检出代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Checkout&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;使用官方的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;actions/checkout&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;动作来获取仓库代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;uses:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;actions/checkout@v&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;with:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;获取完整的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Git&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;历史记录（对于部署工具&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;peaceiris/actions-gh-pages&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;可能需要）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;表示获取所有历史，而不是默认的浅克隆（只获取最后一次提交）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;fetch-depth:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;步骤&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：设置&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Hugo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;环境&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Setup&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Hugo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;使用社区维护的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;peaceiris/actions-hugo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;动作来安装&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Hugo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;uses:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;peaceiris/actions-hugo@v&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;with:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;指定要安装的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Hugo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;版本为最新版&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;hugo-version:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;明确指定安装&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Hugo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Extended&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;版本（支持&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;SASS/SCSS&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;等特性）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;extended:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;步骤&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：构建网站&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Build&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Web&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;运行&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Hugo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;命令来生成静态网站文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;-D&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;参数表示包含草稿内容（如果本地预览用过，这里保持一致，或按需移除）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;run:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;hugo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;-D&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;步骤&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：部署网站到&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;GitHub&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Pages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Deploy&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Web&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;使用社区维护的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;peaceiris/actions-gh-pages&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;动作来部署&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;uses:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;peaceiris/actions-gh-pages@v&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;with:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;指定用于认证的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Personal&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Access&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;(PAT)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;secrets.TOKEN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;会从仓库的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Secrets&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;中读取名为&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;TOKEN&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;的值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;（视频中占位符是&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;你的token变量名，这里假设你设置为&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;TOKEN）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;PERSONAL_TOKEN:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;secrets.TOKEN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;指定要将静态文件部署到的目标仓库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;格式为：你的GitHub用户名/目标仓库名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;（视频中占位符是&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;你的github名/你的仓库名，这里假设目标仓库是&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;letere-gz/hugo-dev）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;EXTERNAL_REPOSITORY:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;yichixing/hugo-Fixlt-dev&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;指定将静态文件推送到目标仓库的哪个分支（通常是&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;gh-pages&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;或&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;main）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;PUBLISH_BRANCH:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;指定包含构建好的静态网站文件的目录（Hugo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;默认生成到&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;public）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;PUBLISH_DIR:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;./public&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;自定义部署时&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Git&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;提交的信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;commit_message:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;deploy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;env:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;HUGO_BASEURL:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://yichixing.github.io/hugo-Fixlt-dev/&amp;#34;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;这个加在哪里？&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;deploy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;on:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;push:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;branches:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;jobs:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;deploy:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;runs-on:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;ubuntu-latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;steps:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Checkout&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;uses:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;actions/checkout@v&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;with:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;fetch-depth:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Setup&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Hugo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;uses:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;peaceiris/actions-hugo@v&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;with:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;hugo-version:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;extended:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;关键修改：在&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Build&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Web&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;步骤中添加环境变量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Build&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Web&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;run:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;hugo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;-D&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;env:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;HUGO_BASEURL:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://yichixing.github.io/hugo-Fixlt-dev/&amp;#34;&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;添加到这里&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Deploy&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Web&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;uses:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;peaceiris/actions-gh-pages@v&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;with:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;PERSONAL_TOKEN:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;secrets.TOKEN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;EXTERNAL_REPOSITORY:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;yichixing/hugo-Fixlt-dev&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;PUBLISH_BRANCH:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;PUBLISH_DIR:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;./public&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;commit_message:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;deploy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;IGNORE_WHEN_COPYING_START&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;content_copy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;download&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Use&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;caution.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;IGNORE_WHEN_COPYING_END&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;上面是前因后果，下面是问题所在：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;main仓库使用action生成静态程序给dev仓库时，action不能修改环境变量啊，否则环境变量覆盖了dev仓库的baseURL，导致cloudflare&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;page的环境变量用不了，需要dev仓库自己使用aciton才行，你给我个dev仓库的完整的action代码吧&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;这是main仓库的工作流&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;工作流名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;deploy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;触发工作流的事件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;on:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;push:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;branches:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;仅在&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;分支被推送时触发&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;定义工作流中的作业&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;jobs:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;定义一个名为&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;deploy&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;的作业&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;deploy:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;指定作业运行的环境为最新的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Ubuntu&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;系统&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;runs-on:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;ubuntu-latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;定义作业中的步骤&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;steps:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;步骤&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：检出代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Checkout&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;使用官方的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;actions/checkout&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;动作来获取仓库代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;uses:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;actions/checkout@v&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;with:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;获取完整的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Git&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;历史记录（对于部署工具&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;peaceiris/actions-gh-pages&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;可能需要）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;表示获取所有历史，而不是默认的浅克隆（只获取最后一次提交）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;fetch-depth:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;步骤&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：设置&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Hugo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;环境&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Setup&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Hugo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;使用社区维护的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;peaceiris/actions-hugo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;动作来安装&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Hugo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;uses:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;peaceiris/actions-hugo@v&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;with:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;指定要安装的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Hugo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;版本为最新版&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;hugo-version:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;明确指定安装&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Hugo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Extended&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;版本（支持&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;SASS/SCSS&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;等特性）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;extended:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;步骤&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：构建网站&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Build&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Web&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;运行&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Hugo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;命令来生成静态网站文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;-D&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;参数表示包含草稿内容（如果本地预览用过，这里保持一致，或按需移除）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;run:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;hugo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;-D&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;步骤&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：部署网站到&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;GitHub&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Pages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;name:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Deploy&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Web&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;使用社区维护的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;peaceiris/actions-gh-pages&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;动作来部署&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;uses:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;peaceiris/actions-gh-pages@v&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;with:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;指定用于认证的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Personal&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Access&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;(PAT)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;secrets.TOKEN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;会从仓库的&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Secrets&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;中读取名为&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;TOKEN&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;的值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;（视频中占位符是&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;你的token变量名，这里假设你设置为&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;TOKEN）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;PERSONAL_TOKEN:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;secrets.TOKEN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;指定要将静态文件部署到的目标仓库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;格式为：你的GitHub用户名/目标仓库名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;（视频中占位符是&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;你的github名/你的仓库名，这里假设目标仓库是&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;letere-gz/hugo-dev）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;EXTERNAL_REPOSITORY:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;yichixing/hugo-Fixlt-dev&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;指定将静态文件推送到目标仓库的哪个分支（通常是&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;gh-pages&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;或&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;main）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;PUBLISH_BRANCH:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;指定包含构建好的静态网站文件的目录（Hugo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;默认生成到&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;public）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;PUBLISH_DIR:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;./public&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;自定义部署时&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Git&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;提交的信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;commit_message:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;deploy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;IGNORE_WHEN_COPYING_START&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;content_copy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;download&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Use&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;caution.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;IGNORE_WHEN_COPYING_END&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;你先回答我，你看懂了前因后果没，回答懂了还是不懂，不懂的我会补充；然后再解决我的疑问；另一个疑问是cloudflare&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;page的环境变量的疑问，我怀疑cloudflare&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;page连接了dev库后得到了完整的静态资源，此时cloudflare&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;page的环境变量baseURL就无法作用在静态资源里面了，你觉得是还是不是，回答一下&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>工具集合</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/</link>
        <pubDate>Mon, 28 Apr 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;laquo;&amp;lt;传输工具filepizza：只要在地址输入分享链接就可以传输，因此手机端也能用； &lt;a class=&#34;link&#34; href=&#34;https://github.com/kern/filepizza&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/kern/filepizza&lt;/a&gt;；在线版：https://file.pizza/&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《♓《虽然只支持传输单个文件，但我可以打包啊，因此相当于无论传输什么都没限制；》&lt;/li&gt;
&lt;li&gt;《♐《由于只需要拍个网址下来，所以使用便易程度因人而异，但比起那种软件流畅度低的localsend，我还是更接受用流畅的网页》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;C盘清理工具：Windows Cleaner ；https://github.com/darkmatter2048/WindowsCleaner&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;视频字幕、水印清除工具：video-subtitle-remover；这个作者的另一款软件就是大名鼎鼎的硬字幕提取软件 ；https://github.com/YaoFANGUK/video-subtitle-remover&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;AI提示词手册：system-prompts-and-models-of-ai-tools（）；https://github.com/x1xhlol/system-prompts-and-models-of-ai-tools &amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;一站式模型系统；aigcpanel &lt;a class=&#34;link&#34; href=&#34;https://github.com/modstart-lib/aigcpanel%3e&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/modstart-lib/aigcpanel&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;批量重命名工具：rename-photos ；https://github.com/Arman19941113/rename-photos&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>模型测试题大全（AI超元领域版） </title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E6%A8%A1%E5%9E%8B%E6%B5%8B%E8%AF%95%E9%A2%98%E5%A4%A7%E5%85%A8ai%E8%B6%85%E5%85%83%E9%A2%86%E5%9F%9F%E7%89%88/</link>
        <pubDate>Mon, 28 Apr 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E6%A8%A1%E5%9E%8B%E6%B5%8B%E8%AF%95%E9%A2%98%E5%A4%A7%E5%85%A8ai%E8%B6%85%E5%85%83%E9%A2%86%E5%9F%9F%E7%89%88/</guid>
        <description>&lt;h1 id=&#34;题目&#34;&gt;题目：
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[[[[[[[模型测试]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《《《编程能力 gemini2.5pro &amp;gt; qwen2.5max vs Claude-3.7-Sonnet》&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;【测试题目：想同时在GitHub Pages和Cloudflare Pages上部署Hugo博客，因此动态设置 baseUR】
&lt;ul&gt;
&lt;li&gt;《《能行的方案：分离构建，各自为政；既然问题根源在于“一次构建，两个不同 baseURL 的目标”，最清晰的解决方案就是让两个平台各自独立构建；简单来说就是github page和cloudflare page单独分别用main仓库源码部署》
&lt;ul&gt;
&lt;li&gt;《该方案可行的原因在于【cloudflare page真的有执行hugo源码的能力   cloudflare page能独立构建hugo项目得到hugo静态资源】，因此两个平台各自独立构建是成立的，让cloudflare page独立构建hugo项目得到hugo静态资源即可，然后github page也独立用action构建hugo项目得到hugo静态资源》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;lt;用该编程题一测就知道模型编程能力的优劣&amp;gt;
&lt;ul&gt;
&lt;li&gt;&amp;laquo;&amp;lt;【除了gemini2.5pro以外 ，其它模型都认为应该创建dev仓库的action代码 而且这个action还在run hugo -D】，这种说法是错误的，dev仓库都是从main仓库转换来的静态资源，因此dev仓库哪里来的源码让你执行hugo命令啊，能说出在dev仓库的action程序中执行run hugo -D 的全都是代码分析能力不行的，我把action源码给到这些模型，这些模型早就该分析出dev仓库都是静态资源，不可能在dev仓库执行aciton程序了&amp;gt;&lt;/li&gt;
&lt;li&gt;《《《另外有一个重要的认知就是【配置文件的参数的参数值仅在项目构建过程正被读取】，这意味着项目构建好后不会调用参数，比如 配置文件的baseURL必须在项目构建过程中把变量设置好，项目构建完成后再设置变量就没用了》&lt;/li&gt;
&lt;li&gt;《编程能力和推理能力一般的模型》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;《《《测试结论：gemini2.5pro是唯一能成功解决我问题的模型，因此gemini2.5pro成为我能免费用到的最强模型，不但可以帮助我用视频学习，还有免费使用的平台Trae，编程能力还是免费用到中的最强》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;本地开源模型比较 千问QWQ vsGemma 3、千问QWQ视觉推理能力测试&amp;gt; &lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1LcdaYZEN2/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.bilibili.com/video/BV1LcdaYZEN2/&lt;/a&gt;  &lt;a class=&#34;link&#34; href=&#34;https://aistudio.google.com/prompts/1wToupoSnKb31mh4-ZZ535NZNrK_7knrk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://aistudio.google.com/prompts/1wToupoSnKb31mh4-ZZ535NZNrK_7knrk&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[1 千问QWQ vsGemma 3]
&lt;ul&gt;
&lt;li&gt;[1 推理能力肯定有思维链的千问QWQ强]
&lt;ul&gt;
&lt;li&gt;&amp;lt;内置了思维链的QWQ在推理时性能是远高于没有推理能力的模型的，使用更长的时间和更长的token输出来获取更高的性能&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[2 翻译能力]
&lt;ul&gt;
&lt;li&gt;&amp;lt;在使用推理能力下，内置了思维链的QWQ在花费思考时间的前提下能稍微领先gemma3，但翻译也很看重速度，不用思维链时gemma3胜，所以综合来看，翻译还是gemma3强&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[3 长文本总结能力]
&lt;ul&gt;
&lt;li&gt;&amp;lt;思维链对长上下文的总结也是有一定帮助的，还是QWQ强&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[4 角色扮演能力（文学能力）]
&lt;ul&gt;
&lt;li&gt;&amp;lt;gemma3在角色扮演这块很强，模型能完全理解提示词里面设置好的角色，由于gemma3的指令跟随能力更强，所以角色扮演也很容易跟随我们的引导进行变化&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;QWQ的强大推理能力导致了逻辑性太强，表达会倾向于书面化，也就是AI味道太浓&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;推理模型的特殊性也导致QWQ无法再长周期指令下保质指令性能，在多轮角色扮演后会表现出一些非常不理智的行为&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[5 编程能力]
&lt;ul&gt;
&lt;li&gt;《编程能力方面推普通模型不可能打得过推理模型，肯定是QWQ胜，当然时间消耗和上下文消耗只能自己取舍了，有思维链的QWQ在编程能力可是能解决R1的存在》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[6 指令跟随能力]
&lt;ul&gt;
&lt;li&gt;[6.1 注意力测试]
&lt;ul&gt;
&lt;li&gt;&amp;lt;指令跟随能力检验的是 模型在多轮对话中理解和持续遵循复杂指令的能力，可以理解成上下文记忆和处理以及理解能力，其中最重要的当然是模型对上下文的记忆能力，因为推理分析太占用注意力了》&lt;/li&gt;
&lt;li&gt;《单次规则下，指令跟随能力方面 gemma3更强，推理模型无法在长周期指令下保质指令性能，因为推理模型注意力比不过普通模型，推理模型更容易因为随着对话次数的增加而导致注意力衰减，导致输出环节出现规则遗忘等“掉链子”情况》
&lt;ul&gt;
&lt;li&gt;《总结起来就是在使用推理模型的时候，一定要在提示词那里时刻提醒模型规则，否则推理模型把注意力都集中在了推理分析，容易遗忘规则的》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;《《多轮对话弥补方案：每轮对话都提起规则，这种情况下就是QWQ更强，它只是注意力不集中在以前的规则，但只要规则在现在，推理模型就会把注意力分配到现在的规则，再凭借强大的推理能力去遵循规则》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[[[6.2 复杂规则的遵循能力]
&lt;ul&gt;
&lt;li&gt;《《其实指令跟随能力更多的是要求模型按我的规则输出，也就是提示词里面的“同时满足所有这些要求，并且这个分析本身也要遵循上述所有规则”，输入的规则越多越复杂就越是考验模型的指令跟随能力；》&lt;/li&gt;
&lt;li&gt;《《复杂指令的遵循肯定推理模型强，推理模型只是多轮对话不行，因为多轮多话会导致模型注意力不集中；但单次输出的话，推理模型本身能把强逻辑和推理能力注意力集中在规则上，输出的格式肯定更准确&amp;gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;比如同样的例子和格式，gemin2.0无论怎么提醒它格式，它都无法输出正确的格式，但gemini2.5pro凭借它的推理能力能做到更容易做到以复杂的规则输出&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;《续，在指令跟随能力上 其实推理模型gemini2.5pro也不太行，对提示词又要求  比如给出了例子和格式还要我再把格式解释一遍，字体修改也是两次的提起，尤其是中文输出更是要重复提起  &lt;a class=&#34;link&#34; href=&#34;https://aistudio.google.com/prompts/17frt2TEoNuFHOBzK-lF4EDJmr-XYYCzD&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://aistudio.google.com/prompts/17frt2TEoNuFHOBzK-lF4EDJmr-XYYCzD&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[2 推理模型vs基础语言模型]
&lt;ul&gt;
&lt;li&gt;[1 结论]
&lt;ul&gt;
&lt;li&gt;&amp;lt;推理模型和基础语音模型没有绝对的谁强谁弱，它们各有优劣，适用于不同的应用场景 &amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[2 推理模型虽然强大，但缺点不能视而不见]
&lt;ul&gt;
&lt;li&gt;&amp;laquo;1 推理模型不适合需要快速交互的场景，因为优异的性能，然而这种优势也伴随着显著的代价，及每一次提问都需要更额外的思考过程，甚至可能长达五分钟以上&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;2 对于算力有限的本地电脑而言，这种额外的运算负担会直接导致输出速度显著地下降，无疑是一个不容忽视的缺点&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;3 注意力机制问题导致指令跟随能力不强，角色扮演、多轮对话的场景容易出错，需要时刻提醒规则&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[3 gemma3的优点]
&lt;ul&gt;
&lt;li&gt;&amp;lt;1 综合性能强，除了编程以外几乎什么都做&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;2 性能表现则展现出另一种优势，无需冗长的思考过程，响应迅速，能够更快速地交付结果，提升了使用效率&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;3 指令跟随能力更强，适合多轮多话或晚角色扮演&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;4 文学能力更强，不像推理模型因为逻辑性太强导致输出的文学AI味太浓&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[3 gemma3视觉推理能力测试]
&lt;ul&gt;
&lt;li&gt;[1 OCR能力]
&lt;ul&gt;
&lt;li&gt;&amp;lt;完美地将整个表格OCR， 带颜色的数据也能标注出来&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[2 复杂图像分析（比如折线图）]
&lt;ul&gt;
&lt;li&gt;&amp;lt;能对所有关键数据都进行提取，分析了表格的走向， 其对图表的分析还是非常到位的，分析的结论也是正确的&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[3 故事情节和故事逻辑理解能力]
&lt;ul&gt;
&lt;li&gt;&amp;lt;gemma3能理解多张图片的逻辑关系，能把多张图片拼接成一个连续的故事情节&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;比如给几张猫和老鼠的图片，gemma3把这几张图片拼接成一个连续的故事情节：Tom打字 -&amp;gt; Jerry拔插头 -&amp;gt; Tom触电&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[4 对复杂或抽象的构图的理解（比如视觉错位）]
&lt;ul&gt;
&lt;li&gt;&amp;lt;gemma3始终不是推理模型，肯定无法处理视觉元素的扭曲、错位、抽象表达&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;laquo;模型需要更深入的推理（例如，判断这些扭曲的元素是什么、它们代表什么意义）才能理解复杂构图，同时有推理能力和推理能力的千问2.5max应该会做得更好&amp;raquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;laquo;&amp;lt;GPT-4.1测试&amp;gt; &lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV14AdZYpEDk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.bilibili.com/video/BV14AdZYpEDk&lt;/a&gt;   &lt;a class=&#34;link&#34; href=&#34;https://aistudio.google.com/prompts/1woqAsn54QZrpy8CoeyzMsiFfTMPg_u1B&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://aistudio.google.com/prompts/1woqAsn54QZrpy8CoeyzMsiFfTMPg_u1B&lt;/a&gt;   （获取测试题） &lt;a class=&#34;link&#34; href=&#34;https://aistudio.google.com/prompts/1woqAsn54QZrpy8CoeyzMsiFfTMPg_u1B&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://aistudio.google.com/prompts/1woqAsn54QZrpy8CoeyzMsiFfTMPg_u1B&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[gpt4.1模型能力测试《《《可以要提示词 这些提示词用来测试模型的能力很好》]
&lt;ul&gt;
&lt;li&gt;[1 幻觉识别能力]
&lt;ul&gt;
&lt;li&gt;&amp;lt;对于虚构的人物、历史事件、地理位置识别较好，不易产生幻觉；但对于虚构的科学理论、技术、化学物质等容易产生幻觉，会一本正经地编造信息。&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[2 指令遵循能力]
&lt;ul&gt;
&lt;li&gt;&amp;lt;基本能遵循复杂的多重指令，比如用【测试模型是否能遵循指令的复杂指令测试的提示词】测试，输出结果成功实现 包括否定性约束（如禁用特定字母）和格式要求（如JSON），能力较之前版本有显著提升，但在细节处理上（如 答案标签 格式）可能存在小瑕疵。&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://aistudio.google.com/prompts/1KyZa9d9Vd3D4dItzp3wgkDRe6frLgT5C&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://aistudio.google.com/prompts/1KyZa9d9Vd3D4dItzp3wgkDRe6frLgT5C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[3 逻辑推理能力]
&lt;ul&gt;
&lt;li&gt;&amp;lt;在解决增加了复杂约束条件的农夫过河问题时失败，第一步即出错，表明其在复杂逻辑推理方面仍有不足。&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[4 模式识别能力]
&lt;ul&gt;
&lt;li&gt;&amp;lt;使用【找规律测试（序列推理测试）的提示词】中，gpt4.1未能识别基于字母的序列规律，但成功识别了两种不同的数字序列规律（交替模式和二进制模式）。&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[5 编程能力]
&lt;ul&gt;
&lt;li&gt;&amp;lt;编程能力强大，尤其在SwiftUI和前端（HTML/Tailwind CSS）方面表现出色，能生成复杂且有效的代码和界面；但在Three.js可视化方面生成的代码未能成功渲染；通过Cline插件也能完成较复杂的macOS应用开发（如水印应用），但可能需要错误修复环节。&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[6 API调用成本]
&lt;ul&gt;
&lt;li&gt;&amp;lt;API调用成本尚可，完成较复杂的macOS应用开发（如水印应用）消耗了约 $0.56 的 API 调用费用，对于这样一个相对复杂的项目来说，成本尚可接受&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>面包购买小技巧 4——法国和德国黑麦面包有什么区别</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E9%9D%A2%E5%8C%85%E8%B4%AD%E4%B9%B0%E5%B0%8F%E6%8A%80%E5%B7%A7-4%E6%B3%95%E5%9B%BD%E5%92%8C%E5%BE%B7%E5%9B%BD%E9%BB%91%E9%BA%A6%E9%9D%A2%E5%8C%85%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</link>
        <pubDate>Mon, 28 Apr 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E9%9D%A2%E5%8C%85%E8%B4%AD%E4%B9%B0%E5%B0%8F%E6%8A%80%E5%B7%A7-4%E6%B3%95%E5%9B%BD%E5%92%8C%E5%BE%B7%E5%9B%BD%E9%BB%91%E9%BA%A6%E9%9D%A2%E5%8C%85%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</guid>
        <description>&lt;p&gt;༼面包购买小技巧 4——法国和德国黑麦面包有什么区别 ༽&lt;/p&gt;
&lt;h1 id=&#34;part1-gang-gang面包店初体验与黑麦面包&#34;&gt;part1: Gang Gang面包店初体验与黑麦面包
&lt;/h1&gt;&lt;p&gt;(00:00-00:09) &lt;em&gt;&lt;strong&gt;1.1: 介绍Gang Gang面包店&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;今天去了一家叫 &lt;strong&gt;Gang Gang&lt;/strong&gt; 的&lt;strong&gt;面包店&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;感觉还挺好，所以&lt;strong&gt;大肆的进货&lt;/strong&gt;，把店里&lt;strong&gt;所有值得买的东西&lt;/strong&gt;都买了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(00:09-00:21) &lt;em&gt;&lt;strong&gt;1.2: 展示黑麦面包与第一印象&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;评价标准至少包括名字、质感、颜色做得比较好的。&lt;/li&gt;
&lt;li&gt;进店时看到了这款&lt;strong&gt;黑麦面包&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;看到这款面包时，当时就觉得&lt;strong&gt;稳了&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(00:21-00:32) &lt;em&gt;&lt;strong&gt;1.3: 黑麦面包外观与T系列面粉&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面包表面&lt;strong&gt;撒的面粉&lt;/strong&gt;，烤焦后有特殊味道。&lt;/li&gt;
&lt;li&gt;解释了&lt;strong&gt;T45 T55&lt;/strong&gt;面粉的概念，指&lt;strong&gt;面粉烤焦&lt;/strong&gt;后留下的&lt;strong&gt;灰分的含量&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(00:32-00:38) &lt;em&gt;&lt;strong&gt;1.4: 与宜家杰森面包对比&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这款面包是&lt;strong&gt;宜家&lt;/strong&gt;那款&lt;strong&gt;杰森面包&lt;/strong&gt;（像&lt;strong&gt;床头柜&lt;/strong&gt;一样的面包）的&lt;strong&gt;亲戚&lt;/strong&gt;，是其&lt;strong&gt;高配版本&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(00:38-00:48) &lt;em&gt;&lt;strong&gt;1.5: 黑麦面包内部组织特点&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这款面包不会有&lt;strong&gt;大气孔&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;原因是其&lt;strong&gt;面粉的属性&lt;/strong&gt;与平时做法棍的不同，即使&lt;strong&gt;长时间发酵&lt;/strong&gt;也发不出大气泡。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(00:48-00:57) &lt;em&gt;&lt;strong&gt;1.6: 黑麦面包食用建议 (德国面包)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建议这款面包最适合搭配&lt;strong&gt;牛窝骨&lt;/strong&gt;、&lt;strong&gt;大肘子&lt;/strong&gt;和&lt;strong&gt;酸菜&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;指出&lt;strong&gt;德国人&lt;/strong&gt;也是这么吃&lt;strong&gt;德国面包&lt;/strong&gt;的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part2-法国面包对比与评价标准&#34;&gt;part2: 法国面包对比与评价标准
&lt;/h1&gt;&lt;p&gt;(00:57-01:13) &lt;em&gt;&lt;strong&gt;2.1: 展示法国面包并与黑麦面包对比&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展示了另一款&lt;strong&gt;法国面包&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;两款面包&lt;strong&gt;长得很像&lt;/strong&gt;，但有&lt;strong&gt;区别&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;名字不一样&lt;/strong&gt;，内部&lt;strong&gt;组织不一样&lt;/strong&gt;，&lt;strong&gt;面粉比例&lt;/strong&gt;是不同的。&lt;/li&gt;
&lt;li&gt;闻起来&lt;strong&gt;味道是差不多&lt;/strong&gt;的，但&lt;strong&gt;口感上面区别会比较大&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(01:14-01:28) &lt;em&gt;&lt;strong&gt;2.2: 评价面包好坏的标准 (裂口与皮)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供了&lt;strong&gt;判断&lt;/strong&gt;面包好坏的&lt;strong&gt;方法&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;一看&lt;strong&gt;裂口&lt;/strong&gt;情况（要炸开）。&lt;/li&gt;
&lt;li&gt;二看&lt;strong&gt;皮&lt;/strong&gt;，&lt;strong&gt;皮不能太厚&lt;/strong&gt;。做得不好的大面包，&lt;strong&gt;皮烤的特别的厚&lt;/strong&gt;，或者&lt;strong&gt;表面烤焦了&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(01:28-01:31) &lt;em&gt;&lt;strong&gt;2.3: 面包价格&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一条面包大概是 &lt;strong&gt;56块钱&lt;/strong&gt;，视频中展示的是&lt;strong&gt;半条&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part3-全麦吐司-graham面包-介绍&#34;&gt;part3: 全麦吐司 (Graham面包) 介绍
&lt;/h1&gt;&lt;p&gt;(01:31-01:44) &lt;em&gt;&lt;strong&gt;3.1: 展示全麦吐司及其名称由来&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第三个点评的是&lt;strong&gt;全麦吐司&lt;/strong&gt;，&lt;strong&gt;两天的保质期&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;中文名叫全麦吐司，但包装上写了英文和日语叫 &lt;strong&gt;Graham&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Graham&lt;/strong&gt;是个&lt;strong&gt;美国人&lt;/strong&gt;，一位&lt;strong&gt;农学家&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(01:44-01:51) &lt;em&gt;&lt;strong&gt;3.2: Graham面包与早期全麦吐司&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Graham 曾&lt;strong&gt;推广的全麦面包&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;早期的全麦吐司&lt;/strong&gt;是在他的基础上做的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(01:51-02:12) &lt;em&gt;&lt;strong&gt;3.3: Graham面包造型特点 (One Loaf)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Graham面包&lt;/strong&gt; 首先是&lt;strong&gt;全麦面包&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;其&lt;strong&gt;造型&lt;/strong&gt;特点是 &lt;strong&gt;one Loaf&lt;/strong&gt;，与普通吐司&lt;strong&gt;卷成三个卷&lt;/strong&gt;不同，它的&lt;strong&gt;圆圈&lt;/strong&gt;（卷的纹路）应该在&lt;strong&gt;侧面&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:12-02:18) &lt;em&gt;&lt;strong&gt;3.4: Graham面包制作特点&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它是&lt;strong&gt;一次卷&lt;/strong&gt;一个&lt;strong&gt;很大的卷&lt;/strong&gt;，然后&lt;strong&gt;一次发酵&lt;/strong&gt;起来，这是 &lt;strong&gt;Grandham这款面包的特点&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:18-02:25) &lt;em&gt;&lt;strong&gt;3.5: 评价全麦吐司的标准&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;判断方法&lt;/strong&gt;还是看&lt;strong&gt;皮的厚度&lt;/strong&gt;，以及&lt;strong&gt;四周和中间&lt;/strong&gt;的&lt;strong&gt;质地的不同&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:25-02:39) &lt;em&gt;&lt;strong&gt;3.6: 美式全麦吐司的口感特点&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是一款很经典的&lt;strong&gt;美式全麦吐司&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;口感不会像日本人做的那么细腻，就是这种&lt;strong&gt;粗糙的&lt;/strong&gt;，&lt;strong&gt;不加添加剂&lt;/strong&gt;就是这个样子。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:39-02:43) &lt;em&gt;&lt;strong&gt;3.7: 麦香味评价&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为全麦含量不多，所以有&lt;strong&gt;麦香&lt;/strong&gt;，但是跟刚才两款肯定没得比。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:43-03:05) &lt;em&gt;&lt;strong&gt;3.8: 切片厚度问题&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指出这款面包有个问题是&lt;strong&gt;切太薄了&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;不知道切这么薄怎么吃，一般只有&lt;strong&gt;工厂&lt;/strong&gt;的（如&lt;strong&gt;罗森&lt;/strong&gt;、&lt;strong&gt;seven Eleven&lt;/strong&gt;的&lt;strong&gt;三明治&lt;/strong&gt;）才会切这么薄。&lt;/li&gt;
&lt;li&gt;正常的切法是&lt;strong&gt;半条吐司切4片到6片&lt;/strong&gt;，这款明显超过6片，已经&lt;strong&gt;8片&lt;/strong&gt;了，是&lt;strong&gt;8切的吐司&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part4-红豆包评价&#34;&gt;part4: 红豆包评价
&lt;/h1&gt;&lt;p&gt;(03:05-03:17) &lt;em&gt;&lt;strong&gt;4.1: 红豆包外观评价 (上色与膨胀)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展示&lt;strong&gt;红豆包&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;指出&lt;strong&gt;这条线&lt;/strong&gt;，说明&lt;strong&gt;蛋液&lt;/strong&gt;刷到这里，然后&lt;strong&gt;先烤到是这里&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;底下偏白的部分是&lt;strong&gt;膨胀的地方&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:17-03:26) &lt;em&gt;&lt;strong&gt;4.2: 红豆包底部评价&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查&lt;strong&gt;底下&lt;/strong&gt;，&lt;strong&gt;没有明显的裂口&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;解释底部&lt;strong&gt;褶皱了&lt;/strong&gt;是因为运输时&lt;strong&gt;面包被压了&lt;/strong&gt;，拿出来时是&lt;strong&gt;刚出炉&lt;/strong&gt;的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:26-03:37) &lt;em&gt;&lt;strong&gt;4.3: 综合评价标准&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顶部有&lt;strong&gt;黑芝麻&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;检查&lt;strong&gt;底下&lt;/strong&gt;是否&lt;strong&gt;很圆&lt;/strong&gt;，这说明&lt;strong&gt;受力很均匀&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;看里面&lt;strong&gt;红豆馅&lt;/strong&gt;有多少。&lt;/li&gt;
&lt;li&gt;看&lt;strong&gt;底下有没有死&lt;/strong&gt;（面没发起来）。这些都是&lt;strong&gt;常见判断的方法&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:37-03:48) &lt;em&gt;&lt;strong&gt;4.4: 更多外观细节&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;再次看底部的&lt;strong&gt;线&lt;/strong&gt;，如果&lt;strong&gt;边上有一圈线&lt;/strong&gt;，说明&lt;strong&gt;鸡蛋刷多了&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;这款&lt;strong&gt;整体控制都很好&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:48-04:19) &lt;em&gt;&lt;strong&gt;4.5: 内部馅料与制作分析&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切开展示，&lt;strong&gt;馅料是满的&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;分析：很多时候用&lt;strong&gt;低糖的红豆沙&lt;/strong&gt;或者&lt;strong&gt;自制红豆馅&lt;/strong&gt;时，如果&lt;strong&gt;红豆馅炒的不够干&lt;/strong&gt;、&lt;strong&gt;糖给的不够多&lt;/strong&gt;，会导致&lt;strong&gt;红豆馅会很重&lt;/strong&gt;，&lt;strong&gt;把底下压死&lt;/strong&gt;，或者上面的&lt;strong&gt;水蒸气&lt;/strong&gt;会&lt;strong&gt;把面包顶起来&lt;/strong&gt;（形成空洞）。&lt;/li&gt;
&lt;li&gt;这款面包&lt;strong&gt;整体就比较好&lt;/strong&gt;，&lt;strong&gt;红豆馅看起来像是自己煮的&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;底部的还好&lt;/strong&gt;，&lt;strong&gt;组织也是对的&lt;/strong&gt;，&lt;strong&gt;颜色也是对的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:19-04:32) &lt;em&gt;&lt;strong&gt;4.6: 水平评价&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这款&lt;strong&gt;红豆包的水平&lt;/strong&gt;，&lt;strong&gt;在日本是属于中游&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;比顶级店的话差一点&lt;/strong&gt;，但是&lt;strong&gt;绝对比路边店要好&lt;/strong&gt;，&lt;strong&gt;已经很高级了&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part5-黄油卷评价&#34;&gt;part5: 黄油卷评价
&lt;/h1&gt;&lt;p&gt;(04:32-04:46) &lt;em&gt;&lt;strong&gt;5.1: 展示黄油卷及问题分析&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展示之前做的&lt;strong&gt;小的面包&lt;/strong&gt;（&lt;strong&gt;黄油卷&lt;/strong&gt;）。&lt;/li&gt;
&lt;li&gt;指出小面包&lt;strong&gt;底下它就不圆&lt;/strong&gt;，有点像&lt;strong&gt;扇形&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:46-05:15) &lt;em&gt;&lt;strong&gt;5.2: 制作难点与日式做法&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解释原因：&lt;strong&gt;面包太小了&lt;/strong&gt;，&lt;strong&gt;手用力&lt;/strong&gt;整形会&lt;strong&gt;比较困难&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;这是&lt;strong&gt;标准的日式黄油卷的做法&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;指出虽然叫&lt;strong&gt;黄油卷&lt;/strong&gt;，但&lt;strong&gt;和黄油的关系真的不是很大&lt;/strong&gt;，&lt;strong&gt;黄油给的不多&lt;/strong&gt;，应该说是&lt;strong&gt;很少&lt;/strong&gt;，里面一般还会&lt;strong&gt;混一部分的起酥油&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;这种面包是&lt;strong&gt;日本人最喜欢的早餐&lt;/strong&gt;，多年未变。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part6-可颂评价&#34;&gt;part6: 可颂评价
&lt;/h1&gt;&lt;p&gt;(05:15-05:27) &lt;em&gt;&lt;strong&gt;6.1: 可颂味道评价&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展示&lt;strong&gt;可颂&lt;/strong&gt;，评价味道对了。&lt;/li&gt;
&lt;li&gt;这是&lt;strong&gt;标准的黄油可颂的味道&lt;/strong&gt;，但吃不到&lt;strong&gt;发酵黄油的味道&lt;/strong&gt;，只是&lt;strong&gt;黄油的味道&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:27-05:57) &lt;em&gt;&lt;strong&gt;6.2: 提升可颂风味的技巧&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;揭示一些手艺不太行的店如何让&lt;strong&gt;可颂变得好吃&lt;/strong&gt;的方法：在可颂出炉时&lt;strong&gt;趁热喷一点糖水&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;散热的时候水分蒸发&lt;/strong&gt;后，&lt;strong&gt;表面就会有层糖&lt;/strong&gt;，&lt;strong&gt;吃起来甜甜的&lt;/strong&gt;会比较好吃。&lt;/li&gt;
&lt;li&gt;将此比作&lt;strong&gt;卖橙子的常见套路&lt;/strong&gt;（用&lt;strong&gt;一瓶糖水&lt;/strong&gt;让橙子更甜），称之为&lt;strong&gt;一点不值一提的小套路&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:57-06:01) &lt;em&gt;&lt;strong&gt;6.3: 可颂价格与评价&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个可颂不打开就知道是&lt;strong&gt;重磅的产品&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;价格是 &lt;strong&gt;20块&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part7-杏仁可颂评价与横评&#34;&gt;part7: 杏仁可颂评价与横评
&lt;/h1&gt;&lt;p&gt;(06:01-06:16) &lt;em&gt;&lt;strong&gt;7.1: 展示杏仁可颂与制作分析&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;做横评，展示一款&lt;strong&gt;杏仁可颂&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;指出好的杏仁可颂，上面的&lt;strong&gt;杏仁酱&lt;/strong&gt;要&lt;strong&gt;铺到你那个杏仁都看不到&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;从底面看，这款的&lt;strong&gt;酱已经把这个整个的那个可颂都已经压扁了&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:16-06:33) &lt;em&gt;&lt;strong&gt;7.2: 杏仁可颂的日法对比&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这款里面还&lt;strong&gt;挤了杏仁酱&lt;/strong&gt;，这是&lt;strong&gt;小日本做那个杏仁可颂的做法&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;之前&lt;strong&gt;法国老师&lt;/strong&gt;过来上课时都说&lt;strong&gt;日本人的杏仁可颂做的好&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;原因是&lt;strong&gt;法国人没有那么大方&lt;/strong&gt;，而这款&lt;strong&gt;杏仁酱给的多&lt;/strong&gt;，&lt;strong&gt;日本人给的多&lt;/strong&gt;，卖得贵一点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:33-06:40) &lt;em&gt;&lt;strong&gt;7.3: 杏仁可颂的法式做法特点&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;法国人的话就比较做的会比较像这个&lt;/strong&gt;（指上一个普通可颂），&lt;strong&gt;杏仁片&lt;/strong&gt;，&lt;strong&gt;杏仁酱它就会稀疏很多&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:40-06:47) &lt;em&gt;&lt;strong&gt;7.4: 杏仁可颂内部与价格评价&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切开展示，这款中间有&lt;strong&gt;薄薄的一层酱的&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;这款卖 &lt;strong&gt;20块钱&lt;/strong&gt;，觉得是&lt;strong&gt;值得的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:47-07:03) &lt;em&gt;&lt;strong&gt;7.5: 横向对比与“不讲武德”&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要原因是这&lt;strong&gt;敌人太狡猾了&lt;/strong&gt;，&lt;strong&gt;旁边居然还有高手&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果没有这款，那个&lt;strong&gt;杏仁可颂&lt;/strong&gt;（指上一个）已经超过了几乎所有上海的杏仁可颂，就它的堆料程度。&lt;/li&gt;
&lt;li&gt;但碰到了这款，里面还加了一层&lt;strong&gt;巧克力&lt;/strong&gt;，评价这&lt;strong&gt;顶得住啊&lt;/strong&gt;，看这个&lt;strong&gt;酱有多厚&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;评价这款简直&lt;strong&gt;不讲武德&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(07:03-07:10) &lt;em&gt;&lt;strong&gt;7.6: 最终评价&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切开展示。&lt;/li&gt;
&lt;li&gt;总结：这款&lt;strong&gt;其实做的不错&lt;/strong&gt;，&lt;strong&gt;他卖20出头&lt;/strong&gt;，&lt;strong&gt;我觉得也没有太大的问题&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;自嘲：&lt;strong&gt;本来我觉得我已经够良心了&lt;/strong&gt;，&lt;strong&gt;结果别人比我还卷的很&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(07:10-07:19) &lt;em&gt;&lt;strong&gt;7.7: 巧克力杏仁可颂&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;再次强调这款&lt;strong&gt;中间还加了一层巧克力&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;展示其&lt;strong&gt;酱有多厚&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(07:19-07:37) &lt;em&gt;&lt;strong&gt;7.8: 杏仁可颂的起源与现状&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解释&lt;strong&gt;杏仁可颂它本身存在的意义&lt;/strong&gt;：有点像是&lt;strong&gt;头一天没有卖完的米饭&lt;/strong&gt;，&lt;strong&gt;第二天变成了炒饭&lt;/strong&gt;；&lt;strong&gt;头一天没卖完的可颂&lt;/strong&gt;，&lt;strong&gt;就变成了杏仁可颂&lt;/strong&gt;（或&lt;strong&gt;巧克力可颂&lt;/strong&gt;，这款是&lt;strong&gt;巧克力杏仁可颂&lt;/strong&gt;）。&lt;/li&gt;
&lt;li&gt;但现在不是这样，因为&lt;strong&gt;杏仁可颂卖的太好了&lt;/strong&gt;，&lt;strong&gt;爱吃的人太多了&lt;/strong&gt;，所以很多店是&lt;strong&gt;专门多烤&lt;/strong&gt;可颂来做杏仁可颂。&lt;/li&gt;
&lt;li&gt;指出杏仁可颂必须是&lt;strong&gt;让可颂要放一天才能做&lt;/strong&gt;，&lt;strong&gt;它跟那个炒饭是一样的&lt;/strong&gt;，&lt;strong&gt;必须要把它放在外面&lt;/strong&gt;，&lt;strong&gt;相当于把它放干了&lt;/strong&gt;，&lt;strong&gt;可颂放干了以后再去刷糖水&lt;/strong&gt;，&lt;strong&gt;再去放酱&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(07:37-08:16) &lt;em&gt;&lt;strong&gt;7.9: 制作细节差异&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你用&lt;strong&gt;刚烤出来的&lt;/strong&gt;可颂做，首先它的&lt;strong&gt;质地不稳定&lt;/strong&gt;，&lt;strong&gt;它太软了&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;其次它的&lt;strong&gt;含水量太多&lt;/strong&gt;，&lt;strong&gt;它中间的酱不能挤太多&lt;/strong&gt;，&lt;strong&gt;不然的话它会有点稀&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:16-08:22) &lt;em&gt;&lt;strong&gt;7.10: 台湾面包店对比&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;举例：在&lt;strong&gt;台湾的法国面包店&lt;/strong&gt;里面，&lt;strong&gt;可颂基本上是没有人买的&lt;/strong&gt;，但是&lt;strong&gt;卖的最好的产品就是杏仁可颂&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>MCP&#43;智能体，开发AI版“你画我猜”效率翻倍</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/mcp-%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91ai%E7%89%88%E4%BD%A0%E7%94%BB%E6%88%91%E7%8C%9C%E6%95%88%E7%8E%87%E7%BF%BB%E5%80%8D/</link>
        <pubDate>Sun, 27 Apr 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/mcp-%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91ai%E7%89%88%E4%BD%A0%E7%94%BB%E6%88%91%E7%8C%9C%E6%95%88%E7%8E%87%E7%BF%BB%E5%80%8D/</guid>
        <description>&lt;p&gt;༼ MCP+智能体，开发AI版“你画我猜”效率翻倍༽&lt;/p&gt;
&lt;h1 id=&#34;part1-自定义智能体-mcp-git--github-配置&#34;&gt;part1: 自定义智能体 (MCP Git &amp;amp; Github 配置)
&lt;/h1&gt;&lt;p&gt;(02:42-03:04) &lt;em&gt;&lt;strong&gt;1.1: 添加Git MCP Server&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍如何添加 &lt;strong&gt;Git&lt;/strong&gt; 的 &lt;strong&gt;MCP Server&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;作者展示了在 &lt;strong&gt;MCP 市场&lt;/strong&gt; 中找到 &lt;strong&gt;Git&lt;/strong&gt; 工具，并点击添加。&lt;/li&gt;
&lt;li&gt;添加过程需要参考 &lt;strong&gt;介绍页面&lt;/strong&gt;，将 &lt;strong&gt;JSON 配置&lt;/strong&gt; 复制过来。作者展示了从 Github 上的 &lt;code&gt;modelcontextprotocol/servers&lt;/code&gt; 仓库中找到 &lt;code&gt;mcp-server-git&lt;/code&gt; 的配置，特别是 &lt;strong&gt;uvx&lt;/strong&gt; 的配置方式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：复制了使用 &lt;code&gt;uvx&lt;/code&gt; 命令启动 &lt;code&gt;mcp-server-git&lt;/code&gt; 的 &lt;strong&gt;JSON&lt;/strong&gt; 配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者建议&lt;/strong&gt;：使用 &lt;strong&gt;uvx&lt;/strong&gt; 之前需要在电脑上先安装 &lt;strong&gt;uv&lt;/strong&gt;（一个 Python 版本和包管理工具），可以使用官网的&lt;strong&gt;一键安装命令&lt;/strong&gt;进行安装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;画面内容 (JSON 配置)&lt;/strong&gt;：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;mcpServers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;git&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;uvx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mcp-server-git&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;--repository-path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;作者将复制的 &lt;strong&gt;JSON&lt;/strong&gt; 粘贴到 Trae 的 &lt;strong&gt;MCP Server&lt;/strong&gt; 添加窗口中，并点击确认完成添加。现在 &lt;strong&gt;MCP Servers&lt;/strong&gt; 列表中同时有了 &lt;code&gt;git&lt;/code&gt; 和 &lt;code&gt;GitHub&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:04-03:09) &lt;em&gt;&lt;strong&gt;1.2: 创建Git专家智能体&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：将已配置的 &lt;code&gt;git&lt;/code&gt; 和 &lt;code&gt;GitHub&lt;/code&gt; &lt;strong&gt;MCP Server&lt;/strong&gt; 工具组合成一个专门处理 Git 相关任务的智能体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;点击“智能体” -&amp;gt; “+ 创建智能体”。&lt;/li&gt;
&lt;li&gt;将智能体命名为 &lt;strong&gt;“Git 专家”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在“工具” -&amp;gt; “工具 - MCP”部分，&lt;strong&gt;勾选&lt;/strong&gt;上刚刚配置好的 &lt;code&gt;git&lt;/code&gt; 和 &lt;code&gt;GitHub&lt;/code&gt; 两个工具。&lt;/li&gt;
&lt;li&gt;编写&lt;strong&gt;提示词&lt;/strong&gt;，定义该智能体的角色：&lt;code&gt;你是一个Git专家，擅长使用MCP Server操作Git与Github&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;点击“创建”完成智能体配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part2-git专家智能体测试-初始化与提交&#34;&gt;part2: Git专家智能体测试 (初始化与提交)
&lt;/h1&gt;&lt;p&gt;(03:10-03:21) &lt;em&gt;&lt;strong&gt;2.1: 使用Git专家初始化项目&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：测试新创建的 &lt;strong&gt;“Git 专家”&lt;/strong&gt; 智能体的 Git 初始化能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;新建一个对话窗口。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;@&lt;/code&gt; 符号&lt;strong&gt;调用“Git 专家”智能体&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♏&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;把这个文件夹初始化成一个git工程，名字用文件夹名字即可&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 开始执行任务，依次调用了 &lt;code&gt;git&lt;/code&gt; MCP 工具执行了 &lt;code&gt;git init&lt;/code&gt; 命令，并&lt;strong&gt;创建了 &lt;code&gt;.gitignore&lt;/code&gt; 文件&lt;/strong&gt;，然后执行了 &lt;code&gt;git add .gitignore&lt;/code&gt; 和 &lt;code&gt;git commit -m &amp;quot;初始初始化仓库：添加.gitignore文件&amp;quot;&lt;/code&gt; 命令。&lt;/li&gt;
&lt;li&gt;用户&lt;strong&gt;一路点击确认&lt;/strong&gt;（或设置为自动执行），AI &lt;strong&gt;成功完成了初始化&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:22-03:37) &lt;em&gt;&lt;strong&gt;2.2: 使用Git专家提交到Github&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：测试 &lt;strong&gt;“Git 专家”&lt;/strong&gt; 智能体与 Github 的交互能力，将本地仓库推送到远程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;♏&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;把这个仓库，提交到Github上面&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 开始执行任务，调用 &lt;code&gt;GitHub&lt;/code&gt; MCP 工具&lt;strong&gt;创建了一个新的 Github 仓库&lt;/strong&gt; (&lt;code&gt;tech-shrimp/trae_test&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;接着调用 &lt;code&gt;git&lt;/code&gt; MCP 工具执行了 &lt;code&gt;git remote add origin ...&lt;/code&gt; 和 &lt;code&gt;git push -u origin main&lt;/code&gt; 命令，将本地仓库与远程仓库关联并&lt;strong&gt;推送代码&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：操作成功完成，代码被推送到新创建的 Github 仓库。作者切换到浏览器验证，确认 Github 上已成功创建 &lt;code&gt;trae_test&lt;/code&gt; 仓库。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part3-git专家智能体测试-分支合并与冲突解决&#34;&gt;part3: Git专家智能体测试 (分支合并与冲突解决)
&lt;/h1&gt;&lt;p&gt;(03:37-03:48) &lt;em&gt;&lt;strong&gt;3.1: 模拟分支冲突&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：创建一个更复杂的场景来测试 &lt;strong&gt;“Git 专家”&lt;/strong&gt; 智能体处理&lt;strong&gt;分支合并冲突&lt;/strong&gt;的能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;作者在 Github 仓库 &lt;code&gt;trae_test&lt;/code&gt; 中手动操作：
&lt;ul&gt;
&lt;li&gt;创建了一个 &lt;code&gt;colors.txt&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;创建了两个分支：&lt;code&gt;feature&lt;/code&gt; 和 &lt;code&gt;main&lt;/code&gt;。
♋- 在 &lt;code&gt;feature&lt;/code&gt; 分支的 &lt;code&gt;colors.txt&lt;/code&gt; 文件末尾&lt;strong&gt;添加了一行 &amp;ldquo;pink&amp;rdquo;&lt;/strong&gt;。
♋- 在 &lt;code&gt;main&lt;/code&gt; 分支的 &lt;code&gt;colors.txt&lt;/code&gt; 文件末尾&lt;strong&gt;添加了一行 &amp;ldquo;black&amp;rdquo;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：这样就在两个分支的同一个文件 (&lt;code&gt;colors.txt&lt;/code&gt;) 的同一位置（末尾）产生了&lt;strong&gt;修改冲突&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者观点&lt;/strong&gt;：这是开发过程中&lt;strong&gt;经常遇到的问题&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:48-04:12) &lt;em&gt;&lt;strong&gt;3.2: 指示Git专家合并分支并解决冲突&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 &lt;strong&gt;“Git 专家”&lt;/strong&gt; 智能体自动&lt;strong&gt;合并&lt;/strong&gt; &lt;code&gt;feature&lt;/code&gt; 分支到 &lt;code&gt;main&lt;/code&gt; 分支，并&lt;strong&gt;解决&lt;/strong&gt;期间产生的&lt;strong&gt;冲突&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;♏&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;把远程的feature分支合并到main分支，并且帮我解决冲突&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 开始执行任务：
&lt;ul&gt;
&lt;li&gt;调用 &lt;code&gt;git&lt;/code&gt; MCP 工具执行 &lt;code&gt;git status&lt;/code&gt; 检查状态，然后 &lt;code&gt;git fetch origin&lt;/code&gt; 获取远程更新。&lt;/li&gt;
&lt;li&gt;尝试执行 &lt;code&gt;git merge origin/feature&lt;/code&gt; 进行合并，此时检测到&lt;strong&gt;冲突&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;AI &lt;strong&gt;分析冲突&lt;/strong&gt;，决定&lt;strong&gt;保留两个分支的修改&lt;/strong&gt;（即同时保留 &amp;ldquo;pink&amp;rdquo; 和 &amp;ldquo;black&amp;rdquo;）。&lt;/li&gt;
&lt;li&gt;AI 修改 &lt;code&gt;colors.txt&lt;/code&gt; 文件以解决冲突，然后执行 &lt;code&gt;git add colors.txt&lt;/code&gt; 和 &lt;code&gt;git commit -m &amp;quot;Merge feature branch: 合并 colors.txt 中的颜色列表&amp;quot;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;最后执行 &lt;code&gt;git push&lt;/code&gt; 将解决冲突后的结果推送到远程 &lt;code&gt;main&lt;/code&gt; 分支。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：&lt;code&gt;colors.txt&lt;/code&gt; 文件现在包含 &lt;strong&gt;6 种颜色&lt;/strong&gt;，AI &lt;strong&gt;流畅丝滑地完成了合并和冲突解决&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part4-规则-rule-功能介绍与项目规则配置&#34;&gt;part4: 规则 (Rule) 功能介绍与项目规则配置
&lt;/h1&gt;&lt;p&gt;(04:13-04:29) &lt;em&gt;&lt;strong&gt;4.1: 规则功能介绍&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;规则 (Rule)&lt;/strong&gt; 是 Trae 的另一个&lt;strong&gt;重磅更新&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;它的作用类似于&lt;strong&gt;系统级的提示词 (System Prompt)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;可以告诉 AI 当前项目的&lt;strong&gt;具体是做什么的&lt;/strong&gt;、使用的&lt;strong&gt;技术框架&lt;/strong&gt;以及开发者的&lt;strong&gt;开发习惯&lt;/strong&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 AI &lt;strong&gt;更懂项目&lt;/strong&gt;，也&lt;strong&gt;更懂你&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:29-04:36) &lt;em&gt;&lt;strong&gt;4.2: 项目设定：AI你画我猜&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;本次演示项目&lt;/strong&gt;：使用 Trae 完成一个 &lt;strong&gt;“AI 你画我猜”&lt;/strong&gt; 的小游戏。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心特点&lt;/strong&gt;：使用 &lt;strong&gt;AI (OpenAI Vision API)&lt;/strong&gt; 而不是真人作为&lt;strong&gt;裁判&lt;/strong&gt;来猜测玩家画的内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;准备工作&lt;/strong&gt;：作者删除了之前测试用的 &lt;code&gt;colors.txt&lt;/code&gt; 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:36-04:55) &lt;em&gt;&lt;strong&gt;4.3: 配置项目规则&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作路径&lt;/strong&gt;：点击右上角用户头像 -&amp;gt; AI 功能管理 -&amp;gt; 规则。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;规则类型&lt;/strong&gt;：分为&lt;strong&gt;个人规则&lt;/strong&gt;（全局生效）和&lt;strong&gt;项目规则&lt;/strong&gt;（仅对当前项目生效）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：作者选择添加&lt;strong&gt;项目规则&lt;/strong&gt;，点击 “+ 创建 project_rules.md” 按钮。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：在项目根目录下创建了一个名为 &lt;code&gt;.trae/rules/project_rules.md&lt;/code&gt; 的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:44-04:55) &lt;em&gt;&lt;strong&gt;4.4: 编写项目规则内容&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;目的&lt;/strong&gt;：在 &lt;code&gt;project_rules.md&lt;/code&gt; 文件中定义项目的基本信息和技术选型，供 AI 参考。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：使用 &lt;strong&gt;Markdown&lt;/strong&gt; 格式编写规则内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;♏&lt;strong&gt;画面内容 (技术栈选型)&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;# AI 你画我猜网页游戏
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;## 项目概述
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt;创建一个在线你画我猜游戏，玩家可以在画布上作画，AI 系统负责猜测画的是什么内容。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;## 技术栈选型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; 脚手架：**Vite**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; 前端：**React + TypeScript**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; 画布：**HTML5 Canvas**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; 后端：**Node.js + Express**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; AI 集成：**OpenAI Vision API**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -《“你画我猜”的应用，可能只需要调用 Vision API 这一个功能，这个功能的作用就是 直接通过 HTTP 请求与 OpenAI API 交互》
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这些信息将帮助 AI 更好地理解项目需求并生成符合技术栈的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part5-使用规则拆解任务与ai执行-前端部分&#34;&gt;part5: 使用规则拆解任务与AI执行 (前端部分)
&lt;/h1&gt;&lt;p&gt;(04:55-05:10) &lt;em&gt;&lt;strong&gt;5.1: 指示AI根据规则拆解任务&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：利用配置好的&lt;strong&gt;项目规则 (Rule)&lt;/strong&gt;，让 AI 自动将项目需求拆解成可执行的任务清单。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;切换回 Trae 的聊天界面。&lt;/li&gt;
&lt;li&gt;调用 &lt;strong&gt;&lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体。&lt;/li&gt;
&lt;li&gt;♋&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;请根据 #rules 里面的项目介绍，拆解任务，任务可以跟踪状态，把所有任务写到 task.md 文件&lt;/code&gt;。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#rules&lt;/code&gt; 指的是引用刚才创建的 &lt;code&gt;project_rules.md&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#task.md&lt;/code&gt; 指的是让 AI 将拆解结果输出到 &lt;code&gt;task.md&lt;/code&gt; 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:08-05:10) &lt;em&gt;&lt;strong&gt;5.2: AI生成任务清单&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 根据 &lt;code&gt;project_rules.md&lt;/code&gt; 的内容，&lt;strong&gt;成功生成&lt;/strong&gt;了一个包含详细步骤和状态追踪标记的&lt;strong&gt;任务清单&lt;/strong&gt; (&lt;code&gt;task.md&lt;/code&gt; 文件)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:10-05:18) &lt;em&gt;&lt;strong&gt;5.3: 简化任务清单&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原因&lt;/strong&gt;：为了&lt;strong&gt;演示方便&lt;/strong&gt;，AI 生成的原始任务清单可能过于复杂。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：作者&lt;strong&gt;手动编辑&lt;/strong&gt; &lt;code&gt;task.md&lt;/code&gt; 文件，&lt;strong&gt;删掉了一些复杂的功能&lt;/strong&gt;，只保留了实现核心功能所需的基础任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:18-05:27) &lt;em&gt;&lt;strong&gt;5.4: 指示AI进行逐项开发&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 AI 根据简化后的任务清单，开始逐步执行开发任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;再次调用 &lt;strong&gt;&lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;根据 #task.md 进行逐项开发，并且标记状态&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 开始分析 &lt;code&gt;task.md&lt;/code&gt; 文件并准备执行第一个任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:27-05:43) &lt;em&gt;&lt;strong&gt;5.5: AI执行前端任务 (环境搭建与画布开发)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行过程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI 首先执行&lt;strong&gt;环境搭建&lt;/strong&gt;任务：调用系统命令执行 &lt;code&gt;npm create vite@latest . --template react-ts&lt;/code&gt; 来创建 &lt;strong&gt;React + TypeScript&lt;/strong&gt; 项目。&lt;/li&gt;
&lt;li&gt;接着执行 &lt;code&gt;npm install&lt;/code&gt; 安装依赖。&lt;/li&gt;
&lt;li&gt;然后开始执行&lt;strong&gt;画布功能开发&lt;/strong&gt;任务，创建和修改相关组件文件 (&lt;code&gt;DrawingCanvas.tsx&lt;/code&gt;, &lt;code&gt;DrawingCanvas.css&lt;/code&gt; 等)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户交互&lt;/strong&gt;：AI 每生成一段代码或执行一个命令，都会展示给用户，用户只需&lt;strong&gt;点击“接受”&lt;/strong&gt;（或“全部接受”）即可。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者评价&lt;/strong&gt;：因为有任务列表的存在，AI 干活&lt;strong&gt;非常的有条理&lt;/strong&gt;，用户操作&lt;strong&gt;非常简单&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:46-05:59) &lt;em&gt;&lt;strong&gt;5.6: AI执行前端任务 (用户界面开发与测试)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行过程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI 继续根据 &lt;code&gt;task.md&lt;/code&gt; 执行后续的前端任务，包括&lt;strong&gt;用户界面布局&lt;/strong&gt; (&lt;code&gt;App.tsx&lt;/code&gt;, &lt;code&gt;App.css&lt;/code&gt;)、&lt;strong&gt;结果显示区域&lt;/strong&gt; (&lt;code&gt;ResultDisplay.tsx&lt;/code&gt;)、&lt;strong&gt;单元测试&lt;/strong&gt;等。&lt;/li&gt;
&lt;li&gt;AI 逐步创建、修改代码，并更新 &lt;code&gt;task.md&lt;/code&gt; 中对应任务的状态为&lt;strong&gt;已完成&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：&lt;strong&gt;一次调用 &lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体，AI 就&lt;strong&gt;直接创建了 26 个文件&lt;/strong&gt;，&lt;strong&gt;前端相关的工作已经完全完成&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part6-ai执行后端任务&#34;&gt;part6: AI执行后端任务
&lt;/h1&gt;&lt;p&gt;(06:01-06:08) &lt;em&gt;&lt;strong&gt;6.1: 指示AI进行后端开发&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 AI 继续执行任务清单中剩余的后端开发任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;新建一个会话。&lt;/li&gt;
&lt;li&gt;调用 &lt;strong&gt;&lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;请根据 #task.md 这些未完成的任务，继续完成后端的开发&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:08-06:13) &lt;em&gt;&lt;strong&gt;6.2: AI执行后端任务 (环境搭建与API开发)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行过程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI 开始执行后端任务：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;环境搭建&lt;/strong&gt;：创建 &lt;code&gt;server&lt;/code&gt; 目录，生成 &lt;code&gt;package.json&lt;/code&gt;, &lt;code&gt;tsconfig.json&lt;/code&gt; 等配置文件，安装 &lt;strong&gt;Node.js&lt;/strong&gt; 和 &lt;strong&gt;Express&lt;/strong&gt; 相关依赖 (&lt;code&gt;npm install express cors dotenv @types/node @types/express @types/cors ts-node nodemon typescript&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API 开发&lt;/strong&gt;：创建 &lt;strong&gt;Express&lt;/strong&gt; 服务器入口文件 (&lt;code&gt;index.ts&lt;/code&gt;)，配置路由 (&lt;code&gt;routes/drawing.ts&lt;/code&gt;)，实现 &lt;code&gt;/api/drawing/recognize&lt;/code&gt; 接口用于接收图片数据并调用 &lt;strong&gt;OpenAI Vision API&lt;/strong&gt; 进行图像识别。&lt;/li&gt;
&lt;li&gt;创建 &lt;code&gt;.env&lt;/code&gt; 文件模板用于存放 &lt;strong&gt;OpenAI API Key&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:13-06:16) &lt;em&gt;&lt;strong&gt;6.3: AI完成所有任务&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 成功执行了所有后端开发任务，并将 &lt;code&gt;task.md&lt;/code&gt; 中所有任务的状态标记为&lt;strong&gt;已完成&lt;/strong&gt;（绿色对勾）。&lt;strong&gt;AI 的开发工作至此完成&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:16-06:27) &lt;em&gt;&lt;strong&gt;6.4: 修复后端代码小问题&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;问题&lt;/strong&gt;：在 &lt;code&gt;drawing.ts&lt;/code&gt; 文件中，AI 错误地导入了 &lt;code&gt;openai&lt;/code&gt; 的 &lt;strong&gt;npm 包&lt;/strong&gt;，但项目规则指定的是直接调用 &lt;strong&gt;OpenAI Vision API&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;作者发现了这个小错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;修改 drawing.ts 文件，优先使用 fetch 调用 openai，不要引入 openai 的包&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 理解指令，&lt;strong&gt;修改了 &lt;code&gt;drawing.ts&lt;/code&gt;&lt;/strong&gt; 中的代码，将原本导入 &lt;code&gt;openai&lt;/code&gt; 包的方式改为了使用 Node.js 内置的 &lt;strong&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/strong&gt; 直接调用 OpenAI Vision API 端点 (&lt;code&gt;https://api.openai.com/v1/chat/completions&lt;/code&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：代码被成功修正，消除了不必要的依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:25-06:27) &lt;em&gt;&lt;strong&gt;6.5: 配置环境变量&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：作者手动编辑 &lt;code&gt;.env&lt;/code&gt; 文件，填入自己的 &lt;strong&gt;OpenAI API Key&lt;/strong&gt;，并配置了 &lt;strong&gt;CORS&lt;/strong&gt; 允许的来源（前端地址 &lt;code&gt;http://localhost:5173&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:27-06:41) &lt;em&gt;&lt;strong&gt;6.6: 启动前后端服务&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：运行刚刚由 AI 开发完成的前后端代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;启动后端&lt;/strong&gt;：在 Trae 的终端中，&lt;code&gt;cd ./server&lt;/code&gt; 进入后端目录，然后执行 &lt;code&gt;npm run dev&lt;/code&gt; 启动 &lt;strong&gt;Node.js (Express)&lt;/strong&gt; 服务。后端运行在 &lt;strong&gt;&lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;启动前端&lt;/strong&gt;：新建一个终端，在项目根目录执行 &lt;code&gt;npm run dev&lt;/code&gt; 启动 &lt;strong&gt;Vite&lt;/strong&gt; 开发服务器。前端运行在 &lt;strong&gt;&lt;code&gt;http://localhost:5173&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part7-智能体-debug-前端ui问题&#34;&gt;part7: 智能体 Debug (前端UI问题)
&lt;/h1&gt;&lt;p&gt;(06:42-06:48) &lt;em&gt;&lt;strong&gt;7.1: 发现前端UI问题&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：在浏览器中打开前端页面 &lt;code&gt;http://localhost:5173&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;问题描述&lt;/strong&gt;：页面上成功显示了&lt;strong&gt;画板 (Canvas)&lt;/strong&gt;，可以作画，也有“清空画布”按钮，但是&lt;strong&gt;缺少了用于触发 AI 猜测的按钮&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:48-07:01) &lt;em&gt;&lt;strong&gt;7.2: 使用截图和多模态能力请求修复&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：利用 Trae 的&lt;strong&gt;多模态能力&lt;/strong&gt;和 &lt;strong&gt;Claude 3.5&lt;/strong&gt; 模型，通过截图让 AI 理解并修复 UI 问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;对当前缺少按钮的前端页面进行&lt;strong&gt;截图&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;回到 Trae 的聊天界面，将&lt;strong&gt;截图粘贴&lt;/strong&gt;进去。&lt;/li&gt;
&lt;li&gt;选择 &lt;strong&gt;Claude 3.5 Sonnet&lt;/strong&gt; 模型（因为它支持多模态）。&lt;/li&gt;
&lt;li&gt;调用 &lt;strong&gt;&lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体，并引用 &lt;strong&gt;&lt;code&gt;#Workspace&lt;/code&gt;&lt;/strong&gt; (整个项目代码)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;没有让 AI 猜测的按钮，帮我修复一下&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(07:00-07:12) &lt;em&gt;&lt;strong&gt;7.3: AI修复前端UI&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行过程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI (Claude 3.5) &lt;strong&gt;分析了截图&lt;/strong&gt;和&lt;strong&gt;代码&lt;/strong&gt; (&lt;code&gt;#Workspace&lt;/code&gt;)，理解了问题所在。&lt;/li&gt;
&lt;li&gt;AI 识别出需要在 &lt;code&gt;DrawingCanvas.tsx&lt;/code&gt; 组件中添加一个按钮，并为其绑定触发 AI 猜测的事件处理函数。&lt;/li&gt;
&lt;li&gt;AI &lt;strong&gt;生成了修改后的代码&lt;/strong&gt;，在画板下方添加了一个 “AI 猜测” 按钮。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户交互&lt;/strong&gt;：用户检查 AI 生成的代码修改，确认无误后点击&lt;strong&gt;接受&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：前端页面刷新后，&lt;strong&gt;“AI 猜测”按钮成功出现&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part8-智能体-debug-后端api与浏览器工具&#34;&gt;part8: 智能体 Debug (后端API与浏览器工具)
&lt;/h1&gt;&lt;p&gt;(07:02-07:09) &lt;em&gt;&lt;strong&gt;8.1: 发现后端API调用错误&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：在添加了按钮的前端页面上，画一个图形（例如字母 A），然后点击 “AI 猜测” 按钮。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;问题描述&lt;/strong&gt;：点击按钮后，页面提示 &lt;strong&gt;“抱歉，AI 猜测失败，请重试”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♋&lt;strong&gt;Debug 操作&lt;/strong&gt;：打开浏览器的&lt;strong&gt;开发者工具&lt;/strong&gt; (F12)，切换到&lt;strong&gt;控制台 (Console)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误信息&lt;/strong&gt;：控制台显示了两个关键错误：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;POST http://localhost:5174/api/guess 404 (Not Found)&lt;/code&gt;：表明前端尝试请求的 API 地址错误（端口号 5174 不对，且路径 &lt;code&gt;/api/guess&lt;/code&gt; 可能与后端不符）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AI猜测出错: Error: AI猜测请求失败&lt;/code&gt;：这是前端代码中捕获到的网络请求错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(07:07-07:16) &lt;em&gt;&lt;strong&gt;8.2: 手动Debug的局限性&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;传统方式&lt;/strong&gt;：需要&lt;strong&gt;手动复制&lt;/strong&gt;控制台的错误信息，然后&lt;strong&gt;粘贴&lt;/strong&gt;到 Trae 中，让 AI 分析并修复。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Trae 的优势&lt;/strong&gt;：通过 &lt;strong&gt;MCP (Model Context Protocol)&lt;/strong&gt; 功能，提供了&lt;strong&gt;更进阶、更自动化&lt;/strong&gt;的 Debug 方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(07:16-08:13) &lt;em&gt;&lt;strong&gt;8.3: ♏配置Browser Tools MCP Server&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：设置一个 MCP Server，让 Trae 能够&lt;strong&gt;直接读取浏览器&lt;/strong&gt;的控制台信息、网络请求等状态，实现更智能的 Debug。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键步骤&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安装浏览器插件&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在 Trae 的 &lt;strong&gt;MCP 市场&lt;/strong&gt;中搜索 &lt;code&gt;browser&lt;/code&gt;，找到 &lt;strong&gt;Browser Tools&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;点击其介绍页面中的链接，下载 &lt;strong&gt;Chrome 扩展&lt;/strong&gt; (&lt;code&gt;BrowserToolsMCP Chrome Extension&lt;/code&gt;) 的压缩包。&lt;/li&gt;
&lt;li&gt;解压压缩包。&lt;/li&gt;
&lt;li&gt;♏打开浏览器的&lt;strong&gt;扩展管理页面&lt;/strong&gt; (&lt;code&gt;edge://extensions/&lt;/code&gt; 或 &lt;code&gt;chrome://extensions/&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;启用&lt;strong&gt;开发者模式&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;将解压后的插件文件夹&lt;strong&gt;拖拽&lt;/strong&gt;到扩展管理页面进行安装。安装成功后会显示 &lt;strong&gt;BrowserTools MCP&lt;/strong&gt; 插件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置 Trae 中的 MCP Server&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在 Trae 的 MCP 市场中&lt;strong&gt;添加 Browser Tools&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;参考其介绍页面，复制 &lt;strong&gt;npx&lt;/strong&gt; 启动命令的配置 &lt;strong&gt;JSON&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修改 JSON&lt;/strong&gt;：将示例的 &lt;code&gt;example-server&lt;/code&gt; 名称改为 &lt;code&gt;browser-tools&lt;/code&gt;，将 &lt;code&gt;mcp-server-example&lt;/code&gt; 参数改为 &lt;code&gt;@agentdeskai/browser-tools-mcp@latest&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;点击&lt;strong&gt;确认&lt;/strong&gt;保存配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;启动 MCP Server 进程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;打开一个&lt;strong&gt;新的命令行窗口&lt;/strong&gt;（不是 Trae 内置终端）。&lt;/li&gt;
&lt;li&gt;运行 Browser Tools 介绍页面提供的第三步命令：&lt;code&gt;npx @agentdeskai/browser-tools-server@latest&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保持此命令行窗口运行&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：成功配置并启动了 Browser Tools MCP Server，打通了 Trae 与浏览器之间的通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:13-08:19) &lt;em&gt;&lt;strong&gt;8.4: 创建浏览器专家智能体&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：创建一个专门利用 Browser Tools MCP 进行 Debug 的智能体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;点击“智能体” -&amp;gt; “+ 创建智能体”。&lt;/li&gt;
&lt;li&gt;命名为 &lt;strong&gt;“浏览器专家”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在“工具 - MCP”中&lt;strong&gt;只勾选 &lt;code&gt;browser-tools&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;点击“创建”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:19-08:42) &lt;em&gt;&lt;strong&gt;8.5: 使用浏览器专家Debug&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;准备工作&lt;/strong&gt;：&lt;strong&gt;重新打开&lt;/strong&gt;要 Debug 的浏览器页面 (&lt;code&gt;localhost:5174&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接确认&lt;/strong&gt;：打开开发者工具 (F12)，页面顶部会出现提示条：&lt;strong&gt;&amp;ldquo;BrowserTools MCP&amp;rdquo; 已开始调试此浏览器&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;触发错误&lt;/strong&gt;：在页面上画图并点击 “AI 猜测” 按钮，再次触发之前的 404 错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;回到 Trae。&lt;/li&gt;
&lt;li&gt;调用新创建的 &lt;strong&gt;&lt;code&gt;@浏览器专家&lt;/code&gt;&lt;/strong&gt; 智能体。&lt;/li&gt;
&lt;li&gt;♏&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;浏览器控制台有哪些报错&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:35-08:42) &lt;em&gt;&lt;strong&gt;8.6: AI分析错误并定位问题&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行过程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;“浏览器专家”&lt;/strong&gt; 智能体调用了其绑定的 &lt;code&gt;browser-tools&lt;/code&gt; MCP 工具中的 &lt;code&gt;getConsoleErrors&lt;/code&gt; 函数。&lt;/li&gt;
&lt;li&gt;MCP Server 从浏览器&lt;strong&gt;获取了控制台的错误日志&lt;/strong&gt;，并返回给 Trae 中的 AI。&lt;/li&gt;
&lt;li&gt;AI &lt;strong&gt;分析了返回的错误信息&lt;/strong&gt;（包含详细的错误类型、消息、堆栈等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 成功&lt;strong&gt;获取并理解了&lt;/strong&gt;浏览器端的报错信息，准备进行下一步分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:41-08:55) &lt;em&gt;&lt;strong&gt;8.7: 指示AI修复API路径问题&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 AI 结合浏览器报错信息和项目代码，定位并修复 API 路径不匹配的问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI 分析&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI 检查了浏览器报错信息，确认是 &lt;code&gt;/api/guess&lt;/code&gt; 接口返回 404。&lt;/li&gt;
&lt;li&gt;♏AI 检查了后端代码 (&lt;code&gt;server/src/routes/drawing.ts&lt;/code&gt; 和 &lt;code&gt;server/src/index.ts&lt;/code&gt;)，发现后端实际提供的接口路径是 &lt;code&gt;/api/drawing/recognize&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 检查了前端代码 (&lt;code&gt;src/App.tsx&lt;/code&gt; 和 &lt;code&gt;src/components/Canvas/index.tsx&lt;/code&gt;)，确认前端调用的是 &lt;code&gt;/api/guess&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结论&lt;/strong&gt;：AI 准确地指出了&lt;strong&gt;前后端 API 调用的路径不匹配&lt;/strong&gt;是导致 404 错误的原因。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;调用 &lt;strong&gt;&lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体（需要它来修改代码）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;（结合浏览器专家的分析结果）：&lt;code&gt;因为前端API调用的是 /api/guess，但服务器配置的路由是 /api/drawing/recognize。帮我修复问题&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI 修复&lt;/strong&gt;：AI 修改了前端代码 (&lt;code&gt;src/App.tsx&lt;/code&gt; 或相关调用处)，将 API 请求路径从 &lt;code&gt;/api/guess&lt;/code&gt; &lt;strong&gt;更正为 &lt;code&gt;/api/drawing/recognize&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part9-最终测试与效果展示&#34;&gt;part9: 最终测试与效果展示
&lt;/h1&gt;&lt;p&gt;(09:08-09:10) &lt;em&gt;&lt;strong&gt;9.1: 再次测试 - 依然报错&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：修复 API 路径后，再次在前端页面画图并点击 “AI 猜测”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：&lt;strong&gt;仍然报错&lt;/strong&gt;，控制台可能显示新的错误（视频中未明确显示具体新错误，但暗示问题未完全解决）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:10-09:13) &lt;em&gt;&lt;strong&gt;9.2: 结合控制台报错再次请求修复&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 AI 结合最新的控制台错误信息，进行进一步的 Debug 和修复。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;调用 &lt;strong&gt;&lt;code&gt;@浏览器专家&lt;/code&gt;&lt;/strong&gt; 智能体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;结合控制台报错修复问题&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI 分析&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;浏览器专家再次通过 &lt;code&gt;browser-tools&lt;/code&gt; 获取控制台错误。&lt;/li&gt;
&lt;li&gt;AI 分析后发现，这次的问题是前端在调用 &lt;code&gt;fetch&lt;/code&gt; 时，&lt;strong&gt;没有指定后端的端口号&lt;/strong&gt;，导致请求仍然发向了前端的 5173 端口，而非后端的 3000 端口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:13-09:16) &lt;em&gt;&lt;strong&gt;9.3: AI最终修复&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI 识别到需要修改前端发送请求时的 URL。&lt;/li&gt;
&lt;li&gt;♏AI 修改了 &lt;code&gt;src/components/Canvas/guessDrawing.tsx&lt;/code&gt; (或其他实际发送请求的文件) 中的 &lt;code&gt;fetch&lt;/code&gt; 调用，将 URL 明确指定为后端的地址和端口：&lt;code&gt;http://localhost:3000/api/drawing/recognize&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户交互&lt;/strong&gt;：用户接受 AI 的代码修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:16-09:20) &lt;em&gt;&lt;strong&gt;9.4: 成功测试 - 画A&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：进行最终测试，在画板上画一个字母 &lt;strong&gt;&amp;ldquo;A&amp;rdquo;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：点击 “AI 猜测” 后，&lt;strong&gt;请求成功&lt;/strong&gt;，AI 返回结果：“&lt;strong&gt;这张图片是一个手绘的字母 &amp;lsquo;A&amp;rsquo;，也就是英文字母表中的第一个字母。&lt;/strong&gt;”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:20-09:25) &lt;em&gt;&lt;strong&gt;9.5: 成功测试 - 画蜜蜂 (AI误认)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：画一个&lt;strong&gt;蝴蝶&lt;/strong&gt;的简笔画。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 返回结果：“&lt;strong&gt;这是一张手绘的蜜蜂简笔画。你可以看到它有四只翅膀、分节的身体，还有两根触角。&lt;/strong&gt;”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者评论&lt;/strong&gt;：AI 把蝴蝶认成了&lt;strong&gt;蜜蜂&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:25-09:31) &lt;em&gt;&lt;strong&gt;9.6: 成功测试 - 画房子&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：画一个带烟囱的&lt;strong&gt;房子&lt;/strong&gt;的简笔画。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 返回结果：“&lt;strong&gt;这是一幅简笔画，画的是一间房子。可以看到有屋顶、门和窗户，还有一个像是烟囱的结构。整体是一个简单的立体房屋造型。&lt;/strong&gt;”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:31-09:38) &lt;em&gt;&lt;strong&gt;9.7: 成功测试 - 画大象&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：画一个&lt;strong&gt;大象&lt;/strong&gt;的简笔画。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 返回结果：“&lt;strong&gt;这是一幅简笔画，看起来像是一只大象。可以看到大象的长鼻子、耳朵、四条腿和尾巴。画面风格简洁，但特征比较明显。&lt;/strong&gt;”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者总结&lt;/strong&gt;：整个过程&lt;strong&gt;还是挺有意思的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>在线AI工具合集（没钱做推广的冷门AI好用吗？AI工具大合集）</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E5%9C%A8%E7%BA%BFai%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86%E6%B2%A1%E9%92%B1%E5%81%9A%E6%8E%A8%E5%B9%BF%E7%9A%84%E5%86%B7%E9%97%A8ai%E5%A5%BD%E7%94%A8%E5%90%97ai%E5%B7%A5%E5%85%B7%E5%A4%A7%E5%90%88%E9%9B%86/</link>
        <pubDate>Fri, 11 Apr 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E5%9C%A8%E7%BA%BFai%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86%E6%B2%A1%E9%92%B1%E5%81%9A%E6%8E%A8%E5%B9%BF%E7%9A%84%E5%86%B7%E9%97%A8ai%E5%A5%BD%E7%94%A8%E5%90%97ai%E5%B7%A5%E5%85%B7%E5%A4%A7%E5%90%88%E9%9B%86/</guid>
        <description>&lt;p&gt;༼没钱做推广的冷门AI好用吗？AI工具大合集！【Git源宝】 ༽&lt;/p&gt;
&lt;h1 id=&#34;part1-ai工具合集推荐导览&#34;&gt;part1: AI工具合集推荐导览
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(00:00-00:07)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;1.1: 思维导图介绍&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视频开头展示了一个&lt;strong&gt;思维导图&lt;/strong&gt;，介绍其囊括了许多&lt;strong&gt;没有足够预算做推广&lt;/strong&gt;但&lt;strong&gt;很好用&lt;/strong&gt;却&lt;strong&gt;少有人发掘&lt;/strong&gt;的&lt;strong&gt;小众AI&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;(00:07-00:15)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;1.2: 整理与分类&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者表示&lt;strong&gt;花费了一个多月&lt;/strong&gt;整理这些好玩的小众AI。&lt;/li&gt;
&lt;li&gt;将AI工具按照&lt;strong&gt;学习类&lt;/strong&gt;、&lt;strong&gt;职场类&lt;/strong&gt;、&lt;strong&gt;自媒体类&lt;/strong&gt;三个大类进行了分类，并制作成思维导图供大家查阅使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;(00:15-00:25)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;1.3: 思维导图价值与声明&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展示了思维导图的部分内容，包含&lt;strong&gt;学生&lt;/strong&gt;、&lt;strong&gt;新媒体&lt;/strong&gt;、&lt;strong&gt;职场&lt;/strong&gt;等分类下的具体AI工具名称。&lt;/li&gt;
&lt;li&gt;这个导图旨在帮助用户在&lt;strong&gt;特定领域&lt;/strong&gt;找到&lt;strong&gt;合适的AI&lt;/strong&gt;，避免&lt;strong&gt;盲目寻找（一头雾水）&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;作者声明本期视频&lt;strong&gt;全程无广告&lt;/strong&gt;，观众可以放心&lt;strong&gt;收藏&lt;/strong&gt;和&lt;strong&gt;点赞&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part2-jpghd---人工智能老照片无损修复&#34;&gt;part2: jpgHD - 人工智能老照片无损修复
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(00:25-00:35)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;2.1: ♏jpgHD 功能介绍与演示&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;jpgHD&lt;/strong&gt;，一个&lt;strong&gt;修复AI&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;适用场景：当制作视频搜集的&lt;strong&gt;素材比较模糊&lt;/strong&gt;时。&lt;/li&gt;
&lt;li&gt;核心功能：可以&lt;strong&gt;免费修复&lt;/strong&gt;和&lt;strong&gt;画质增强&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;演示：将一张模糊的初音未来毛绒玩具图片修复并增强为清晰的二次元画风图片。&lt;/li&gt;
&lt;li&gt;评价：对于修复&lt;strong&gt;电子包浆&lt;/strong&gt;的照片&lt;strong&gt;非常好用&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;(00:35-00:43)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;2.2: jpgHD 更多功能展示&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展示了 &lt;strong&gt;jpgHD&lt;/strong&gt; 的效果演示界面。&lt;/li&gt;
&lt;li&gt;除了&lt;strong&gt;超分辨率&lt;/strong&gt;外，还支持：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;给黑白照片上色&lt;/strong&gt;（示例：林肯照片）。&lt;/li&gt;
&lt;li&gt;让&lt;strong&gt;模糊的二次元图片变得更加清晰&lt;/strong&gt;（示例：戴帽子的奥黛丽·赫本与马、另一个二次元女孩）。&lt;/li&gt;
&lt;li&gt;修复破损照片、老照片（示例：女孩和男孩的老照片对比）。&lt;/li&gt;
&lt;li&gt;魔法动态照片。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part3-elevenlabs---ai配音与声音克隆&#34;&gt;part3: ElevenLabs - AI配音与声音克隆
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(00:43-00:54)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;3.1: ♏ElevenLabs 功能与应用场景&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;ElevenLabs&lt;/strong&gt;，一个&lt;strong&gt;配音AI&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ul&gt;
&lt;li&gt;不方便给视频录音时。&lt;/li&gt;
&lt;li&gt;想拥有&lt;strong&gt;女孩的声音&lt;/strong&gt;时。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;核心功能：
&lt;ul&gt;
&lt;li&gt;♈&lt;strong&gt;克隆甜美的声音 (Voice Cloning)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♈将&lt;strong&gt;文本直接转换成语音 (Text to Speech)&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;界面展示：显示了 &lt;strong&gt;Text to Speech&lt;/strong&gt; 界面，左侧有 &lt;strong&gt;Voices (声音)&lt;/strong&gt;、&lt;strong&gt;Playground (游乐场)&lt;/strong&gt;、&lt;strong&gt;Voice Lab (声音实验室)&lt;/strong&gt;、&lt;strong&gt;Voice Changer (变声器)&lt;/strong&gt; 等选项。&lt;/li&gt;
&lt;li&gt;评价：效果比&lt;strong&gt;剪辑软件自带的要好很多&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part4-suno---ai-作曲&#34;&gt;part4: Suno - AI 作曲
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(00:54-01:07)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;4.1: Suno 功能与效果试听&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;Suno&lt;/strong&gt;，一个&lt;strong&gt;作曲AI&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;适用场景：当找不到合适的&lt;strong&gt;视频BGM&lt;/strong&gt;时，可以用它来制作。&lt;/li&gt;
&lt;li&gt;界面展示：显示了 &lt;strong&gt;Suno&lt;/strong&gt; 的网站界面，包含 Trending (趋势)、Hot in April (四月热门) 等板块。&lt;/li&gt;
&lt;li&gt;效果试听：播放了一段由 Suno 生成的英文歌曲片段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;(01:07-01:24)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;4.2: Suno 使用方法与免费额度&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强调最重要的优势：&lt;strong&gt;每天都有几次免费的使用&lt;/strong&gt;额度。&lt;/li&gt;
&lt;li&gt;使用方法：
&lt;ol&gt;
&lt;li&gt;在 &lt;strong&gt;Lyrics (歌词)&lt;/strong&gt; 区域&lt;strong&gt;输入好歌词&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;选择 &lt;strong&gt;Styles (风格)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;点击生成 (Create) 即可&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;演示：输入了中文古诗词作为歌词，选择了 hiphop 风格，并播放了生成的中文说唱片段。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part5-viggle-ai---视频人物动作替换&#34;&gt;part5: Viggle AI - 视频人物动作替换
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(01:24-01:37)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;5.1:♏ Viggle AI 功能与演示&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;Viggle AI&lt;/strong&gt;，一个可以用来&lt;strong&gt;整活&lt;/strong&gt; (制作创意/搞笑内容) 的AI。&lt;/li&gt;
&lt;li&gt;演示：展示了一个由两个跳舞的人组成的&lt;strong&gt;抽象视频&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;核心功能：可以&lt;strong&gt;用它免费来制作&lt;/strong&gt;这类视频。&lt;/li&gt;
&lt;li&gt;界面展示：显示了 &lt;strong&gt;Viggle AI&lt;/strong&gt; 的操作界面。&lt;/li&gt;
&lt;li&gt;操作流程（多人场景）：
&lt;ol&gt;
&lt;li&gt;选择 &lt;strong&gt;Multi&lt;/strong&gt; 功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;左上角上传&lt;/strong&gt;动作&lt;strong&gt;视频 (Motion)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;右上角上传&lt;/strong&gt;你的&lt;strong&gt;照片 (Character)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;点击 &lt;strong&gt;Generate&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;评价：&lt;strong&gt;上手简单，值得推荐&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part6-白日梦---ai短剧生成&#34;&gt;part6: 白日梦 - AI短剧生成
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(01:37-01:51)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;6.1: 白日梦 功能与制作流程&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;白日梦 (Bairimeng)&lt;/strong&gt;，一个可以用来做 &lt;strong&gt;AI短视频&lt;/strong&gt; 的AI。&lt;/li&gt;
&lt;li&gt;制作流程：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;写故事&lt;/strong&gt;：首先可以&lt;strong&gt;根据你的设定写一个故事&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选形象&lt;/strong&gt;：然后&lt;strong&gt;确定好主角&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成图片&lt;/strong&gt;：根据分镜&lt;strong&gt;生成每一个场景的图片&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;视频编辑&lt;/strong&gt;：AI 会将图片组合成&lt;strong&gt;一部抽象短片&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;附加功能：可以&lt;strong&gt;配上旁白和对话&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;评价：&lt;strong&gt;非常方便&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;界面展示：显示了其包含“写故事”、“选形象”、“生成图片”、“视频编辑”四个步骤的界面，并展示了生成的图片序列和旁白输入框。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;(01:51-02:00)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;6.2: 白日梦 生成效果展示&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展示了一段由白日梦生成的&lt;strong&gt;动画短片&lt;/strong&gt;效果。&lt;/li&gt;
&lt;li&gt;内容为宫崎骏风格的动画，一个女孩和一个猪形态的角色在对话。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part7-whisper---ai字幕识别&#34;&gt;part7: Whisper - AI字幕识别
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(02:00-02:12)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;7.1: Whisper 功能与应用&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;Whisper&lt;/strong&gt;，一个&lt;strong&gt;识别字幕的AI (自动语音识别 ASR 系统)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;主要用途：给&lt;strong&gt;视频配上字幕&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对比：平时使用&lt;strong&gt;剪映&lt;/strong&gt;，但其自动识别字幕功能&lt;strong&gt;需要会员&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;推荐理由：Whisper 是一个&lt;strong&gt;免费 (白嫖)&lt;/strong&gt; 的选择。&lt;/li&gt;
&lt;li&gt;开源信息：&lt;strong&gt;已经在GitHub开源了&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;评价：&lt;strong&gt;十分推荐&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;界面展示：显示了 Whisper 的介绍页面和 GitHub 仓库页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part8-朱雀大模型---ai内容检测&#34;&gt;part8: 朱雀大模型 - AI内容检测
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(02:12-02:28)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;8.1: 朱雀大模型 功能与使用&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;朱雀大模型&lt;/strong&gt; 的在线 &lt;strong&gt;AI检测器&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;功能：可以&lt;strong&gt;检测&lt;/strong&gt;文本中的 &lt;strong&gt;AI率 (疑似AI生成内容占比)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;作用：帮助&lt;strong&gt;识别文章的AI生成率&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ul&gt;
&lt;li&gt;当&lt;strong&gt;拿不准自己写的文章&lt;/strong&gt; AI 味重不重时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;老师&lt;/strong&gt;可以用它来&lt;strong&gt;检测学生的作业是不是AI生成的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;界面演示：展示了粘贴文本、点击检测后，显示 &lt;strong&gt;100% 疑似AI&lt;/strong&gt; 的结果。&lt;/li&gt;
&lt;li&gt;语言支持：&lt;strong&gt;中文英文都可以&lt;/strong&gt;检测。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part9-ai-short---提示词ai&#34;&gt;part9: AI Short - 提示词AI
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(02:28-02:43)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;9.1: AI Short 功能与特点&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;AI Short&lt;/strong&gt;，一个&lt;strong&gt;提示词AI&lt;/strong&gt; (AI Short 效率革命)。&lt;/li&gt;
&lt;li&gt;特点：其提供的&lt;strong&gt;提示词非常离谱&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;示例1 (学术)：可以通过提示词将&lt;strong&gt;文章润色成Nature风格&lt;/strong&gt;，方便成为&lt;strong&gt;学术大牛&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;示例2 (娱乐)：甚至提供一些&lt;strong&gt;魅魔扮演&lt;/strong&gt;的提示词。&lt;/li&gt;
&lt;li&gt;适用人群：&lt;strong&gt;很适合学生党在学习之余玩乐使用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;界面展示：显示了网站 (&lt;code&gt;aishort.top&lt;/code&gt;) 及其分类筛选和提示词列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part10-沉浸式翻译---网页翻译ai插件&#34;&gt;part10: 沉浸式翻译 - 网页翻译AI插件
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(02:43-03:03)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;10.1: 网页翻译痛点与沉浸式翻译介绍&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;网页翻译AI&lt;/strong&gt;，特指&lt;strong&gt;沉浸式翻译 (Immersive Translate)&lt;/strong&gt; 这个&lt;strong&gt;小插件&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;适用场景：看一些&lt;strong&gt;英文论坛&lt;/strong&gt;来学习英语。&lt;/li&gt;
&lt;li&gt;痛点：&lt;strong&gt;浏览器自带的机翻&lt;/strong&gt;不仅&lt;strong&gt;经常翻译错误&lt;/strong&gt;，还会&lt;strong&gt;覆盖掉原来的原始英文&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;推荐：&lt;strong&gt;沉浸式翻译&lt;/strong&gt;插件。&lt;/li&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;小巧性能好&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;能形成&lt;strong&gt;对照双语翻译&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;评价：&lt;strong&gt;非常方便&lt;/strong&gt;我们去看一些英文网站。&lt;/li&gt;
&lt;li&gt;界面演示：展示了在 Reddit 和 Wikipedia 页面上使用沉浸式翻译实现双语对照的效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part11-trae---免费ai-ide&#34;&gt;part11: Trae - 免费AI IDE
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(03:03-03:22)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;11.1: Trae 功能与优势&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;Trae&lt;/strong&gt;，一个&lt;strong&gt;免费的AI IDE&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对比：相比 &lt;strong&gt;VS Code 里的 AI 插件&lt;/strong&gt;，它的&lt;strong&gt;体验会更加的整体一些&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;适用场景：如果专业里会涉及到&lt;strong&gt;编程&lt;/strong&gt;，在遇到很难的题时，可以用它来&lt;strong&gt;辅助写代码&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;集成模型：里面也&lt;strong&gt;接入了 Deepseek 和 豆包 的模型&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;扩展性：也能&lt;strong&gt;通过 API 添加其他的模型&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;评价：&lt;strong&gt;十分建议收藏&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;界面演示：展示了 Trae 的安装配置过程（导入 VS Code 配置、安装命令行）和 IDE 主界面、模型设置（可添加 API）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part12-稿定ai---设计类ai&#34;&gt;part12: 稿定AI - 设计类AI
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(03:22-03:37)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;12.1: 稿定AI 功能与免费使用注意&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;稿定AI&lt;/strong&gt;，一个&lt;strong&gt;设计类AI&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;功能：可以制作 &lt;strong&gt;LOGO&lt;/strong&gt;、&lt;strong&gt;科普攻略&lt;/strong&gt;、&lt;strong&gt;商品图&lt;/strong&gt;、&lt;strong&gt;海报&lt;/strong&gt;等。&lt;/li&gt;
&lt;li&gt;特定应用：制作在&lt;strong&gt;某红薯 (小红书)&lt;/strong&gt; 上常见的&lt;strong&gt;显眼的大字封面&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;免费使用注意：生成结果中只有&lt;strong&gt;不带皇冠&lt;/strong&gt;的模板才可以&lt;strong&gt;免费白嫖&lt;/strong&gt;，需要避开带皇冠的。&lt;/li&gt;
&lt;li&gt;界面演示：展示了稿定AI的模板库，特别是大字封面模板，并指出了皇冠标识。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part13-islide---ai-ppt制作&#34;&gt;part13: iSlide - AI PPT制作
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(03:37-03:47)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;13.1: iSlide 功能与应用&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;iSlide&lt;/strong&gt;，一个能&lt;strong&gt;白嫖制作PPT的AI&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;集成方式：作为 PowerPoint 的插件 &lt;strong&gt;(iSlide AI 助手)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;适用场景：当&lt;strong&gt;工作中需要制作PPT&lt;/strong&gt;的时候。&lt;/li&gt;
&lt;li&gt;特点：里面&lt;strong&gt;内置了很多模板&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;评价：&lt;strong&gt;还是挺方便应急的&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;界面演示：展示了在 PowerPoint 中通过 iSlide AI 助手输入主题，AI 自动生成 PPT 大纲和内容的过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part14-通义法睿---法律ai助手&#34;&gt;part14: 通义法睿 - 法律AI助手
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(03:47-03:59)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;14.1: 通义法睿 功能与应用场景&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;通义法睿&lt;/strong&gt;，一个&lt;strong&gt;法律AI&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;适用场景：当在&lt;strong&gt;职场中受到法律纠纷&lt;/strong&gt;，比如&lt;strong&gt;恶意裁员&lt;/strong&gt;等情况。&lt;/li&gt;
&lt;li&gt;作用：可以使用这个 &lt;strong&gt;AI法律助手&lt;/strong&gt; 来&lt;strong&gt;查询相关的法条&lt;/strong&gt;，&lt;strong&gt;保护自己的权益&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;界面演示：展示了通义法睿的问答界面，并输入了“面对被公司解雇的情况，我有哪些法律权利和赔偿可以争取？”的问题，AI 正在生成回答。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part15-总结与后续&#34;&gt;part15: 总结与后续
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(03:59-04:16)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;15.1: 视频总结与资源获取&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以上就是本期视频介绍的所有&lt;strong&gt;小众AI&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;为了方便大家访问，视频中提到的东西都放在了&lt;strong&gt;老地方&lt;/strong&gt;，大家可以&lt;strong&gt;自行免费获取&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;呼吁观众&lt;strong&gt;点赞、收藏、加关注&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;作者自我介绍：&lt;strong&gt;源宝，一台AI和黑科技的挖掘机&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;结束语：&lt;strong&gt;我们下期见&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>视频懒得截图了</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E8%A7%86%E9%A2%91%E6%87%92%E5%BE%97%E6%88%AA%E5%9B%BE%E4%BA%86/</link>
        <pubDate>Fri, 11 Apr 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E8%A7%86%E9%A2%91%E6%87%92%E5%BE%97%E6%88%AA%E5%9B%BE%E4%BA%86/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=A52BrmvZvtU&amp;amp;t=141s&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/watch?v=A52BrmvZvtU&amp;t=141s&lt;/a&gt;：PotPlayer+DeepSeek自动识别翻译字幕&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=4906t5zygAE&amp;amp;t=161s&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/watch?v=4906t5zygAE&amp;t=161s&lt;/a&gt;：sub-check linux版，本地我已有sub_check_win_GUI，而该linux版的意义是部署在外网的其它设备，而且是docker或docker compose方式部署程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《这里也提供了一个比较值得参考的GUI转WebUI的思路，就是单纯地将GUI界面转WebUI界面而已，我相信AI能做得到的》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>编程能力 gemini2.5pro vs  qwen3，千问3强，果然越后面的模型越强 </title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B-gemini2.5pro-vs-qwen3%E5%8D%83%E9%97%AE3%E5%BC%BA%E6%9E%9C%E7%84%B6%E8%B6%8A%E5%90%8E%E9%9D%A2%E7%9A%84%E6%A8%A1%E5%9E%8B%E8%B6%8A%E5%BC%BA/</link>
        <pubDate>Sat, 29 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B-gemini2.5pro-vs-qwen3%E5%8D%83%E9%97%AE3%E5%BC%BA%E6%9E%9C%E7%84%B6%E8%B6%8A%E5%90%8E%E9%9D%A2%E7%9A%84%E6%A8%A1%E5%9E%8B%E8%B6%8A%E5%BC%BA/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;《《《编程能力 qwen3比gemini2.5pro强的》
&lt;ul&gt;
&lt;li&gt;测试题目：多平台的baseURL如何解决&lt;/li&gt;
&lt;li&gt;gemini2.5pro能用的方案是不同平台独立部署&lt;/li&gt;
&lt;li&gt;qwen3比gemini2.5pro给出了更多的方案，比如main仓库的aciton只管推送，由dev仓库的action独立部署等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>编程能力对比gemini2.5pro vsqwen2.5max和Claude-3.7-Sonnet </title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B%E5%AF%B9%E6%AF%94gemini2.5pro-vsqwen2.5max%E5%92%8Cclaude-3.7-sonnet/</link>
        <pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B%E5%AF%B9%E6%AF%94gemini2.5pro-vsqwen2.5max%E5%92%8Cclaude-3.7-sonnet/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;《《《编程能力 gemini2.5pro &amp;gt; qwen2.5max vs Claude-3.7-Sonnet》&lt;/li&gt;
&lt;li&gt;【测试题目：想同时在GitHub Pages和Cloudflare Pages上部署Hugo博客，因此动态设置 baseURL】
&lt;ul&gt;
&lt;li&gt;《《能行的方案：分离构建，各自为政；既然问题根源在于“一次构建，两个不同 baseURL 的目标”，最清晰的解决方案就是让两个平台各自独立构建；简单来说就是github page和cloudflare page单独分别用main仓库源码部署》
&lt;ul&gt;
&lt;li&gt;《该方案可行的原因在于【cloudflare page真的有执行hugo源码的能力   cloudflare page能独立构建hugo项目得到hugo静态资源】，因此两个平台各自独立构建是成立的，让cloudflare page独立构建hugo项目得到hugo静态资源即可，然后github page也独立用action构建hugo项目得到hugo静态资源》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;lt;用该编程题一测就知道模型编程能力的优劣&amp;gt;
&lt;ul&gt;
&lt;li&gt;&amp;laquo;&amp;lt;【除了gemini2.5pro以外 ，其它模型都认为应该创建dev仓库的action代码 而且这个action还在run hugo -D】，这种说法是错误的，dev仓库都是从main仓库转换来的静态资源，因此dev仓库哪里来的源码让你执行hugo命令啊，能说出在dev仓库的action程序中执行run hugo -D 的全都是代码分析能力不行的，我把action源码给到这些模型，这些模型早就该分析出dev仓库都是静态资源，不可能在dev仓库执行aciton程序了&amp;gt;&lt;/li&gt;
&lt;li&gt;《《《另外有一个重要的认知就是【配置文件的参数的参数值仅在项目构建过程正被读取】，这意味着项目构建好后不会调用参数，比如 配置文件的baseURL必须在项目构建过程中把变量设置好，项目构建完成后再设置变量就没用了》&lt;/li&gt;
&lt;li&gt;《编程能力和推理能力一般的模型只会给你dev仓库的action代码，明明dev仓库的任何action的没意义》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;《《《测试结论：gemini2.5pro是唯一能成功解决我问题的模型，因此gemini2.5pro成为我能免费用到的最强模型，不但可以帮助我用视频学习，还有免费使用的平台Trae或无限邮箱cursor，编程能力还是免费用到中的最强》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;《♒《逻辑推理是gemini2.5pro比claude强，gemini2.5pro逻辑推理能力很强 文件索引能力在有明确提示词要求的情况下也非常强，所以单纯的编程的使用一定是gemini2.5pro&amp;gt;claude》
&lt;ul&gt;
&lt;li&gt;《♒《《因此gemini2.5pro适合开发 前后端 代码，而claude适合开发样式（UI）；♒claude用来开发UI的效果实在太好，本来我要求加个高光，claude还帮我加了个动画过渡效果》&lt;/li&gt;
&lt;li&gt;《图片识别能力也是gemini2.5pro强，如果有图片想让AI按图片要求来，也是用gemini2.5pro；claude我把分格图片给它看，它居然看成了是卡片；♒而gemini2.5pro是真的能照着图片来写代码》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>全流程项目构建到部署_穷鬼套餐版</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E5%85%A8%E6%B5%81%E7%A8%8B%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%88%B0%E9%83%A8%E7%BD%B2_%E7%A9%B7%E9%AC%BC%E5%A5%97%E9%A4%90%E7%89%88/</link>
        <pubDate>Tue, 11 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E5%85%A8%E6%B5%81%E7%A8%8B%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%88%B0%E9%83%A8%E7%BD%B2_%E7%A9%B7%E9%AC%BC%E5%A5%97%E9%A4%90%E7%89%88/</guid>
        <description>&lt;p&gt;༼全流程项目构建到部署_穷鬼套餐版 ༽
༺https://aistudio.google.com/prompts/111ysUKgf9_PR3y4WpkPTJiuEsCHn5DcG ༻&lt;/p&gt;
&lt;h1 id=&#34;part1-独立开发者穷鬼套餐介绍&#34;&gt;part1: 独立开发者穷鬼套餐介绍
&lt;/h1&gt;&lt;p&gt;(0:00-0:06) &lt;em&gt;&lt;strong&gt;1.1: 论坛热门话题：独立开发者穷鬼套餐&lt;/strong&gt;&lt;/em&gt;
视频开头提到，在&lt;strong&gt;技术论坛&lt;/strong&gt;中经常看到一个有趣的话题，即**&amp;ldquo;独立开发者省钱之穷鬼套餐&amp;rdquo;**。&lt;/p&gt;
&lt;p&gt;(0:06-0:13) &lt;em&gt;&lt;strong&gt;1.2: 穷鬼套餐覆盖范围&lt;/strong&gt;&lt;/em&gt;
这些&lt;strong&gt;免费工具&lt;/strong&gt;涵盖了&lt;strong&gt;开发&lt;/strong&gt;、&lt;strong&gt;代码托管&lt;/strong&gt;、&lt;strong&gt;前后端部署&lt;/strong&gt;、&lt;strong&gt;数据库&lt;/strong&gt;以及&lt;strong&gt;用户行为分析&lt;/strong&gt;等一系列功能。&lt;/p&gt;
&lt;p&gt;(0:13-0:17) &lt;em&gt;&lt;strong&gt;1.3: 适用人群&lt;/strong&gt;&lt;/em&gt;
这种套餐&lt;strong&gt;尤其适合学生党&lt;/strong&gt;、&lt;strong&gt;独立开发者&lt;/strong&gt;以及&lt;strong&gt;初创公司&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(0:17-0:24) &lt;em&gt;&lt;strong&gt;1.4: 零成本启动与迭代&lt;/strong&gt;&lt;/em&gt;
开发者可以利用这些&lt;strong&gt;免费工具&lt;/strong&gt;，&lt;strong&gt;零成本&lt;/strong&gt;做出&lt;strong&gt;产品&lt;/strong&gt;并&lt;strong&gt;发布上线&lt;/strong&gt;，等到开始&lt;strong&gt;盈利&lt;/strong&gt;以后再&lt;strong&gt;慢慢迭代扩容&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(0:24-0:34) &lt;em&gt;&lt;strong&gt;1.5: 本期视频目标&lt;/strong&gt;&lt;/em&gt;
本期视频准备用一个&lt;strong&gt;小项目&lt;/strong&gt;（贪吃蛇游戏）把这些&lt;strong&gt;免费的工具&lt;/strong&gt;全部&lt;strong&gt;串联起来&lt;/strong&gt;，展示如何&lt;strong&gt;不花一分钱&lt;/strong&gt;就能&lt;strong&gt;上线一个可以赚钱的业务应用&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part2-技术选型&#34;&gt;part2: 技术选型
&lt;/h1&gt;&lt;p&gt;(0:34-0:40) &lt;em&gt;&lt;strong&gt;2.1: 后端部署成本最低方案：Node.js&lt;/strong&gt;&lt;/em&gt;
作者认为，对于&lt;strong&gt;后端&lt;/strong&gt;，&lt;strong&gt;部署成本最低&lt;/strong&gt;的方案是 &lt;strong&gt;Node.js&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(0:40-0:51) &lt;em&gt;&lt;strong&gt;2.2: Node.js 优势：Serverless Function&lt;/strong&gt;&lt;/em&gt;
原因是 ♋&lt;strong&gt;Node.js&lt;/strong&gt; 可以很轻松地改造成 &lt;strong&gt;Serverless Function&lt;/strong&gt;（&lt;strong&gt;无服务器函数&lt;/strong&gt;）。现在很多平台提供&lt;strong&gt;免费的云函数部署服务&lt;/strong&gt;，♐例如 &lt;strong&gt;Cloudflare Worker&lt;/strong&gt;、&lt;strong&gt;Vercel&lt;/strong&gt; 和 &lt;strong&gt;Netlify&lt;/strong&gt; 等。&lt;/p&gt;
&lt;p&gt;(0:51-0:56) &lt;em&gt;&lt;strong&gt;2.3: 前端选型：影响不大&lt;/strong&gt;&lt;/em&gt;
对于&lt;strong&gt;前端&lt;/strong&gt;选型，作者认为其对于&lt;strong&gt;部署成本几乎没有影响&lt;/strong&gt;，选择自己喜欢的就好。&lt;/p&gt;
&lt;p&gt;(0:56-1:04) &lt;em&gt;&lt;strong&gt;2.4: 前端推荐：React 与 React Native&lt;/strong&gt;&lt;/em&gt;
推荐使用 &lt;strong&gt;React&lt;/strong&gt;，因为&lt;strong&gt;后续&lt;/strong&gt;还可以使用 &lt;strong&gt;React Native&lt;/strong&gt; 改造成&lt;strong&gt;跨端的手机应用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(1:04-1:10) &lt;em&gt;&lt;strong&gt;2.5: ♈框架选择：Next.js&lt;/strong&gt;&lt;/em&gt;
♋结合&lt;strong&gt;后端 Node.js&lt;/strong&gt; 和&lt;strong&gt;前端 React&lt;/strong&gt;，很自然会想到 &lt;strong&gt;Next.js&lt;/strong&gt;，这是一个在&lt;strong&gt;海外十分流行&lt;/strong&gt;的&lt;strong&gt;开发框架&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(1:10-1:18) &lt;em&gt;&lt;strong&gt;2.6: Next.js 优势：SEO 友好&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;Next.js&lt;/strong&gt; 具有 &lt;strong&gt;SEO 友好&lt;/strong&gt;的特点，使得网站更容易被&lt;strong&gt;搜索引擎收录&lt;/strong&gt;。它结合了&lt;strong&gt;客户端（Client）渲染&lt;/strong&gt;和&lt;strong&gt;服务器端（Server）渲染&lt;/strong&gt;（&lt;strong&gt;SSR/Static HTML&lt;/strong&gt;）的能力。&lt;/p&gt;
&lt;p&gt;(1:18-1:24) &lt;em&gt;&lt;strong&gt;2.7: 本期项目选择与 AI 辅助&lt;/strong&gt;&lt;/em&gt;
本期视频决定使用 &lt;strong&gt;Next.js&lt;/strong&gt; 来&lt;strong&gt;搭建工程&lt;/strong&gt;。由于作者对 &lt;strong&gt;Next.js&lt;/strong&gt; 不太熟悉，计划将&lt;strong&gt;主要的开发任务交给 AI&lt;/strong&gt; 来完成。&lt;/p&gt;
&lt;h1 id=&#34;part3-ai开发工具与项目初始化&#34;&gt;part3: AI开发工具与项目初始化
&lt;/h1&gt;&lt;p&gt;(1:24-1:35) &lt;em&gt;&lt;strong&gt;3.1: 推荐免费AI编程方案 (VSCode + Cline + OpenRouter)&lt;/strong&gt;&lt;/em&gt;
推荐一个&lt;strong&gt;完全免费&lt;/strong&gt;的 &lt;strong&gt;AI 编程方案&lt;/strong&gt;：在 &lt;strong&gt;VS Code&lt;/strong&gt; 上使用 &lt;strong&gt;Cline&lt;/strong&gt; 插件，并接入 &lt;strong&gt;OpenRouter&lt;/strong&gt; 的&lt;strong&gt;免费 API&lt;/strong&gt;，以达到&lt;strong&gt;非常好的 AI 编程效果&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(1:35-1:44) &lt;em&gt;&lt;strong&gt;3.2: 安装VSCode&lt;/strong&gt;&lt;/em&gt;
首先访问 &lt;code&gt;code.visualstudio.com&lt;/code&gt;，&lt;strong&gt;下载&lt;/strong&gt;并&lt;strong&gt;安装 VS Code&lt;/strong&gt;。安装过程十分简单，&lt;strong&gt;一路点击下一步&lt;/strong&gt;即可。&lt;/p&gt;
&lt;p&gt;(1:44-1:47) &lt;em&gt;&lt;strong&gt;3.3: VSCode 基础使用参考&lt;/strong&gt;&lt;/em&gt;
作者提到之前有一个&lt;strong&gt;完整视频&lt;/strong&gt;介绍 &lt;strong&gt;VS Code&lt;/strong&gt; 的&lt;strong&gt;使用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(1:47-1:56) &lt;em&gt;&lt;strong&gt;3.4: 安装与配置Cline插件&lt;/strong&gt;&lt;/em&gt;
进入 &lt;strong&gt;VS Code&lt;/strong&gt; 后，在&lt;strong&gt;扩展市场&lt;/strong&gt;搜索 &lt;strong&gt;Cline&lt;/strong&gt; 插件，点击 &lt;strong&gt;Install&lt;/strong&gt; 进行安装。&lt;/p&gt;
&lt;p&gt;(1:56-2:05) &lt;em&gt;&lt;strong&gt;3.5: 获取 OpenRouter API Key&lt;/strong&gt;&lt;/em&gt;
打开 &lt;strong&gt;Cline&lt;/strong&gt; 插件界面，选择 &lt;strong&gt;&amp;ldquo;Use your own API key&amp;rdquo;&lt;/strong&gt;，API Provider 选择 &lt;strong&gt;OpenRouter&lt;/strong&gt;，然后点击 &lt;strong&gt;&amp;ldquo;Get OpenRouter API Key&amp;rdquo;&lt;/strong&gt; 按钮。&lt;/p&gt;
&lt;p&gt;(2:05-2:10) &lt;em&gt;&lt;strong&gt;3.6: OpenRouter授权&lt;/strong&gt;&lt;/em&gt;
跳转到 &lt;strong&gt;OpenRouter&lt;/strong&gt; 网站进行&lt;strong&gt;授权&lt;/strong&gt;（该网站在&lt;strong&gt;国内可以直连&lt;/strong&gt;），如果没有账号需要先&lt;strong&gt;注册&lt;/strong&gt;。点击 &lt;strong&gt;Authorize&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(2:10-2:23) &lt;em&gt;&lt;strong&gt;3.7: 完成Cline模型选择 (DeepSeek)&lt;/strong&gt;&lt;/em&gt;
回到 &lt;strong&gt;VS Code&lt;/strong&gt;，点击 &lt;strong&gt;Open&lt;/strong&gt; 允许插件打开 URI。这样 &lt;strong&gt;OpenRouter API key&lt;/strong&gt; 就配置好了。在 &lt;strong&gt;Model&lt;/strong&gt; 选择处，搜索并选择&lt;strong&gt;免费&lt;/strong&gt;的 &lt;strong&gt;DeepSeek free&lt;/strong&gt; 模型（&lt;code&gt;deepseek/deepseek-chat-v3-0324-free&lt;/code&gt;）。&lt;strong&gt;AI 编程软件&lt;/strong&gt;配置完成。&lt;/p&gt;
&lt;p&gt;(2:23-2:30) &lt;em&gt;&lt;strong&gt;3.8: 安装Node.js&lt;/strong&gt;&lt;/em&gt;
♈访问 &lt;strong&gt;Node.js&lt;/strong&gt; 官网 (&lt;code&gt;nodejs.org&lt;/code&gt;)，&lt;strong&gt;下载&lt;/strong&gt;并&lt;strong&gt;安装 Node.js&lt;/strong&gt;（LTS 版本）。安装过程同样是&lt;strong&gt;一路点击下一步&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(2:30-2:54) &lt;em&gt;&lt;strong&gt;3.9: ♈ 创建Next.js项目 (Snake)&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;♓安装完 Node.js 后&lt;/strong&gt;，&lt;strong&gt;♓重启 VS Code&lt;/strong&gt;。打开一个新的&lt;strong&gt;终端（Terminal）&lt;/strong&gt;，&lt;strong&gt;切换&lt;/strong&gt;到&lt;strong&gt;目标项目文件夹&lt;/strong&gt;（例如 &lt;code&gt;D:\Project2025&lt;/code&gt;）。♋输入命令 &lt;code&gt;npx create-next-app&lt;/code&gt; 并按回车。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;项目命名：&lt;/strong&gt; 输入 &lt;code&gt;snake&lt;/code&gt;（贪吃蛇）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置选项：&lt;/strong&gt; 对于 &lt;strong&gt;TypeScript&lt;/strong&gt;, &lt;strong&gt;ESLint&lt;/strong&gt;, &lt;strong&gt;Tailwind CSS&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;src/&lt;/code&gt; directory&lt;/strong&gt;, &lt;strong&gt;App Router&lt;/strong&gt;, &lt;strong&gt;import alias&lt;/strong&gt; 等选项，♋全部&lt;strong&gt;一路回车&lt;/strong&gt;使用&lt;strong&gt;默认配置&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(2:54-3:06) &lt;em&gt;&lt;strong&gt;3.10: 启动初始Next.js项目&lt;/strong&gt;&lt;/em&gt;
项目创建成功后，使用 &lt;strong&gt;VS Code&lt;/strong&gt; 打开&lt;strong&gt;新创建&lt;/strong&gt;的 &lt;code&gt;snake&lt;/code&gt; &lt;strong&gt;目录&lt;/strong&gt;，点击&lt;strong&gt;信任&lt;/strong&gt;。♋在&lt;strong&gt;终端&lt;/strong&gt;中输入 &lt;code&gt;npm run dev&lt;/code&gt; &lt;strong&gt;启动项目&lt;/strong&gt;。♋浏览器访问 &lt;code&gt;http://localhost:3000&lt;/code&gt;，可以看到一个&lt;strong&gt;空白的 Next.js 工程&lt;/strong&gt;已成功运行。&lt;/p&gt;
&lt;p&gt;(3:07-3:18) &lt;em&gt;&lt;strong&gt;3.11: 使用Cline生成贪吃蛇游戏页面&lt;/strong&gt;&lt;/em&gt;
接下来，准备使用&lt;strong&gt;AI工具（Cline）&lt;strong&gt;将&lt;/strong&gt;Next.js&lt;/strong&gt;的&lt;strong&gt;初始页面&lt;/strong&gt;改造。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目标：&lt;/strong&gt; 将&lt;strong&gt;页面&lt;/strong&gt;改造成一个&lt;strong&gt;贪吃蛇的网页小游戏&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作：&lt;/strong&gt; 在&lt;strong&gt;Cline&lt;/strong&gt;中输入&lt;strong&gt;改造需求&lt;/strong&gt;的&lt;strong&gt;prompt&lt;/strong&gt;。（♋⌊把这个项目⌋改造成一个含吃蛇的网页版小游戏。）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果：&lt;/strong&gt; &lt;strong&gt;AI（Cline）&lt;strong&gt;成功&lt;/strong&gt;生成&lt;/strong&gt;了&lt;strong&gt;贪吃蛇游戏&lt;/strong&gt;的&lt;strong&gt;代码&lt;/strong&gt;，并在浏览器中&lt;strong&gt;演示&lt;/strong&gt;了&lt;strong&gt;基本的游戏界面&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part4-代码管理&#34;&gt;part4: 代码管理
&lt;/h1&gt;&lt;p&gt;(3:18-3:24) &lt;em&gt;&lt;strong&gt;4.1: 个人开发者代码管理最佳选择：GitHub&lt;/strong&gt;&lt;/em&gt;
对于&lt;strong&gt;个人开发者&lt;/strong&gt;来说，&lt;strong&gt;代码管理&lt;/strong&gt;的&lt;strong&gt;最佳选择&lt;/strong&gt;是 &lt;strong&gt;GitHub&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(3:24-3:38) &lt;em&gt;&lt;strong&gt;4.2: GitHub 功能与优势&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;GitHub&lt;/strong&gt; 是&lt;strong&gt;全球最大&lt;/strong&gt;的&lt;strong&gt;代码仓库托管与协作平台&lt;/strong&gt;，可以在其中&lt;strong&gt;存储&lt;/strong&gt;、&lt;strong&gt;分享&lt;/strong&gt;并与他人一起&lt;strong&gt;编写代码&lt;/strong&gt;。它支持创建&lt;strong&gt;私有（private）仓库&lt;/strong&gt;，只有&lt;strong&gt;自己&lt;/strong&gt;和&lt;strong&gt;被授权的协作者&lt;/strong&gt;可以访问，&lt;strong&gt;不用担心&lt;/strong&gt;源代码泄露。&lt;/p&gt;
&lt;p&gt;(3:38-3:50) &lt;em&gt;&lt;strong&gt;4.3: 解决GitHub访问慢的问题&lt;/strong&gt;&lt;/em&gt;
如果&lt;strong&gt;访问 GitHub 速度很慢&lt;/strong&gt;，可以在&lt;strong&gt;搜索栏&lt;/strong&gt;搜索&amp;quot;&lt;strong&gt;商店&lt;/strong&gt;&amp;quot;，来到&lt;strong&gt;微软的应用商店（Microsoft Store）&lt;/strong&gt;，下载 &lt;strong&gt;Watt Toolkit&lt;/strong&gt; 这个工具。&lt;/p&gt;
&lt;p&gt;(3:50-3:53) &lt;em&gt;&lt;strong&gt;4.4: GitHub 账号注册&lt;/strong&gt;&lt;/em&gt;
如果没有 &lt;strong&gt;GitHub 账号&lt;/strong&gt;，需要先&lt;strong&gt;注册&lt;/strong&gt;一个。&lt;/p&gt;
&lt;p&gt;(3:53-4:07) &lt;em&gt;&lt;strong&gt;4.5: 安装 Git&lt;/strong&gt;&lt;/em&gt;
为了将 &lt;strong&gt;Next.js 工程&lt;/strong&gt;上传到 &lt;strong&gt;GitHub&lt;/strong&gt;，需要先安装 &lt;strong&gt;Git&lt;/strong&gt;。在 &lt;strong&gt;VS Code&lt;/strong&gt; 的&lt;strong&gt;源代码管理（Source Control）&lt;strong&gt;面板，点击 &lt;strong&gt;&amp;ldquo;Download Git for Windows&amp;rdquo;&lt;/strong&gt; 按钮，跳转到下载页面。&lt;strong&gt;下载 64 位的安装包&lt;/strong&gt;并&lt;/strong&gt;安装&lt;/strong&gt;，安装过程同样是&lt;strong&gt;一路点击下一步&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(4:07-4:18) &lt;em&gt;&lt;strong&gt;4.6: 配置 Git 并发布到 GitHub&lt;/strong&gt;&lt;/em&gt;
安装完 &lt;strong&gt;Git&lt;/strong&gt; 后，在 &lt;strong&gt;VS Code 终端&lt;/strong&gt;中配置 &lt;strong&gt;Git 用户名和邮箱&lt;/strong&gt;：
&lt;code&gt;git config --global user.name &amp;quot;your_username&amp;quot;&lt;/code&gt;
&lt;code&gt;git config --global user.email &amp;quot;your_email@example.com&amp;quot;&lt;/code&gt;
然后，在 &lt;strong&gt;VS Code&lt;/strong&gt; 的&lt;strong&gt;源代码管理&lt;/strong&gt;面板♋点击 &lt;strong&gt;&amp;ldquo;Publish Branch&amp;rdquo;&lt;/strong&gt; 按钮。选择 &lt;strong&gt;&amp;ldquo;Publish to GitHub private repository&amp;rdquo;&lt;/strong&gt;♋⌊将代码发⌋ 布为&lt;strong&gt;私有仓库&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(4:18-4:23) &lt;em&gt;&lt;strong&gt;4.7: 确认代码备份&lt;/strong&gt;&lt;/em&gt;
现在，项目代码已经&lt;strong&gt;提交备份&lt;/strong&gt;到 &lt;strong&gt;GitHub&lt;/strong&gt; 上面了，拥有了一个&lt;strong&gt;远程的 Git 仓库&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part5-数据库&#34;&gt;part5: 数据库
&lt;/h1&gt;&lt;p&gt;(4:23-4:33) &lt;em&gt;&lt;strong&gt;5.1: 免费数据库服务推荐：Neon 与 Supabase&lt;/strong&gt;&lt;/em&gt;
对于&lt;strong&gt;免费的数据库服务&lt;/strong&gt;，这里推荐两个：&lt;strong&gt;Neon&lt;/strong&gt; 和 &lt;strong&gt;Supabase&lt;/strong&gt;。它们都提供 &lt;strong&gt;500 MB&lt;/strong&gt; 的&lt;strong&gt;免费存储空间&lt;/strong&gt;。本视频选择使用 &lt;strong&gt;Neon&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(4:33-4:46) &lt;em&gt;&lt;strong&gt;5.2: 创建 Neon 数据库&lt;/strong&gt;&lt;/em&gt;
来到 &lt;strong&gt;Neon&lt;/strong&gt; 的官网 (&lt;code&gt;neon.tech&lt;/code&gt;)，♋点击 &lt;strong&gt;&amp;ldquo;Start for free&amp;rdquo;&lt;/strong&gt;。选择使用 &lt;strong&gt;GitHub 登录&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据库配置：&lt;/strong&gt; &lt;strong&gt;Neon&lt;/strong&gt; 是基于 &lt;strong&gt;PostgreSQL&lt;/strong&gt; 的免费数据库。进入后，选择 &lt;strong&gt;PostgreSQL 版本&lt;/strong&gt;（如 17），给 &lt;strong&gt;Project name&lt;/strong&gt; 起个名字（如 &lt;code&gt;tech-shrimp-db&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果：&lt;/strong&gt; 瞬间就拥有了&lt;strong&gt;自己的免费数据库&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(4:46-4:50) &lt;em&gt;&lt;strong&gt;5.3: 查看数据库连接信息&lt;/strong&gt;&lt;/em&gt;
在 &lt;strong&gt;Neon&lt;/strong&gt; 的 ♈&lt;strong&gt;Project Dashboard&lt;/strong&gt;，♋点击右上角的 &lt;strong&gt;Connect&lt;/strong&gt; 按钮，可以查看&lt;strong&gt;数据库连接&lt;/strong&gt;的相关信息（如连接字符串、用户名、密码、主机地址、数据库名）。&lt;/p&gt;
&lt;h1 id=&#34;part6-数据库工具与集成&#34;&gt;part6: 数据库工具与集成
&lt;/h1&gt;&lt;p&gt;(4:50-4:57) &lt;em&gt;&lt;strong&gt;6.1: 数据库管理工具推荐：DBeaver&lt;/strong&gt;&lt;/em&gt;
推荐使用&lt;strong&gt;开源免费&lt;/strong&gt;的&lt;strong&gt;数据库管理工具&lt;/strong&gt; &lt;strong&gt;DBeaver&lt;/strong&gt;。先来到其官网 (&lt;code&gt;dbeaver.io&lt;/code&gt;)，&lt;strong&gt;下载&lt;/strong&gt; &lt;strong&gt;DBeaver Community&lt;/strong&gt; 版本。&lt;/p&gt;
&lt;p&gt;(4:57-5:20) &lt;em&gt;&lt;strong&gt;6.2: ♈连接 DBeaver 到 Neon 数据库&lt;/strong&gt;&lt;/em&gt;
打开 &lt;strong&gt;DBeaver&lt;/strong&gt; 软件，&lt;strong&gt;新建数据库连接&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;选择数据库类型：&lt;/strong&gt; 选择 &lt;strong&gt;PostgreSQL&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;填写连接信息：&lt;/strong&gt; 回到 &lt;strong&gt;Neon&lt;/strong&gt; 的♎&lt;strong&gt;connect连接信息&lt;/strong&gt;界面，将对应的&lt;strong&gt;主机（Host）地址&lt;/strong&gt;、&lt;strong&gt;数据库（Database）名&lt;/strong&gt;、&lt;strong&gt;用户（User）名&lt;/strong&gt;、&lt;strong&gt;密码（Password）&lt;/strong&gt; 复制并粘贴到 &lt;strong&gt;DBeaver&lt;/strong&gt; 的相应字段中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试连接：&lt;/strong&gt; 点击 &lt;strong&gt;&amp;ldquo;测试连接&amp;rdquo;&lt;/strong&gt;。&lt;strong&gt;DBeaver&lt;/strong&gt; 会&lt;strong&gt;自动下载 PostgreSQL 驱动&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果：&lt;/strong&gt; &lt;strong&gt;连接成功&lt;/strong&gt;。点击&lt;strong&gt;完成&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(5:20-5:35) &lt;em&gt;&lt;strong&gt;6.3: 在 DBeaver 中创建数据表&lt;/strong&gt;&lt;/em&gt;
在 &lt;strong&gt;DBeaver&lt;/strong&gt; 左侧导航栏可以打开&lt;strong&gt;数据库&lt;/strong&gt;。♋接下来准备&lt;strong&gt;创建&lt;/strong&gt;一个&lt;strong&gt;表&lt;/strong&gt;，用来&lt;strong&gt;保存玩家分数&lt;/strong&gt;，做一个&lt;strong&gt;分数排行榜&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作：&lt;/strong&gt; 在 &lt;code&gt;public&lt;/code&gt; 模式下的**表（Tables）**上右键，选择 &lt;strong&gt;&amp;ldquo;新建 表&amp;rdquo;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表结构：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;表名：&lt;/strong&gt; &lt;code&gt;player_score&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列：&lt;/strong&gt; 添加两列：&lt;code&gt;player_name&lt;/code&gt; (类型 &lt;code&gt;varchar&lt;/code&gt;) 和 &lt;code&gt;score&lt;/code&gt; (类型 &lt;code&gt;int&lt;/code&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保存：&lt;/strong&gt; 按 &lt;strong&gt;Ctrl+S&lt;/strong&gt; 保存，点击&lt;strong&gt;执行（Persist）&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(5:35-5:58) &lt;em&gt;&lt;strong&gt;6.4: ♎使用 AI (Cline) 生成数据库操作代码&lt;/strong&gt;&lt;/em&gt;
在 &lt;strong&gt;DBeaver&lt;/strong&gt; 中右键点击刚创建的♈ &lt;code&gt;player_score&lt;/code&gt; 表，选择 &lt;strong&gt;&amp;ldquo;生成 SQL&amp;rdquo;&lt;/strong&gt; -&amp;gt; &lt;strong&gt;DDL&lt;/strong&gt;，♐复制 &lt;strong&gt;&lt;code&gt;CREATE TABLE&lt;/code&gt;&lt;/strong&gt; 语句。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Prompt 构建：&lt;/strong&gt; ♐回到 &lt;strong&gt;VS Code&lt;/strong&gt; 的 &lt;strong&gt;Cline&lt;/strong&gt;，粘贴 &lt;code&gt;CREATE TABLE&lt;/code&gt; 语句，并提出需求：
&lt;ol&gt;
&lt;li&gt;♐请把&lt;strong&gt;玩家的数据&lt;/strong&gt;保存到 &lt;strong&gt;PostgreSQL 数据库&lt;/strong&gt;里面，以下是&lt;strong&gt;建表语句&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♋&lt;strong&gt;游戏开始前&lt;/strong&gt;弄一个&lt;strong&gt;输入框&lt;/strong&gt;，让&lt;strong&gt;玩家自己填名字&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(5:58-6:10) &lt;em&gt;&lt;strong&gt;6.5: 向 AI 提供数据库连接信息&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;♈⌊AI（Cline）&lt;/strong&gt; 询问 &lt;strong&gt;⌋PostgreSQL 数据库的连接信息&lt;/strong&gt;。回到 &lt;strong&gt;Neon&lt;/strong&gt; 复制完整的&lt;strong&gt;连接字符串（Connection string）&lt;/strong&gt;。
♈它的主要目的是获取这些信息，以便生成正确配置的、能够连接数据库的应用程序代码 ♋因为它需要这些信息来生成正确的应用程序代码&lt;/p&gt;
&lt;p&gt;(6:10-6:16) &lt;em&gt;&lt;strong&gt;6.6: AI 生成代码并测试&lt;/strong&gt;&lt;/em&gt;
将&lt;strong&gt;连接字符串&lt;/strong&gt;粘贴给 &lt;strong&gt;AI（Cline）&lt;/strong&gt;。&lt;strong&gt;AI&lt;/strong&gt; 修改了代码。点击 &lt;strong&gt;Save&lt;/strong&gt; 保存更改。在终端运行 &lt;code&gt;npm run dev&lt;/code&gt; 启动项目进行测试。&lt;/p&gt;
&lt;p&gt;(6:16-6:41) &lt;em&gt;&lt;strong&gt;6.7: 发现并分析错误&lt;/strong&gt;&lt;/em&gt;
启动时出现&lt;strong&gt;构建错误&lt;/strong&gt;：&lt;code&gt;Module not found: Can&#39;t resolve &#39;dns&#39;&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定位原因：&lt;/strong&gt; 查看 &lt;strong&gt;AI&lt;/strong&gt; 写的代码，发现 &lt;code&gt;page.tsx&lt;/code&gt;（&lt;strong&gt;前端页面&lt;/strong&gt;）直接 &lt;code&gt;import&lt;/code&gt; 并调用了 &lt;code&gt;lib/db.ts&lt;/code&gt; 中的 &lt;code&gt;saveScore&lt;/code&gt; 方法。而 &lt;code&gt;saveScore&lt;/code&gt; 方法内部使用了 &lt;code&gt;pg&lt;/code&gt; 包进行数据库连接和操作 (&lt;code&gt;await pool.connect()&lt;/code&gt;, &lt;code&gt;client.query()&lt;/code&gt;)，并读取了环境变量 &lt;code&gt;process.env.DATABASE_URL&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;问题分析：&lt;/strong&gt; &lt;strong&gt;Next.js&lt;/strong&gt; 默认会将 &lt;code&gt;page.tsx&lt;/code&gt; 作为&lt;strong&gt;前端组件&lt;/strong&gt;处理。在&lt;strong&gt;前端（浏览器）环境&lt;/strong&gt;中直接调用包含&lt;strong&gt;后端数据库操作&lt;/strong&gt;（需要 &lt;code&gt;pg&lt;/code&gt; 包）和&lt;strong&gt;敏感信息&lt;/strong&gt;（数据库连接字符串）的代码是&lt;strong&gt;错误&lt;/strong&gt;的，并且存在&lt;strong&gt;严重的安全隐患&lt;/strong&gt;，会导致&lt;strong&gt;敏感信息暴露&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(6:41-6:56) &lt;em&gt;&lt;strong&gt;6.8: 向 AI 反馈错误并寻求解决方案&lt;/strong&gt;&lt;/em&gt;
与 &lt;strong&gt;AI（Cline）&lt;/strong&gt; 交流，指出&lt;strong&gt;保存数据库的逻辑&lt;/strong&gt;似乎不正常，询问♒⌊保存数据库这块的逻辑正常么？这是后台操作还是前端操作？⌋，♒AI肯定没有意识到自己的错误，让 &lt;strong&gt;AI&lt;/strong&gt; 检查其生成的代码，特别是 &lt;code&gt;db.ts&lt;/code&gt; 和 &lt;code&gt;page.tsx&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;(6:56-7:04) &lt;em&gt;&lt;strong&gt;6.9: AI 提出正确解决方案 (API Route)&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;AI（Cline）&lt;/strong&gt; 识别到错误，并提出了&lt;strong&gt;正确的解决方案&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建 API 路由：&lt;/strong&gt; 新建一个 &lt;strong&gt;API 端点&lt;/strong&gt;（例如 &lt;code&gt;/api/saveScore&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前后端分离：&lt;/strong&gt; &lt;strong&gt;前端页面&lt;/strong&gt;通过&lt;strong&gt;发送 POST 请求&lt;/strong&gt;到这个 &lt;strong&gt;API 端点&lt;/strong&gt;来触发&lt;strong&gt;后端&lt;/strong&gt;的&lt;strong&gt;数据库保存&lt;/strong&gt;操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(7:04-7:19) &lt;em&gt;&lt;strong&gt;7.1: 更简洁的 Next.js 解决方案 (&lt;code&gt;use server&lt;/code&gt;)&lt;/strong&gt;&lt;/em&gt;
作者指出，其实还有一种&lt;strong&gt;更简单&lt;/strong&gt;的 &lt;strong&gt;Next.js&lt;/strong&gt; 改法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;lib/db.ts&lt;/code&gt; 文件的&lt;strong&gt;顶部&lt;/strong&gt;加上一行 &lt;code&gt;&#39;use server&#39;;&lt;/code&gt; 指令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用：&lt;/strong&gt; 这会告诉 &lt;strong&gt;Next.js&lt;/strong&gt;，这个文件里的函数是&lt;strong&gt;服务器后端方法&lt;/strong&gt;。♋&lt;strong&gt;Next.js&lt;/strong&gt; 会&lt;strong&gt;自动&lt;/strong&gt;处理，♐生成相应的 &lt;strong&gt;API 端点&lt;/strong&gt;，♋将&lt;strong&gt;前后端的逻辑分割开&lt;/strong&gt;，无需手动创建 API 路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(7:19-7:51) &lt;em&gt;&lt;strong&gt;7.2: 对 AI 编程能力的思考&lt;/strong&gt;&lt;/em&gt;
这个例子体现了作者对 &lt;strong&gt;AI 编程&lt;/strong&gt;的看法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AI 的角色：&lt;/strong&gt; 现阶段的 &lt;strong&gt;AI&lt;/strong&gt; 水平相当于一个&lt;strong&gt;知识面广&lt;/strong&gt;的&lt;strong&gt;初级程序员&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;人类的角色：&lt;/strong&gt; 人类依旧是&lt;strong&gt;高级程序员&lt;/strong&gt;、&lt;strong&gt;项目架构师&lt;/strong&gt;，需要负责&lt;strong&gt;系统架构设计&lt;/strong&gt;、理解&lt;strong&gt;编程原理&lt;/strong&gt;（如♈&lt;strong&gt;前后端交互&lt;/strong&gt;、&lt;strong&gt;保护安全信息&lt;/strong&gt;等系统架构的知识）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协作方式：&lt;/strong&gt; 不能完全依赖 &lt;strong&gt;AI&lt;/strong&gt;，人类需要&lt;strong&gt;审查和指导 AI&lt;/strong&gt; 的工作，将更多精力投入到&lt;strong&gt;架构设计&lt;/strong&gt;和&lt;strong&gt;业务需求理解&lt;/strong&gt;上。作为&lt;strong&gt;人类&lt;/strong&gt;，掌握&lt;strong&gt;系统架构&lt;/strong&gt;、&lt;strong&gt;编程原理&lt;/strong&gt;等知识仍然是&lt;strong&gt;必学必会的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part7-部署&#34;&gt;part7: 部署
&lt;/h1&gt;&lt;p&gt;(7:51-8:00) &lt;em&gt;&lt;strong&gt;8.1: Next.js 项目最佳部署平台：Vercel&lt;/strong&gt;&lt;/em&gt;
作为一个 &lt;strong&gt;Next.js 项目&lt;/strong&gt;，&lt;strong&gt;最方便&lt;/strong&gt;的部署方式就是部署到 &lt;strong&gt;Vercel&lt;/strong&gt; 里面，♋因为 &lt;strong&gt;Vercel&lt;/strong&gt; 目前是 &lt;strong&gt;Next.js 的母公司&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(8:00-8:08) &lt;em&gt;&lt;strong&gt;8.2: 开始 Vercel 部署流程&lt;/strong&gt;&lt;/em&gt;
来到 &lt;strong&gt;Vercel&lt;/strong&gt; 官网 (&lt;code&gt;vercel.com&lt;/code&gt;)，♋点击 &lt;strong&gt;&amp;ldquo;Start Deploying&amp;rdquo;&lt;/strong&gt;。选择 &lt;strong&gt;Continue with GitHub&lt;/strong&gt; 登录。♈选择之前创建的 &lt;code&gt;snake&lt;/code&gt; &lt;strong&gt;GitHub 仓库&lt;/strong&gt;，点击 &lt;strong&gt;Import&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(8:08-8:18) &lt;em&gt;&lt;strong&gt;8.3: 配置环境变量并部署&lt;/strong&gt;&lt;/em&gt;
项目设置基本保持&lt;strong&gt;默认&lt;/strong&gt;。♐&lt;strong&gt;唯一&lt;/strong&gt;需要修改的是在 &lt;strong&gt;Environment Variables（环境变量）&lt;/strong&gt; 中添加数据库连接信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Key:&lt;/strong&gt; &lt;code&gt;DATABASE_URL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Value:&lt;/strong&gt; 粘贴从 &lt;strong&gt;Neon&lt;/strong&gt; 获取的&lt;strong&gt;连接字符串&lt;/strong&gt;。
点击 &lt;strong&gt;Deploy&lt;/strong&gt; 开始部署。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(8:18-8:32) &lt;em&gt;&lt;strong&gt;8.4: 部署完成与访问&lt;/strong&gt;&lt;/em&gt;
等待大约 &lt;strong&gt;1 分钟&lt;/strong&gt;左右，项目就&lt;strong&gt;部署完成&lt;/strong&gt;了。点击 &lt;strong&gt;&amp;ldquo;Continue to Dashboard&amp;rdquo;&lt;/strong&gt;。&lt;strong&gt;Vercel&lt;/strong&gt; 会分配一个&lt;strong&gt;默认域名&lt;/strong&gt;（例如 &lt;code&gt;snake-bice-three.vercel.app&lt;/code&gt;）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试：&lt;/strong&gt; 访问该域名，功能与&lt;strong&gt;本地&lt;/strong&gt;一致，可以&lt;strong&gt;正常游戏&lt;/strong&gt;并&lt;strong&gt;保存分数&lt;/strong&gt;到 &lt;strong&gt;Neon 数据库&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♋&lt;strong&gt;注意：&lt;/strong&gt; &lt;strong&gt;Vercel&lt;/strong&gt; 的&lt;strong&gt;默认域名&lt;/strong&gt;♋只能在&lt;strong&gt;国外的上网环境&lt;/strong&gt;访问到。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(8:32-8:45) &lt;em&gt;&lt;strong&gt;8.5: Vercel 免费额度限制&lt;/strong&gt;&lt;/em&gt;
在♋ &lt;strong&gt;Vercel&lt;/strong&gt; 的 &lt;strong&gt;Dashboard&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Usage&lt;/strong&gt; 页面，♈可以看到&lt;strong&gt;免费用户&lt;/strong&gt;的&lt;strong&gt;用量限制&lt;/strong&gt;。作者认为 &lt;strong&gt;Edge Requests&lt;/strong&gt;（每月 100 万次）可能比较&lt;strong&gt;瓶颈&lt;/strong&gt;。如果&lt;strong&gt;升级到 Pro 模式&lt;/strong&gt;，这些用量限制可以&lt;strong&gt;提高 10 倍&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part8-域名&#34;&gt;part8: 域名
&lt;/h1&gt;&lt;p&gt;(8:45-8:55) &lt;em&gt;&lt;strong&gt;9.1: 域名的重要性与选择&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;域名&lt;/strong&gt;作为一个&lt;strong&gt;产品的排面&lt;/strong&gt;，不建议用&lt;strong&gt;免费的&lt;/strong&gt;，因为&lt;strong&gt;不稳定&lt;/strong&gt;且&lt;strong&gt;非常折腾&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(8:55-9:05) &lt;em&gt;&lt;strong&gt;9.2: 推荐廉价域名注册商：NameSilo&lt;/strong&gt;&lt;/em&gt;
可以来到 &lt;strong&gt;NameSilo&lt;/strong&gt; (&lt;code&gt;namesilo.com&lt;/code&gt;) 这个地址，以&lt;strong&gt;最低成本&lt;/strong&gt;获得一个域名。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;示例：&lt;/strong&gt; 搜索一个&lt;strong&gt;6 位数字&lt;/strong&gt;，发现 &lt;code&gt;6位数字.xyz&lt;/code&gt; 的域名只需要 &lt;strong&gt;0.99 美元一年&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(9:05-9:18) &lt;em&gt;&lt;strong&gt;9.3: 使用 Cloudflare 托管域名&lt;/strong&gt;&lt;/em&gt;
有了域名以后，可以把它♐&lt;strong&gt;托管&lt;/strong&gt;到 &lt;strong&gt;Cloudflare&lt;/strong&gt; 上面。作者提到，关于&lt;strong&gt;如何把域名托管到 Cloudflare&lt;/strong&gt;，在&lt;strong&gt;之前的视频&lt;/strong&gt;里有过详细介绍，这里不再赘述。&lt;/p&gt;
&lt;p&gt;(9:18-9:34) &lt;em&gt;&lt;strong&gt;9.4: Vercel 绑定自定义域名&lt;/strong&gt;&lt;/em&gt;
回到 &lt;strong&gt;Vercel&lt;/strong&gt; 的项目♍&lt;strong&gt;设置（Settings）&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Domains&lt;/strong&gt; 页面，点击 &lt;strong&gt;Add&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;输入域名：&lt;/strong&gt; 输入自己购买并托管到 &lt;strong&gt;Cloudflare&lt;/strong&gt; 的域名（或子域名），♋例如 &lt;code&gt;snake.tech-shrimp.com&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动配置：&lt;/strong&gt; 点击 &lt;strong&gt;Add&lt;/strong&gt; 后，♋选择 &lt;strong&gt;Configure Automatically&lt;/strong&gt;。&lt;strong&gt;Vercel&lt;/strong&gt; 会自动通过 &lt;strong&gt;Cloudflare API&lt;/strong&gt; 配置 &lt;strong&gt;DNS 记录&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(9:34-9:40) &lt;em&gt;&lt;strong&gt;9.5: 测试自定义域名&lt;/strong&gt;&lt;/em&gt;
配置完成后，页面上会显示&lt;strong&gt;两个蓝色的对勾&lt;/strong&gt;，表示&lt;strong&gt;配置完成&lt;/strong&gt;。使用这个&lt;strong&gt;自定义域名&lt;/strong&gt;（&lt;code&gt;snake.tech-shrimp.com&lt;/code&gt;）同样可以&lt;strong&gt;访问&lt;/strong&gt;到刚才部署的网站，并且♉这个域名在&lt;strong&gt;国内是可以直连&lt;/strong&gt;的。&lt;/p&gt;
&lt;h1 id=&#34;part9-用户行为分析&#34;&gt;part9: 用户行为分析
&lt;/h1&gt;&lt;p&gt;(9:40-9:51) &lt;em&gt;&lt;strong&gt;10.1: 免费用户行为监控工具：Microsoft Clarity&lt;/strong&gt;&lt;/em&gt;
推荐使用 &lt;strong&gt;Microsoft Clarity&lt;/strong&gt; (&lt;code&gt;clarity.microsoft.com&lt;/code&gt;)，这是&lt;strong&gt;微软&lt;/strong&gt;推出的&lt;strong&gt;免费用户行为监控工具&lt;/strong&gt;。它提供了&lt;strong&gt;热点地图（Heatmaps）&lt;/strong&gt;、♈&lt;strong&gt;用户行为录像（Session Recordings）&lt;/strong&gt;、**报表（Dashboard）**等一系列功能。&lt;/p&gt;
&lt;p&gt;(9:51-10:02) &lt;em&gt;&lt;strong&gt;10.2: 集成 Clarity 到 Next.js 项目&lt;/strong&gt;&lt;/em&gt;
登录 &lt;strong&gt;Clarity&lt;/strong&gt;（可以使用 &lt;strong&gt;Google 账号&lt;/strong&gt;）。♋在 &lt;strong&gt;Clarity&lt;/strong&gt; 项目设置中，♉选择&lt;strong&gt;手动安装（Manual install）&lt;/strong&gt;，♈获取&lt;strong&gt;跟踪代码（Tracking Code）&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作：&lt;/strong&gt; 回到 &lt;strong&gt;VS Code&lt;/strong&gt;，打开 ♋⌊&lt;code&gt;app/layout.tsx&lt;/code&gt; 文件⌋。在 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 标签内，定义一个 &lt;code&gt;&amp;lt;Script&amp;gt;&lt;/code&gt; 组件（从 &lt;code&gt;next/script&lt;/code&gt; 导入），。将 &lt;strong&gt;Clarity&lt;/strong&gt; 的&lt;strong&gt;跟踪代码&lt;/strong&gt;粘贴到 &lt;code&gt;&amp;lt;Script&amp;gt;&lt;/code&gt; 组件内部。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(10:02-10:10) &lt;em&gt;&lt;strong&gt;10.3: 验证 Clarity 集成&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;保存&lt;/strong&gt; &lt;code&gt;layout.tsx&lt;/code&gt; 文件。在&lt;strong&gt;本地&lt;/strong&gt;重新&lt;strong&gt;启动项目&lt;/strong&gt; (&lt;code&gt;npm run dev&lt;/code&gt;) 并进行一些操作。♈回到 &lt;strong&gt;Clarity&lt;/strong&gt; 网站，在&lt;strong&gt;录制（Recordings）&lt;strong&gt;页面，♐可以看到&lt;/strong&gt;作为用户的操作&lt;/strong&gt;已经被&lt;strong&gt;录制&lt;/strong&gt;下来了。&lt;/p&gt;
&lt;p&gt;(10:10-10:17) &lt;em&gt;&lt;strong&gt;10.4: Clarity 其他功能说明&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;Clarity&lt;/strong&gt; 的&lt;strong&gt;仪表板（Dashboard）&lt;strong&gt;和&lt;/strong&gt;热点地图（Heatmaps）&lt;strong&gt;需要&lt;/strong&gt;过 24 小时&lt;/strong&gt;才能呈现数据。至此，♉已将网站&lt;strong&gt;轻松接入&lt;/strong&gt;了 &lt;strong&gt;Clarity&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part10-邮件&#34;&gt;part10: 邮件
&lt;/h1&gt;&lt;p&gt;(10:17-10:39) &lt;em&gt;&lt;strong&gt;11.1: 免费邮件收发方案&lt;/strong&gt;&lt;/em&gt;
作者之前有一期视频介绍&lt;strong&gt;如何使用 Cloudflare 获取无限多个免费邮箱&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;收邮件：&lt;/strong&gt; 主要使用 **Cloudflare 的电子邮箱路由（Email Routing）**功能。&lt;/li&gt;
&lt;li&gt;♉&lt;strong&gt;发邮件「白Cloudflare无限多企业邮箱，可收发邮件」：&lt;/strong&gt; 借助 &lt;strong&gt;Resend&lt;/strong&gt; (&lt;code&gt;resend.com&lt;/code&gt;) 的&lt;strong&gt;免费 API&lt;/strong&gt;。&lt;strong&gt;Resend&lt;/strong&gt; 的&lt;strong&gt;免费套餐&lt;/strong&gt;每天可以发送 &lt;strong&gt;100 封&lt;/strong&gt;邮件，每个月最多 &lt;strong&gt;3000 封&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明：&lt;/strong&gt; 详细用法在&lt;strong&gt;之前的视频&lt;/strong&gt;里，本期不再赘述。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part11-ddos-防御&#34;&gt;part11: DDoS 防御
&lt;/h1&gt;&lt;p&gt;(10:39-10:55) &lt;em&gt;&lt;strong&gt;12.1: 免费 DDoS 防御方案&lt;/strong&gt;&lt;/em&gt;
之前也有一期&lt;strong&gt;完整视频&lt;/strong&gt;介绍使用 &lt;strong&gt;Cloudflare 防御 DDoS 攻击&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主要方法：&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;配置 &lt;strong&gt;CDN&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;配置 &lt;strong&gt;IP 白名单&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;使用 &lt;strong&gt;Cloudflare 防火墙（Firewall）&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明：&lt;/strong&gt; 这三种方法可以有效防御 &lt;strong&gt;DDoS 攻击&lt;/strong&gt;，详细内容在那期视频里，这里不再赘述。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part12-其他免费工具与总结&#34;&gt;part12: 其他免费工具与总结
&lt;/h1&gt;&lt;p&gt;(10:55-1:01) &lt;em&gt;&lt;strong&gt;13.1: 其他推荐的免费工具&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;♎&lt;strong&gt;UI 设计：&lt;/strong&gt; 可以选择 &lt;strong&gt;Figma&lt;/strong&gt; (&lt;code&gt;figma.com&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文档工具：&lt;/strong&gt; 可以选择 &lt;strong&gt;Notion&lt;/strong&gt; (&lt;code&gt;notion.so&lt;/code&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(11:01-1:04) &lt;em&gt;&lt;strong&gt;13.2: 工单管理工具&lt;/strong&gt;&lt;/em&gt;
♎&lt;strong&gt;工单管理&lt;/strong&gt;可以使用 &lt;strong&gt;GitHub 的 Project 功能&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(11:04-11:13) &lt;em&gt;&lt;strong&gt;13.3: 作者开发习惯与视频总结&lt;/strong&gt;&lt;/em&gt;
作者自嘲写代码风格是**&amp;ldquo;一把梭&amp;rdquo;&lt;strong&gt;，通常&lt;/strong&gt;不做设计**、&lt;strong&gt;不写文档&lt;/strong&gt;、也&lt;strong&gt;不创建 ticket&lt;/strong&gt;。视频到此结束。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>模板</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E6%A8%A1%E6%9D%BF/</link>
        <pubDate>Tue, 11 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E6%A8%A1%E6%9D%BF/</guid>
        <description></description>
        </item>
        <item>
        <title>面包购买小技巧 2——崎本生吐司什么水平？</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E9%9D%A2%E5%8C%85%E8%B4%AD%E4%B9%B0%E5%B0%8F%E6%8A%80%E5%B7%A7-2%E5%B4%8E%E6%9C%AC%E7%94%9F%E5%90%90%E5%8F%B8%E4%BB%80%E4%B9%88%E6%B0%B4%E5%B9%B3/</link>
        <pubDate>Tue, 11 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E9%9D%A2%E5%8C%85%E8%B4%AD%E4%B9%B0%E5%B0%8F%E6%8A%80%E5%B7%A7-2%E5%B4%8E%E6%9C%AC%E7%94%9F%E5%90%90%E5%8F%B8%E4%BB%80%E4%B9%88%E6%B0%B4%E5%B9%B3/</guid>
        <description>&lt;p&gt;༼ 面包购买小技巧 2——崎本生吐司什么水平？༽
00:00:00
强者发型最让人难过的不是强者发型，而是我秃了，但是没变强。就给你们介绍一下怎么样来看面包餐包们，这餐包就很好看。这个的话，他因为他没有刷鸡蛋，所以说他这个地方不会有那种明显的线。然后这底下看到没有裂纹，这就是中间没有收紧，这就是做工不是太好的实习生做的，但是做多了就不会。然后是这个面包，这个面包我们可以看得出来，就这个地方有一条线能明显的看得出来，就是有光泽的地方是刷了蛋的，没光泽的地方是没有刷弹的。底下白色的这一部分就是进了烤箱以后膨胀的部分。&lt;/p&gt;
&lt;p&gt;00:00:36
♈很多时候大家对那个发酵本身它是有误解的，就是只有我要你发酵声你才发酵，怎么可能？♈酵母它不听你的话，好吧？♈那个酵母它想发就发是吧？冷藏的时候也可以发，高温的时候也可以发，♐直到50多度它死了。|他们把这个面包发酵到自己觉得好了，然后再开烤箱。烤箱预热要十几分钟，面包就又发了十几分钟。♈然后面包你把它放进去的时候，面包只有三十多度，三十多度升温到50多度对吧？然后慢慢的再烤熟，这个过程当中它还在发酵，|♋所以说为什么底下会有这一圈白的这就是这个面包它在烤箱里面发酵的痕迹。&lt;/p&gt;
&lt;p&gt;00:01:19
你懂怎么样做面包，你自然就懂怎么样买面包。知道了这些面包和甜点他做的时候有哪些环节是如何判断他做的好坏，自然买的时候也会知道它的好坏。还有一个点就是这个面包怎么样好吃。你看它这个面包明显是不圆的这面包从底部可以看得出来，它不是圆形的，♈不是圆形的说明什么问题？说明这个面包它搓的时候用力不均匀，用力不均匀，这个面包它的力道就不一样。♋这样的话你吃着就是一口软一口硬，这就是普通面包店的水平。好面包店的话它做出来就是圆的，每一个面包它都受力很匀。&lt;/p&gt;
&lt;p&gt;00:02:02
♈就是我评价面包一直以来都是统一的标准，首先皮薄上色好，然后再就是里面的组织比较均1，看到没有？上下左右还是中间，它的那个气泡的大小是几乎一致的。如果能够看得到那种漩涡状的纹理的话，那就说明整形特别好。♈它的气泡均匀就说明这个面团受力均匀，受力均匀就说明吃起来口感比较一致，我从中间抽一片出来，他这个样子，这个地方就是属于整形的时候排气没有排好，但是♈整体的面团就是很松软。然后你看这撕的时候，他也没有给广告费，♋看们撕起来像棉絮一样就是比较好。&lt;/p&gt;
&lt;p&gt;00:02:50
♈最近我发现一个比较有意思就是chagt，它可以点评这个面包的好坏，以后你们去买的时候可以用它。但是我跟你们说第好目前我感觉他点评的不是太好，我现在看GPT怎么来评价这个面包。稍等，见证奇迹的时候到看看他的分析，它是从几个维度说的。♋首先说优缺点，这个面包的组织怎么样，发酵的怎么样？然后还有不足和可以优化的点，包括还有表皮分析，上色还有什么之类的。我觉得他把这个面包的评价维度基本上都考虑到了。&lt;/p&gt;
&lt;p&gt;00:03:25
♈如果你去一家面包店，你不知道这个面包做的好坏，你就拍张照片发给gp t♈你看AI认不认可他的面包。对于不懂的人来说，AI应该比你们懂，♋他评价不了太高级的吐司，但是作为基本的吐司，绝对能够评价得了你做出来的东西。你让AI帮你点评一下，以目前来看是可以的。♋就觉得自己烘焙做的好的，♋或者比如说你们如果在小红书上面看到哪家想买的，♈你可以把这个图也发给gt看看g怎么样评价他们。这拿起来它应该是这么软的。目前来说我觉得它已经是最接近日本圣图斯的产品，它和人字传做的比较方便。我在盒马买了，非常失望，然后我在卢布中买了它不是生吐司，我觉得它是一个没有蛋的。不留兄再给大家看下七氛，刚才我们已经看过了，它的深吐司还是做的不错。&lt;/p&gt;
&lt;p&gt;00:04:16
我上海的、北京的，然后天津的七本都看过了，都买过了。这一家是第一次买，但是其他的我都买了不止一次。他们一贯表现都不错，而且都是去年表现不错，今年在新的地方也能表现不错。我觉得他们整体的管理是不错，肯定在设备上面下了大功。因为没听说哪家店能够培养这么多人才，主要还是靠设备，这个应该很贵。&lt;/p&gt;
&lt;p&gt;00:04:42
给大家看一下，现在正儿八经这么做的已经很少了。大家有没有发现一个现象，就是♋现在那些吐司，特别是那种小的吐司，上面搞的花里胡哨，有很多肉松什么东西的，让你很有购买欲望。然后你一切开发现所有的料都在表面|，看见没有？这就是典型的老式吐司。它的做法是什么样的？这种的做法就是先把那个面包的面团擀成这么大一张大饼，然后抹上酱，卷起来以后切切了以后再扭成麻花。这样的话它就是特别均匀的，你每一口都能吃到馅料吃起来就会很爽。但是给的料就要很多，你料给的多，你就要卖的贵。&lt;/p&gt;
&lt;p&gt;00:05:20
别人的做法是我把那个吐司变成一了辫子以后，♈把所有的材料撒在表面，它只需要撒不到泥，一般的材料它也可以做出跟你一样的样子。看起来大家椰蓉都是一样多，但是他就可以比你卖的便宜。♋这个第一印象就已经决定了大多数的客人会往把所有料撒在表面的点，这就是一种降本增效的方法。&lt;/p&gt;
&lt;p&gt;00:05:41
我做椰蓉吐司的时候也是这样做的，因为馅料都比较好吃。尝一口它的椰蓉没有偷工减料，就是黄油椰蓉往里面怼。但我觉得的话，如果在外里面加点奶粉会更猛，威力会更加加强。主要是这样做的店太少了，一般都是上面给一些椰蓉，然后底下就还是白吐司，说实话吃的有点意思。&lt;/p&gt;
&lt;p&gt;00:06:01
这是一个卡仕达吐司，这也是一个在上海已经阔别十 年之久的产品了。因为没有人干这种蠢事，你知道吧？就是又花功夫又花材料，卖的稍微贵一点，然后就被一群人追上骂。我上次去棋本的时候还没有看到这个。对了，棋本要跟你们说些什么东西，我太适合买。&lt;/p&gt;
&lt;p&gt;00:06:20
就是他家的背部，他家的贝果，实际上就是把那个软面包做成了贝果的形状，他是那种特别软的。我提前告诉你们，有人喜欢吃这种日式软贝果，有人喜欢吃美式的硬背果，这是个个人偏好的问题，对吧？这就有点像是你喜欢吃济南的煎饼果子还是天津的煎饼果子，那谁知道呢？特别是你要对于一个武汉人来说的话，其实我觉得两边都挺好吃。&lt;/p&gt;
&lt;p&gt;00:06:46
这是五大道的另外一家甜点店，进去以后就觉得他做的不错。就是从外表上面来看，我觉得这做的不错。全麦吐司这么看还是看皮，然后看四周土司，它周围有模具，它不能自由发展，它发展到旁边的话，适当的沉积是正常的。你里面其实能够♈看得到它的那个漩涡状，♏还有就是这个地方的白边，这个地方能看到明显浅一些，就说明它的发酵控制也还可以|，这个地方说明它的整形还可以，♈然后他的这个气泡说明他揉的面也还行。&lt;/p&gt;
&lt;p&gt;00:07:18
然后再就是闻香味，当然一般的店里面是不会给你闻香味的，你只能说是我前面已经看到这些东西都ok的情况下，买了以后第一件事情是闻香味。我在里面闻到了糖的味道，它是属于一个偏甜一点的。而且他店里面我还发现一个特别有意思的东西，这个我已经好久没有见到了，不留修肉吐司，我一看就乐了。&lt;/p&gt;
&lt;p&gt;00:07:37
因为我以前不是跟大家讲过一个超象故事，我们语言学校有个同学就是偷偷吃这个面包，胖了十几斤。因为我觉得太好吃了，天天去吃。但他吃的是附中的那家，这家没有这个水，怎么看他是不留奥消弱吐司就是这么黄，它的第一配版在山姆里面，山姆里面那个黄油吐司多乐之日的就是这个的简配。它有一点我觉得我比较喜欢的一点，就是他做的这个造型，布流香吐司的造型应该是搓成一个一个的小球，然后烤出来以后都是这一个一个的这种小山包。闻起来的话，它的那个发酵风味和黄油风味也都还可以。但是我感觉它是它发酵时间偏长了一点，就从这中间这个树脂的这个气孔，我觉得它稍微偏长了一点，结果黄油的味道就散了一些。因为这个面包我觉得最重要的点就是黄油的香味。那你为了把这个面包发的大一点，然后黄油香味变少了，其实我觉得有点可惜，希望这个面包可以越做越。
00:08:34
对了，还有一点就是不灵头削肉吐司比一般的吐司都要小，一对比就可以看出来它就小。为什么？♋因为它第一它的黄油比较多，第二的话就是这个面团它比较弱，它膨胀不了那么大。一般来说不留休是250克的吐司，而普通的吐司白吐司的话是450克的吐司|。&lt;/p&gt;
&lt;p&gt;00:08:53
还有一种250克吐司是什么呢？就中间加了馅料的吐司，就比如这个，♋因为你里面如果加了馅料以后，你想把面包发的450克那么大，你是在做梦。所以说这个东西它都是有基本原理在里面的。&lt;/p&gt;
&lt;p&gt;00:09:07
当你看到形状、颜色或者是什么模具不匹配的东西，就赶紧快跑，就不要觉得舔舔石头不干活。我们是随便在选模具，什么东西该用，什么样的模具该做多大都是前人留下来的经验，而不是什么我脑袋一拍，我去换个新造型，然后再来点评一下他们的泡芙，就是泡芙这个东西在法语里面叫包菜。长得像包菜，就是做的好，就是正常的包菜应该是这个样子这个样子。那这个泡芙它就有问题，你就比如说我们这横着看，他就有点横向发展，横向发展不是什么好事，这个就是稍微好一些，但它整个面团其实也是偏稀的。真正好的他应该是这个形状包，它应该是这个形状，这块的就不错。你看上面它是花瓣形的裂开，而且它的那个高度和宽度的比例就比较正常。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>AI客户端如何解析github项目</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/ai%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%A6%82%E4%BD%95%E8%A7%A3%E6%9E%90github%E9%A1%B9%E7%9B%AE/</link>
        <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/ai%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%A6%82%E4%BD%95%E8%A7%A3%E6%9E%90github%E9%A1%B9%E7%9B%AE/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[让AI解析github项目]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;《1 直接把项目克隆下来，然后用AI客户端打开即可，反正项目说明README.md是markdown，图片什么的都有，再复杂的项目AI都能用README.md解析》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;2 使用github MCP解析自己克隆下来的仓库&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;3 给AI客户端添加URL文档集 直接把github项目地址作为文档集数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>AI客户端添加项目文档（三种方案）</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/ai%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B7%BB%E5%8A%A0%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3%E4%B8%89%E7%A7%8D%E6%96%B9%E6%A1%88/</link>
        <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/ai%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B7%BB%E5%8A%A0%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3%E4%B8%89%E7%A7%8D%E6%96%B9%E6%A1%88/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[让AI解析github项目]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;1 给AI客户端添加URL文档集 直接把项目文档的地址作为文档集数据》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;2 把在线项目文档的网页crlt+s保存下来后加入到当前项目&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;3 使用联网 MCP服务 然后AI客户端联网去解析在线项目文档&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>github page部署hugo博客</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/github-page%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2/</link>
        <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/github-page%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2/</guid>
        <description>&lt;h2 id=&#34;part1-创建新的-github-仓库&#34;&gt;part1: 创建新的 GitHub 仓库
&lt;/h2&gt;&lt;p&gt;(00:04-00:23) &lt;em&gt;&lt;strong&gt;1.1: 推荐仓库命名&lt;/strong&gt;&lt;/em&gt;
对于&lt;strong&gt;首次部署博客&lt;/strong&gt;的用户，视频&lt;strong&gt;推荐&lt;/strong&gt;将 GitHub &lt;strong&gt;仓库名称&lt;/strong&gt;设置为 &lt;code&gt;**用户名.github.io**&lt;/code&gt; 的格式。视频中演示了输入 &lt;code&gt;**letere-gg.github.io**&lt;/code&gt; 作为示例。&lt;/p&gt;
&lt;p&gt;(00:23-00:30) &lt;em&gt;&lt;strong&gt;1.2: 处理命名冲突&lt;/strong&gt;&lt;/em&gt;
视频指出 &lt;code&gt;**letere-gg.github.io**&lt;/code&gt; 这个特定名称在其账户下&lt;strong&gt;已被占用&lt;/strong&gt;，因为它已被用于&lt;strong&gt;部署&lt;/strong&gt;另一个项目（提及了 &lt;strong&gt;Hexo&lt;/strong&gt;，但后续操作基于 &lt;strong&gt;Hugo&lt;/strong&gt;）。&lt;/p&gt;
&lt;h2 id=&#34;part2-理解-github-pages-的-url-结构&#34;&gt;part2: 理解 GitHub Pages 的 URL 结构
&lt;/h2&gt;&lt;p&gt;(00:30-00:47) &lt;em&gt;&lt;strong&gt;2.1: &lt;code&gt;用户名.github.io&lt;/code&gt; 仓库的 URL&lt;/strong&gt;&lt;/em&gt;
视频展示了名为 &lt;code&gt;**letere-gg.github.io**&lt;/code&gt; 的仓库，在其 &lt;strong&gt;Settings -&amp;gt; Pages&lt;/strong&gt; 中，生成的 &lt;strong&gt;GitHub Pages&lt;/strong&gt; 网站 URL 是&lt;strong&gt;根域名&lt;/strong&gt; &lt;code&gt;**https://letere-gg.github.io**&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;(00:48-01:02) &lt;em&gt;&lt;strong&gt;2.2: 普通仓库的 URL&lt;/strong&gt;&lt;/em&gt;
视频接着展示了另一个名为 &lt;code&gt;**hugo-stack**&lt;/code&gt; 的仓库，在其 &lt;strong&gt;Settings -&amp;gt; Pages&lt;/strong&gt; 中，生成的 &lt;strong&gt;GitHub Pages&lt;/strong&gt; 网站 URL 带有&lt;strong&gt;仓库名称作为子路径&lt;/strong&gt;，即 &lt;code&gt;**https://letere-gg.github.io/hugo-stack**&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;(01:02-01:18) &lt;em&gt;&lt;strong&gt;2.3: 部署建议&lt;/strong&gt;&lt;/em&gt;
基于以上对比，视频&lt;strong&gt;建议首次部署时使用 &lt;code&gt;用户名.github.io&lt;/code&gt; 格式命名仓库&lt;/strong&gt;，这样生成的网站 URL &lt;strong&gt;不带子路径&lt;/strong&gt;，可以&lt;strong&gt;避免一些潜在的 bug&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;part3-设置新仓库与本地项目配置&#34;&gt;part3: 设置新仓库与本地项目配置
&lt;/h2&gt;&lt;p&gt;(01:21-01:35) &lt;em&gt;&lt;strong&gt;3.1: 创建示例仓库&lt;/strong&gt;&lt;/em&gt;
由于推荐的仓库名已被占用，视频演示创建了一个&lt;strong&gt;新的示例仓库&lt;/strong&gt;，命名为 &lt;code&gt;**hugo-dev**&lt;/code&gt;，并确保其设置为 &lt;strong&gt;Public&lt;/strong&gt;（公开），因为&lt;strong&gt;只有公开仓库才能部署 GitHub Pages 静态页面&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(01:35-01:46) &lt;em&gt;&lt;strong&gt;3.2: 准备上传代码&lt;/strong&gt;&lt;/em&gt;
仓库创建成功后，页面显示了用于&lt;strong&gt;上传代码的 Git 命令&lt;/strong&gt;。视频提到下一步是上传代码，但在此之前需要&lt;strong&gt;修改一个配置文件&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(01:46-02:16) &lt;em&gt;&lt;strong&gt;3.3: 修改 &lt;code&gt;hugo.yaml&lt;/code&gt; 文件&lt;/strong&gt;&lt;/em&gt;
视频打开本地项目中的 &lt;code&gt;**hugo.yaml**&lt;/code&gt; 文件，指出需要修改 &lt;code&gt;**baseURL**&lt;/code&gt; 配置项。将其值&lt;strong&gt;修改为&lt;/strong&gt;与 GitHub Pages 部署后&lt;strong&gt;期望的 URL 一致&lt;/strong&gt;。因为仓库名是 &lt;code&gt;hugo-dev&lt;/code&gt;，所以 &lt;code&gt;baseURL&lt;/code&gt; 被设置为 &lt;code&gt;**https://letere-gg.github.io/hugo-dev/**&lt;/code&gt;，&lt;strong&gt;必须包含&lt;/strong&gt;末尾的仓库名子路径。&lt;/p&gt;
&lt;h2 id=&#34;part4-生成静态网站并上传至-github&#34;&gt;part4: 生成静态网站并上传至 GitHub
&lt;/h2&gt;&lt;p&gt;(02:18-02:46) &lt;em&gt;&lt;strong&gt;4.1: 使用 Hugo 生成站点&lt;/strong&gt;&lt;/em&gt;
视频演示在本地项目文件夹中♈&lt;strong&gt;删除旧的 &lt;code&gt;public&lt;/code&gt; 文件夹&lt;/strong&gt;（如果存在）。然后在项目&lt;strong&gt;根目录&lt;/strong&gt;打开&lt;strong&gt;命令提示符 (cmd)&lt;/strong&gt;，♈运行 &lt;code&gt;**hugo -D**&lt;/code&gt; 命令。此命令使用 &lt;strong&gt;Hugo&lt;/strong&gt; &lt;strong&gt;编译&lt;/strong&gt;项目，并♈将生成的&lt;strong&gt;静态网站文件&lt;/strong&gt;输出到 &lt;code&gt;public&lt;/code&gt; 文件夹中。&lt;/p&gt;
&lt;p&gt;(02:46-03:18) &lt;em&gt;&lt;strong&gt;4.2: 初始化 Git 仓库&lt;/strong&gt;&lt;/em&gt;
♈进入新生成的 &lt;code&gt;public&lt;/code&gt; 文件夹，确认里面是&lt;strong&gt;静态网站内容&lt;/strong&gt;。在此 &lt;code&gt;public&lt;/code&gt; 文件夹内打开&lt;strong&gt;命令提示符 (cmd)&lt;/strong&gt;，并♈执行 &lt;code&gt;**git init**&lt;/code&gt; 命令，将其&lt;strong&gt;初始化为一个 Git 仓库&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(03:18-03:49) &lt;em&gt;&lt;strong&gt;4.3: 添加文件、提交并关联远程仓库&lt;/strong&gt;&lt;/em&gt;
♈按照 GitHub 页面提供的指南（略作修改）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;**git add .**&lt;/code&gt; 命令将 &lt;code&gt;public&lt;/code&gt; 文件夹内&lt;strong&gt;所有生成的静态文件&lt;/strong&gt;添加到暂存区（视频强调是 &lt;code&gt;.&lt;/code&gt; 而不是 &lt;code&gt;README.md&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;**git commit -m &amp;quot;first commit&amp;quot;**&lt;/code&gt; 提交更改。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;**git branch -M main**&lt;/code&gt; 将当前分支重命名为 &lt;code&gt;main&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;**git remote add origin https://github.com/letere-gg/hugo-dev.git**&lt;/code&gt; 关联到之前创建的&lt;strong&gt;远程 GitHub 仓库&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:49-04:08) &lt;em&gt;&lt;strong&gt;4.4: 推送代码到 GitHub&lt;/strong&gt;&lt;/em&gt;
♈执行 &lt;code&gt;**git push -u origin main**&lt;/code&gt; 命令，将本地 &lt;code&gt;main&lt;/code&gt; 分支的&lt;strong&gt;代码推送到 GitHub 远程仓库&lt;/strong&gt;。视频提到在国内环境可能需要&lt;strong&gt;开启代理&lt;/strong&gt;才能成功推送。推送完成后，&lt;strong&gt;刷新 GitHub 仓库页面&lt;/strong&gt;，可以看到&lt;strong&gt;静态文件已成功上传&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;part5-启用-github-pages-并验证部署&#34;&gt;part5: 启用 GitHub Pages 并验证部署
&lt;/h2&gt;&lt;p&gt;(04:09-04:23) &lt;em&gt;&lt;strong&gt;5.1: 配置 Pages 源&lt;/strong&gt;&lt;/em&gt;
返回 GitHub 上的 &lt;code&gt;hugo-dev&lt;/code&gt; 仓库页面，进入 &lt;strong&gt;Settings -&amp;gt; Pages&lt;/strong&gt; 选项卡。在 &amp;ldquo;Build and deployment&amp;rdquo; 部分下的 &amp;ldquo;Source&amp;rdquo; 设置中，选择 &lt;strong&gt;Deploy from a branch&lt;/strong&gt;，然后从 &amp;ldquo;Branch&amp;rdquo; 下拉菜单中选择 &lt;code&gt;**main**&lt;/code&gt; 分支，点击 &lt;strong&gt;Save&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(04:23-05:24) &lt;em&gt;&lt;strong&gt;5.2: 等待部署完成&lt;/strong&gt;&lt;/em&gt;
保存设置后，&lt;strong&gt;GitHub Pages 开始部署&lt;/strong&gt;过程。视频指出这&lt;strong&gt;需要一些时间&lt;/strong&gt;。等待页面刷新，直到显示 &amp;ldquo;Your site is live at &amp;hellip;&amp;rdquo; 并给出&lt;strong&gt;最终的网站 URL&lt;/strong&gt;：&lt;code&gt;**https://letere-gg.github.io/hugo-dev/**&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;(05:24-05:35) &lt;em&gt;&lt;strong&gt;5.3: 访问并验证站点&lt;/strong&gt;&lt;/em&gt;
点击页面上提供的&lt;strong&gt;网站链接&lt;/strong&gt;。浏览器成功加载了部署好的&lt;strong&gt;博客网站&lt;/strong&gt;，显示内容正常，证明&lt;strong&gt;部署已成功&lt;/strong&gt;。视频总结这个过程&lt;strong&gt;很简单&lt;/strong&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>hugo博客action代码部署：action代码解析</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/hugo%E5%8D%9A%E5%AE%A2action%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2action%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
        <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/hugo%E5%8D%9A%E5%AE%A2action%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2action%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</guid>
        <description>&lt;h1 id=&#34;hugo博客的action代码解析用aciton配置hugo博客的action代码&#34;&gt;Hugo博客的action代码：解析用aciton配置hugo博客的action代码
&lt;/h1&gt;&lt;p&gt;好的，这是视频中展示的、由社区贡献者 (peaceiris) 维护的用于通过 GitHub Actions 部署 Hugo 站点的 Actions 工作流 YAML 代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 工作流名称&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 触发工作流的事件&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;branches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 仅在 main 分支被推送时触发&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 定义工作流中的作业&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 定义一个名为 deploy 的作业&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 指定作业运行的环境为最新的 Ubuntu 系统&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 定义作业中的步骤&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 步骤1：检出代码&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Checkout&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 使用官方的 actions/checkout 动作来获取仓库代码&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 获取完整的 Git 历史记录（对于部署工具 peaceiris/actions-gh-pages 可能需要）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 0 表示获取所有历史，而不是默认的浅克隆（只获取最后一次提交）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fetch-depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 步骤2：设置 Hugo 环境&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Setup Hugo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 使用社区维护的 peaceiris/actions-hugo 动作来安装 Hugo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;peaceiris/actions-hugo@v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 指定要安装的 Hugo 版本为最新版&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hugo-version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 明确指定安装 Hugo 的 Extended 版本（支持 SASS/SCSS 等特性）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;extended&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 步骤3：构建网站&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Build Web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 运行 Hugo 命令来生成静态网站文件&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# -D 参数表示包含草稿内容（如果本地预览用过，这里保持一致，或按需移除）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hugo -D&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 步骤4：部署网站到 GitHub Pages&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deploy Web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 使用社区维护的 peaceiris/actions-gh-pages 动作来部署&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;peaceiris/actions-gh-pages@v4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 指定用于认证的 Personal Access Token (PAT)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ${{ secrets.TOKEN }} 会从仓库的 Secrets 中读取名为 TOKEN 的值&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# （视频中占位符是 你的token变量名，这里假设你设置为 TOKEN）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;PERSONAL_TOKEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ secrets.TOKEN }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 指定要将静态文件部署到的目标仓库&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 格式为：你的GitHub用户名/目标仓库名&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# （视频中占位符是 你的github名/你的仓库名，这里假设目标仓库是 letere-gz/hugo-dev）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;EXTERNAL_REPOSITORY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;letere-gz/hugo-dev&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 指定将静态文件推送到目标仓库的哪个分支（通常是 gh-pages 或 main）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;PUBLISH_BRANCH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 指定包含构建好的静态网站文件的目录（Hugo 默认生成到 public）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;PUBLISH_DIR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;./public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 自定义部署时 Git 提交的信息&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;commit_message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;auto deploy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;代码解释 (遵循托勒斯法则/Law of Demeter - 关注“做什么”而非“怎么做”的内部细节):&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;name: deploy&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 给这个自动化流程（工作流）起个名字，叫做 &lt;code&gt;deploy&lt;/code&gt;。这个名字会显示在 GitHub 仓库的 &amp;ldquo;Actions&amp;rdquo; 标签页里，方便你识别。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;托勒斯法则&lt;/strong&gt;: 你只需要知道这是流程的名字，不需要关心 GitHub 内部如何使用这个名字。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;on: push: branches: [main]&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 定义&lt;strong&gt;触发&lt;/strong&gt;这个自动化流程的&lt;strong&gt;条件&lt;/strong&gt;。这里设置的是：当你向 &lt;code&gt;main&lt;/code&gt; 这个分支&lt;strong&gt;推送 (push) 代码&lt;/strong&gt;时，这个流程就会&lt;strong&gt;自动开始运行&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;托勒斯法则&lt;/strong&gt;: 你只需要知道“推送到 main 分支”这个动作会启动流程，不需要关心 GitHub 是如何监控推送事件或分支的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;jobs: deploy:&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 定义这个流程中要执行的一个或多个&lt;strong&gt;任务组（作业）&lt;/strong&gt;。这里只有一个任务组，名字叫 &lt;code&gt;deploy&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;托勒斯法则&lt;/strong&gt;: 你只需要知道这里开始定义一个主要的工作单元，它包含了一系列要完成的步骤。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;runs-on: ubuntu-latest&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 指定 &lt;code&gt;deploy&lt;/code&gt; 这个任务组&lt;strong&gt;运行在什么样的虚拟环境&lt;/strong&gt;里。这里指定的是 &lt;code&gt;ubuntu-latest&lt;/code&gt;，意味着 GitHub 会提供一个最新的 &lt;strong&gt;Ubuntu Linux&lt;/strong&gt; 虚拟服务器来运行后续步骤。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;托勒斯法则&lt;/strong&gt;: 你只需要知道你的自动化步骤将在一个 Linux 环境中执行，不需要关心这个环境是如何创建和管理的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;steps:&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 定义 &lt;code&gt;deploy&lt;/code&gt; 作业中要&lt;strong&gt;按顺序执行&lt;/strong&gt;的&lt;strong&gt;具体步骤&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;- name: Checkout&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 给这个步骤起个名字，叫 &lt;code&gt;Checkout&lt;/code&gt;，方便在日志中查看。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;&lt;code&gt;uses: actions/checkout@v4&lt;/code&gt;&lt;/strong&gt;: &lt;strong&gt;使用&lt;/strong&gt;一个&lt;strong&gt;预先写好的、官方提供的“动作” (Action)&lt;/strong&gt;，叫做 &lt;code&gt;actions/checkout&lt;/code&gt; (版本是 v4)。♐这个动作的功能是**把你的仓库代码下载（检出）**到当前的虚拟运行环境中，以便后续步骤可以使用这些代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;with: fetch-depth: 0&lt;/code&gt;&lt;/strong&gt;: 这是给 &lt;code&gt;actions/checkout&lt;/code&gt; 动作传递的一个&lt;strong&gt;参数&lt;/strong&gt;。&lt;code&gt;fetch-depth: 0&lt;/code&gt; 的意思是&lt;strong&gt;下载完整的代码历史记录&lt;/strong&gt;，而不是默认只下载最近的一次提交。部署动作 &lt;code&gt;peaceiris/actions-gh-pages&lt;/code&gt; 有时需要完整的历史记录才能正确工作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;托勒斯法则&lt;/strong&gt;: 你只需要知道这个步骤会把你的代码准备好，并且需要完整的历史。你不需要知道 &lt;code&gt;checkout&lt;/code&gt; 动作内部是如何通过 Git 命令实现下载的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;- name: Setup Hugo&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 步骤名，设置 Hugo 环境。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;&lt;code&gt;uses: peaceiris/actions-hugo@v3&lt;/code&gt;&lt;/strong&gt;: &lt;strong&gt;使用&lt;/strong&gt;一个由&lt;strong&gt;社区开发者 (peaceiris) 维护的 Action&lt;/strong&gt;，叫做 &lt;code&gt;actions-hugo&lt;/code&gt; (版本是 v3)。这个动作专门用来&lt;strong&gt;安装和配置 Hugo&lt;/strong&gt;。
【♓这一步的作用是把能够执行 hugo 命令的那个程序安装好 ，因为♐即使你的项目文件上传到了仓库，也仍然需要安装 Hugo 包。你上传到仓库的是你博客的“原材料”（Markdown 文件、主题、配置），而不是制作网站的“工具”（即 Hugo 程序本身））。”
托勒斯法则: 你只需要知道，这一步负责获取你的博客源代码（包括你的 Markdown 文章、主题、配置文件等），并将它们准备好，以便后续步骤使用。它确实使用了你推送到仓库的文件，♈Action 运行环境是一个临时的、干净的 Linux 系统，它默认并没有安装 Hugo 这个“工具”】&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;with:&lt;/code&gt;&lt;/strong&gt;: 给 &lt;code&gt;actions-hugo&lt;/code&gt; 动作传递参数：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;hugo-version: &#39;latest&#39;&lt;/code&gt;&lt;/strong&gt;: 告诉动作要安装&lt;strong&gt;最新版本&lt;/strong&gt;的 Hugo。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;extended: true&lt;/code&gt;&lt;/strong&gt;: 告诉动作要安装 Hugo 的 &lt;strong&gt;Extended（扩展）版本&lt;/strong&gt;。这个版本支持 SASS/SCSS 等高级功能，很多主题需要它。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;托勒斯法则&lt;/strong&gt;: 你只需要知道这个步骤会自动安装好你需要的 Hugo 版本，不需要关心它具体从哪里下载、如何安装。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;- name: Build Web&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 步骤名，构建网站。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;run: hugo -D&lt;/code&gt;&lt;/strong&gt;: &lt;strong&gt;直接运行一条命令&lt;/strong&gt;：&lt;code&gt;hugo -D&lt;/code&gt;。这就是你在本地用来&lt;strong&gt;生成静态网站文件&lt;/strong&gt;的命令。它会读取你的 Hugo 项目文件，并把最终的网站文件（HTML, CSS, JS, 图片等）生成到默认的 &lt;code&gt;public&lt;/code&gt; 目录下。&lt;code&gt;-D&lt;/code&gt; 参数是包含标记为草稿 (draft) 的内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;托勒斯法则&lt;/strong&gt;: 你只需要知道这个步骤执行了 Hugo 的构建命令，并产出了 &lt;code&gt;public&lt;/code&gt; 文件夹，就像你在本地操作一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;- name: Deploy Web&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 步骤名，部署网站。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;uses: peaceiris/actions-gh-pages@v4&lt;/code&gt;&lt;/strong&gt;: &lt;strong&gt;使用&lt;/strong&gt;另一个由 &lt;strong&gt;peaceiris 维护的 Action&lt;/strong&gt;，叫做 &lt;code&gt;actions-gh-pages&lt;/code&gt; (版本是 v4)。这个动作专门用来&lt;strong&gt;将一个文件夹的内容推送到指定仓库的指定分支&lt;/strong&gt;，非常适合部署到 GitHub Pages。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;with:&lt;/code&gt;&lt;/strong&gt;: 给 &lt;code&gt;actions-gh-pages&lt;/code&gt; 动作传递部署所需的参数：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;PERSONAL_TOKEN: ${{ secrets.TOKEN }}&lt;/code&gt;&lt;/strong&gt;: &lt;strong&gt;提供认证凭证&lt;/strong&gt;。这个动作需要权限去推送代码到目标仓库。这里使用的是你之前创建并存储在仓库 &lt;strong&gt;Secrets&lt;/strong&gt; 中的 &lt;strong&gt;Personal Access Token (PAT)&lt;/strong&gt;。&lt;code&gt;secrets.TOKEN&lt;/code&gt; 表示去读取名为 &lt;code&gt;TOKEN&lt;/code&gt; 的那个 Secret 的值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;EXTERNAL_REPOSITORY: letere-gz/hugo-dev&lt;/code&gt;&lt;/strong&gt;: &lt;strong&gt;指定目标仓库&lt;/strong&gt;。告诉动作要把 &lt;code&gt;public&lt;/code&gt; 目录下的文件推送到 &lt;code&gt;letere-gz&lt;/code&gt; 这个用户（或组织）下的 &lt;code&gt;hugo-dev&lt;/code&gt; 仓库。&lt;strong&gt;你需要将 &lt;code&gt;letere-gz/hugo-dev&lt;/code&gt; 替换成你自己的 GitHub 用户名和用于托管 GitHub Pages 的仓库名&lt;/strong&gt; (例如 &lt;code&gt;your-username/your-username.github.io&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;PUBLISH_BRANCH: main&lt;/code&gt;&lt;/strong&gt;: &lt;strong&gt;指定目标分支&lt;/strong&gt;。告诉动作要把文件推送到目标仓库的 &lt;code&gt;main&lt;/code&gt; 分支。&lt;strong&gt;你需要根据你的 GitHub Pages 设置，将其修改为正确的目标分支&lt;/strong&gt; (常见的有 &lt;code&gt;gh-pages&lt;/code&gt; 或 &lt;code&gt;main&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;PUBLISH_DIR: ./public&lt;/code&gt;&lt;/strong&gt;: &lt;strong&gt;指定要部署的内容来源&lt;/strong&gt;。告诉动作需要推送的是当前目录下 &lt;code&gt;public&lt;/code&gt; 文件夹里的所有内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;commit_message: auto deploy&lt;/code&gt;&lt;/strong&gt;: &lt;strong&gt;设置部署时产生的 Git 提交信息&lt;/strong&gt;。每次部署都是一次 Git 提交，这里设置提交信息为 &amp;ldquo;auto deploy&amp;rdquo;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;托勒斯法则&lt;/strong&gt;: 你只需要知道这个步骤负责把 &lt;code&gt;public&lt;/code&gt; 目录的内容，使用你提供的 Token 认证后，推送到你指定的目标仓库和分支。你不需要关心它内部是如何进行 Git 操作和推送的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Author:&lt;br&gt;
URL: &lt;a class=&#34;link&#34; href=&#34;http://example.org/posts/hugo%E5%8D%9A%E5%AE%A2/action-%E4%BB%A3%E7%A0%81%E6%88%91%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%8D%E6%9D%A5%E7%9A%84%E4%B8%8D%E7%94%A8ai%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E9%9C%80%E8%A6%81steps%E5%AD%97%E6%AE%B5%E4%B8%8B%E7%9A%84users%E5%8F%82%E6%95%B0/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://example.org/posts/hugo%E5%8D%9A%E5%AE%A2/action-%E4%BB%A3%E7%A0%81%E6%88%91%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%8D%E6%9D%A5%E7%9A%84%E4%B8%8D%E7%94%A8ai%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E9%9C%80%E8%A6%81steps%E5%AD%97%E6%AE%B5%E4%B8%8B%E7%9A%84users%E5%8F%82%E6%95%B0/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>hugo博客action代码部署：hugo博客的action代码本体</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/hugo%E5%8D%9A%E5%AE%A2action%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2%E7%9A%84action%E4%BB%A3%E7%A0%81%E6%9C%AC%E4%BD%93/</link>
        <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/hugo%E5%8D%9A%E5%AE%A2action%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2%E7%9A%84action%E4%BB%A3%E7%A0%81%E6%9C%AC%E4%BD%93/</guid>
        <description>&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 工作流名称&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 触发工作流的事件&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;branches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 仅在 main 分支被推送时触发&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 定义工作流中的作业&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 定义一个名为 deploy 的作业&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 指定作业运行的环境为最新的 Ubuntu 系统&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 定义作业中的步骤&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 步骤1：检出代码&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Checkout&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 使用官方的 actions/checkout 动作来获取仓库代码&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 获取完整的 Git 历史记录（对于部署工具 peaceiris/actions-gh-pages 可能需要）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 0 表示获取所有历史，而不是默认的浅克隆（只获取最后一次提交）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fetch-depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 步骤2：设置 Hugo 环境&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Setup Hugo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 使用社区维护的 peaceiris/actions-hugo 动作来安装 Hugo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;peaceiris/actions-hugo@v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 指定要安装的 Hugo 版本为最新版&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hugo-version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 明确指定安装 Hugo 的 Extended 版本（支持 SASS/SCSS 等特性）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;extended&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 步骤3：构建网站&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Build Web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 运行 Hugo 命令来生成静态网站文件&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# -D 参数表示包含草稿内容（如果本地预览用过，这里保持一致，或按需移除）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hugo -D&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 步骤4：部署网站到 GitHub Pages&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deploy Web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 使用社区维护的 peaceiris/actions-gh-pages 动作来部署&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;peaceiris/actions-gh-pages@v4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 指定用于认证的 Personal Access Token (PAT)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ${{ secrets.TOKEN }} 会从仓库的 Secrets 中读取名为 TOKEN 的值&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# （视频中占位符是 你的token变量名，这里假设你设置为 TOKEN）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;PERSONAL_TOKEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ secrets.TOKEN }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 指定要将静态文件部署到的目标仓库&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 格式为：你的GitHub用户名/目标仓库名&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# （视频中占位符是 你的github名/你的仓库名，这里假设目标仓库是 letere-gz/hugo-dev）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;EXTERNAL_REPOSITORY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;letere-gz/hugo-dev&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 指定将静态文件推送到目标仓库的哪个分支（通常是 gh-pages 或 main）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;PUBLISH_BRANCH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 指定包含构建好的静态网站文件的目录（Hugo 默认生成到 public）&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;PUBLISH_DIR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;./public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 自定义部署时 Git 提交的信息&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;commit_message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;auto deploy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>使用github-action自动部署hugo博客到“page”仓库</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E4%BD%BF%E7%94%A8github-action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2%E5%88%B0page%E4%BB%93%E5%BA%93/</link>
        <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E4%BD%BF%E7%94%A8github-action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2%E5%88%B0page%E4%BB%93%E5%BA%93/</guid>
        <description>&lt;h1 id=&#34;part1-介绍-github-action-自动化部署-hugo-博客&#34;&gt;part1: 介绍 GitHub Action 自动化部署 Hugo 博客
&lt;/h1&gt;&lt;p&gt;(00:00-00:09) &lt;em&gt;&lt;strong&gt;1.1: 介绍目标&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视频开篇展示了一个本地运行的 &lt;strong&gt;Hugo&lt;/strong&gt; 博客 (&lt;code&gt;localhost:1313&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;目标是向大家介绍如何通过 &lt;strong&gt;GitHub&lt;/strong&gt; 的 &lt;strong&gt;GitHub Actions&lt;/strong&gt; 功能来&lt;strong&gt;自动部署&lt;/strong&gt;博客。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(00:09-00:32) &lt;em&gt;&lt;strong&gt;1.2: 手动部署痛点与自动化优势&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;♈指出传统方式下，每次修改完文件后，都需要&lt;strong&gt;手动将生成&lt;/strong&gt;的 &lt;code&gt;public&lt;/code&gt; 文件夹&lt;strong&gt;上传&lt;/strong&gt;到服务器或托管平台，这个过程比较&lt;strong&gt;麻烦&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♈使用 &lt;strong&gt;GitHub Actions&lt;/strong&gt; 可以实现&lt;strong&gt;自动化&lt;/strong&gt;：&lt;strong&gt;自动&lt;/strong&gt;帮我们&lt;strong&gt;生成&lt;/strong&gt; &lt;code&gt;public&lt;/code&gt; 目录，并将其&lt;strong&gt;部署&lt;/strong&gt;到&lt;strong&gt;静态页面网站&lt;/strong&gt;（如 GitHub Pages）。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;优点&lt;/strong&gt;：只需&lt;strong&gt;提交代码&lt;/strong&gt; (&lt;code&gt;git push&lt;/code&gt;)，后续的&lt;strong&gt;构建&lt;/strong&gt;和&lt;strong&gt;部署&lt;/strong&gt;过程就能&lt;strong&gt;自动完成&lt;/strong&gt;，&lt;strong&gt;方便&lt;/strong&gt;很多。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part2-创建-github-仓库并推送-hugo-源码&#34;&gt;part2: 创建 GitHub 仓库并推送 Hugo 源码
&lt;/h1&gt;&lt;p&gt;(00:32-00:41) &lt;em&gt;&lt;strong&gt;2.1: 创建仓库准备&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要实现自动化部署，首先需要一个 &lt;strong&gt;GitHub 仓库&lt;/strong&gt;来存放 &lt;strong&gt;Hugo&lt;/strong&gt; 项目的&lt;strong&gt;主文件&lt;/strong&gt;（源代码）。&lt;/li&gt;
&lt;li&gt;操作：导航到 &lt;strong&gt;GitHub&lt;/strong&gt; 网站，准备&lt;strong&gt;创建&lt;/strong&gt;一个新的仓库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(00:41-01:12) &lt;em&gt;&lt;strong&gt;2.2: 创建私有仓库&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 GitHub 创建新仓库页面（经历短暂的网络卡顿后），设置仓库信息：
&lt;ul&gt;
&lt;li&gt;仓库名：&lt;code&gt;hugo-main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可见性：&lt;strong&gt;建议&lt;/strong&gt;选择&lt;strong&gt;私有（Private）&lt;/strong&gt;，因为源代码一般不需要公开。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作：点击 &lt;code&gt;Create repository&lt;/code&gt; 完成创建。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(01:12-01:24) &lt;em&gt;&lt;strong&gt;2.3: 上传文件准备&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仓库创建完成后，需要将本地的 &lt;strong&gt;Hugo&lt;/strong&gt; 项目文件&lt;strong&gt;上传&lt;/strong&gt;到这个新仓库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键点&lt;/strong&gt;：上传前需要注意&lt;strong&gt;忽略&lt;/strong&gt;掉一些不需要版本控制的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(01:24-02:04) &lt;em&gt;&lt;strong&gt;2.4: 配置 .gitignore 忽略生成文件&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;：&lt;strong&gt;Hugo&lt;/strong&gt; 项目中的某些文件/目录是&lt;strong&gt;自动生成的&lt;/strong&gt;，&lt;strong&gt;不应该&lt;/strong&gt;提交到源代码仓库，包括：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public/&lt;/code&gt;：&lt;strong&gt;Hugo&lt;/strong&gt; 生成的静态网站文件目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resources/&lt;/code&gt;：&lt;strong&gt;Hugo&lt;/strong&gt; 处理后的资源缓存目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hugo.build.lock&lt;/code&gt;：构建锁文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hugo.exe&lt;/code&gt;：（如果在 Windows 下）&lt;strong&gt;Hugo&lt;/strong&gt; 可执行文件本身。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;♈ &lt;strong&gt;操作&lt;/strong&gt;：在本地 Hugo 项目根目录下，&lt;strong&gt;创建&lt;/strong&gt;一个名为 &lt;code&gt;.gitignore&lt;/code&gt; 的文件。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;操作&lt;/strong&gt;：编辑 &lt;code&gt;.gitignore&lt;/code&gt; 文件，将上述需要忽略的文件名或目录名（如 &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;resources&lt;/code&gt;, &lt;code&gt;hugo.build.lock&lt;/code&gt;, &lt;code&gt;hugo.exe&lt;/code&gt;）添加进去，每行一个。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;目的&lt;/strong&gt;：&lt;strong&gt;保证&lt;/strong&gt;上传到 &lt;strong&gt;GitHub&lt;/strong&gt; 的是&lt;strong&gt;最干净、最原始&lt;/strong&gt;的 Hugo 项目文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:04-03:10) &lt;em&gt;&lt;strong&gt;2.5: Git 推送操作&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：在本地 Hugo 项目目录下打开&lt;strong&gt;命令行终端 (cmd)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;操作&lt;/strong&gt;：执行一系列 **Git 命令（仓库首页有）**来初始化仓库、添加文件并推送到远程 &lt;strong&gt;GitHub&lt;/strong&gt; 仓库：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;：&lt;strong&gt;初始化&lt;/strong&gt;本地 Git 仓库。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add .&lt;/code&gt;：&lt;strong&gt;添加&lt;/strong&gt;所有文件到暂存区（&lt;code&gt;.gitignore&lt;/code&gt; 会生效，忽略指定文件）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m &amp;quot;first commit&amp;quot;&lt;/code&gt;：&lt;strong&gt;提交&lt;/strong&gt;更改。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -M main&lt;/code&gt;：&lt;strong&gt;重命名&lt;/strong&gt;当前分支为 &lt;code&gt;main&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote add origin https://github.com/letere-gz/hugo-main.git&lt;/code&gt;：&lt;strong&gt;关联&lt;/strong&gt;远程仓库地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u origin main&lt;/code&gt;：&lt;strong&gt;推送&lt;/strong&gt;本地 &lt;code&gt;main&lt;/code&gt; 分支到远程仓库。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证&lt;/strong&gt;：切换到 &lt;strong&gt;GitHub&lt;/strong&gt; 仓库页面刷新，确认项目文件已上传，且 &lt;code&gt;.gitignore&lt;/code&gt; 中指定的文件（如 &lt;code&gt;public&lt;/code&gt;）&lt;strong&gt;未被上传&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part3-配置-github-actions-workflow&#34;&gt;part3: 配置 GitHub Actions Workflow
&lt;/h1&gt;&lt;p&gt;(03:10-03:59) &lt;em&gt;&lt;strong&gt;3.1: 参考官方与民间方案&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提及&lt;/strong&gt;：作者自己的博客 (&lt;code&gt;letere-gz.github.io/hugo-stack/&lt;/code&gt;) 提供了关于 &lt;strong&gt;Hugo + GitHub&lt;/strong&gt; 免费部署的教程文章。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;参考&lt;/strong&gt;：查看 &lt;strong&gt;Hugo 官方文档&lt;/strong&gt; (&lt;code&gt;gohugo.io&lt;/code&gt;) 中关于 &lt;code&gt;Hosting and deployment&lt;/code&gt; -&amp;gt; &lt;code&gt;Host on GitHub Pages&lt;/code&gt; 的部分。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发现&lt;/strong&gt;：官方文档提供了一个使用 &lt;strong&gt;GitHub Actions&lt;/strong&gt; 部署的 &lt;strong&gt;workflow&lt;/strong&gt; 示例（&lt;code&gt;Step 6&lt;/code&gt; 中的 &lt;code&gt;hugo.yml&lt;/code&gt; 文件内容）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;评价&lt;/strong&gt;：作者认为官方提供的 &lt;strong&gt;workflow&lt;/strong&gt; 文件内容&lt;strong&gt;很长&lt;/strong&gt;，配置起来可能有点&lt;strong&gt;麻烦&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:59-04:13) &lt;em&gt;&lt;strong&gt;3.2: 引入简化版 Workflow&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;建议&lt;/strong&gt;：作者推荐使用一个&lt;strong&gt;民间大佬（peaceiris）&lt;strong&gt;编写和维护的&lt;/strong&gt;简化版&lt;/strong&gt;的 &lt;strong&gt;GitHub Actions workflow&lt;/strong&gt; 配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;来源&lt;/strong&gt;：该简化配置可以在作者的教程文章中找到（或者直接参考 &lt;code&gt;peaceiris/actions-hugo&lt;/code&gt; 和 &lt;code&gt;peaceiris/actions-gh-pages&lt;/code&gt; 这两个 Action）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优势&lt;/strong&gt;：相比官方示例，这个版本&lt;strong&gt;更简洁、更方便&lt;/strong&gt;使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:13-06:15) &lt;em&gt;&lt;strong&gt;3.3: 解析简化版 Workflow 配置&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;展示&lt;/strong&gt;：作者展示了其教程文章中的&lt;strong&gt;简化版 workflow YAML 文件&lt;/strong&gt;内容，并逐段解释其含义：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name: deploy&lt;/code&gt;: 定义 &lt;strong&gt;Workflow 的名称&lt;/strong&gt;，显示在 Actions 列表里。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on: push: branches: [ main ]&lt;/code&gt;: 设置&lt;strong&gt;触发条件&lt;/strong&gt;，当代码被 &lt;code&gt;push&lt;/code&gt; 到 &lt;code&gt;main&lt;/code&gt; 分支时，自动执行此 workflow。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jobs: deploy:&lt;/code&gt;: 定义一个名为 &lt;code&gt;deploy&lt;/code&gt; 的&lt;strong&gt;作业 (job)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♈ &lt;code&gt;runs-on: ubuntu-latest&lt;/code&gt;: 指定该作业运行在 &lt;strong&gt;GitHub&lt;/strong&gt; 提供的最新版 &lt;strong&gt;Ubuntu&lt;/strong&gt; 虚拟环境上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;steps:&lt;/code&gt;: 定义该作业包含的一系列&lt;strong&gt;步骤 (step)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;- name: Checkout&lt;/code&gt;: 步骤名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uses: actions/checkout@v4&lt;/code&gt;: 使用官方提供的 &lt;code&gt;checkout&lt;/code&gt; &lt;strong&gt;Action&lt;/strong&gt;，将&lt;strong&gt;仓库代码&lt;/strong&gt;下载到运行环境中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with: fetch-depth: 0&lt;/code&gt;: &lt;strong&gt;获取&lt;/strong&gt;完整的 Git 历史记录（对于 Hugo 可能需要）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;- name: Setup Hugo&lt;/code&gt;: 步骤名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uses: peaceiris/actions-hugo@v3&lt;/code&gt;: 使用 &lt;code&gt;peaceiris&lt;/code&gt; 提供的 &lt;code&gt;actions-hugo&lt;/code&gt; &lt;strong&gt;Action&lt;/strong&gt; 来&lt;strong&gt;安装和设置 Hugo 环境&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with: hugo-version: &#39;latest&#39;, extended: true&lt;/code&gt;: 配置 &lt;code&gt;actions-hugo&lt;/code&gt;，指定安装&lt;strong&gt;最新 (latest)&lt;/strong&gt; 版本的 Hugo，并且是&lt;strong&gt;扩展 (extended)&lt;/strong&gt; 版本（支持 Sass/SCSS）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;- name: Build Web&lt;/code&gt;: 步骤名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run: hugo -D&lt;/code&gt;: &lt;strong&gt;执行 Hugo 命令&lt;/strong&gt; (&lt;code&gt;hugo&lt;/code&gt; 默认会构建，&lt;code&gt;-D&lt;/code&gt; 表示包含草稿内容，但在部署时通常不需要 &lt;code&gt;-D&lt;/code&gt;，作者这里可能写错了，通常只用 &lt;code&gt;hugo&lt;/code&gt;)，&lt;strong&gt;生成静态网站文件&lt;/strong&gt;到 &lt;code&gt;public&lt;/code&gt; 目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;- name: Deploy Web&lt;/code&gt;: 步骤名称。&lt;/li&gt;
&lt;li&gt;♈ &lt;code&gt;uses: peaceiris/actions-gh-pages@v4&lt;/code&gt;: 使用 &lt;code&gt;peaceiris&lt;/code&gt; 提供的 &lt;code&gt;actions-gh-pages&lt;/code&gt; &lt;strong&gt;Action&lt;/strong&gt;，将构建好的网站&lt;strong&gt;部署到 GitHub Pages&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with:&lt;/code&gt;: 配置 &lt;code&gt;actions-gh-pages&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PERSONAL_TOKEN: ${{ secrets.你的token变量名 }}&lt;/code&gt;: &lt;strong&gt;关键配置&lt;/strong&gt;，用于&lt;strong&gt;授权&lt;/strong&gt; Action 推送代码到目标仓库。需要一个&lt;strong&gt;个人访问令牌 (PAT)&lt;/strong&gt;，并将其存储为仓库的 &lt;strong&gt;Secret&lt;/strong&gt;。&lt;code&gt;你的token变量名&lt;/code&gt; 需要替换成实际设置的 &lt;strong&gt;Secret 名称&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXTERNAL_REPOSITORY: 你的github名/你的仓库名&lt;/code&gt;: &lt;strong&gt;关键配置&lt;/strong&gt;，指定&lt;strong&gt;目标仓库&lt;/strong&gt;，即用来&lt;strong&gt;托管 GitHub Pages 的仓库地址&lt;/strong&gt;（例如 &lt;code&gt;letere-gz/hugo-dev&lt;/code&gt;），&lt;strong&gt;必须修改&lt;/strong&gt;为用户自己的 Pages 仓库。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUBLISH_BRANCH: main&lt;/code&gt;: 指定将 &lt;code&gt;public&lt;/code&gt; 目录的内容推送到&lt;strong&gt;目标仓库&lt;/strong&gt;的哪个&lt;strong&gt;分支&lt;/strong&gt;（通常是 &lt;code&gt;gh-pages&lt;/code&gt; 或 &lt;code&gt;main&lt;/code&gt;，取决于 Pages 设置）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUBLISH_DIR: ./public&lt;/code&gt;: 指定要&lt;strong&gt;发布&lt;/strong&gt;的&lt;strong&gt;目录&lt;/strong&gt;，即 Hugo 构建生成的 &lt;code&gt;public&lt;/code&gt; 目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commit_message: auto deploy&lt;/code&gt;: &lt;strong&gt;自动部署&lt;/strong&gt;时 Git 提交的&lt;strong&gt;消息&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part4-创建和配置-personal-access-token-pat&#34;&gt;part4: 创建和配置 Personal Access Token (PAT)
&lt;/h1&gt;&lt;p&gt;(06:15-06:49) &lt;em&gt;&lt;strong&gt;4.1: Token 的作用与必要性&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;重申&lt;/strong&gt;：Workflow 中的 &lt;code&gt;PERSONAL_TOKEN&lt;/code&gt; 参数需要填入一个&lt;strong&gt;个人访问令牌 (PAT)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：这个 Token 用于&lt;strong&gt;身份验证&lt;/strong&gt;，使得 &lt;strong&gt;GitHub Actions&lt;/strong&gt; 有权限将构建好的静态文件推送到&lt;strong&gt;目标 GitHub Pages 仓库&lt;/strong&gt;。没有它，推送会因权限不足而失败。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作准备&lt;/strong&gt;：接下来演示如何生成这个 Token。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:49-08:09) &lt;em&gt;&lt;strong&gt;4.2: 生成 Personal Access Token (Classic)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作路径&lt;/strong&gt;：在 &lt;strong&gt;GitHub&lt;/strong&gt; 页面，点击右上角个人头像 -&amp;gt; &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; 左侧菜单滚动到底部找到 &lt;code&gt;Developer settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Personal access tokens&lt;/code&gt; -&amp;gt; &lt;code&gt;Tokens (classic)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：点击 &lt;code&gt;Generate new token&lt;/code&gt; 按钮，选择 &lt;code&gt;Generate new token (classic)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置 Token&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Note&lt;/code&gt;：给 Token 起一个&lt;strong&gt;描述性名称&lt;/strong&gt;，例如 “用作部署”。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Expiration&lt;/code&gt;：设置&lt;strong&gt;过期时间&lt;/strong&gt;。作者&lt;strong&gt;建议选择 &lt;code&gt;No expiration&lt;/code&gt;（永不过期）&lt;/strong&gt;，理由是避免定期更新 Token 的麻烦。&lt;strong&gt;但也提示&lt;/strong&gt; GitHub 出于&lt;strong&gt;安全&lt;/strong&gt;考虑&lt;strong&gt;建议&lt;/strong&gt;设置过期时间。对于个人私有仓库，作者认为永不过期问题不大。
♈*   &lt;code&gt;Select scopes&lt;/code&gt;：选择 Token 的&lt;strong&gt;权限范围&lt;/strong&gt;。&lt;strong&gt;必须勾选&lt;/strong&gt;以下两项：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;repo&lt;/code&gt;：授予对仓库的完全控制权（包括推送）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;workflow&lt;/code&gt;：授予更新 GitHub Actions workflow 的权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成&lt;/strong&gt;：点击页面底部的 &lt;code&gt;Generate token&lt;/code&gt; 按钮。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:09-08:41) &lt;em&gt;&lt;strong&gt;4.3: 保存 Token&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;♈ &lt;strong&gt;重要提示&lt;/strong&gt;：Token 生成后，&lt;strong&gt;完整的 Token 字符串&lt;/strong&gt;只会&lt;strong&gt;显示这一次&lt;/strong&gt;。&lt;strong&gt;必须立即复制&lt;/strong&gt; (&lt;code&gt;Copy&lt;/code&gt; 按钮) 并将其&lt;strong&gt;保存&lt;/strong&gt;在安全的地方（例如，作者将其粘贴到了本地的记事本文件中）。如果关闭或刷新页面，将&lt;strong&gt;无法再次查看&lt;/strong&gt;完整的 Token。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:41-10:19) &lt;em&gt;&lt;strong&gt;4.4: 配置 Repository Secret&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;♈ &lt;strong&gt;目的&lt;/strong&gt;：将生成的 Token 安全地提供给 &lt;strong&gt;GitHub Actions workflow&lt;/strong&gt; 使用。&lt;strong&gt;不应该&lt;/strong&gt;直接将 Token 字符串写入 YAML 文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作路径&lt;/strong&gt;：回到&lt;strong&gt;存放 Hugo 源代码&lt;/strong&gt;的仓库（即 &lt;code&gt;hugo-main&lt;/code&gt;），进入该仓库的 &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; 左侧菜单 &lt;code&gt;Security&lt;/code&gt; 下的 &lt;code&gt;Secrets and variables&lt;/code&gt; -&amp;gt; &lt;code&gt;Actions&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;操作&lt;/strong&gt;：点击 &lt;code&gt;New repository secret&lt;/code&gt; 按钮。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置 Secret&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name&lt;/code&gt;：输入 &lt;strong&gt;Secret 的名称&lt;/strong&gt;。这个名称&lt;strong&gt;必须&lt;/strong&gt;与 workflow YAML 文件中 &lt;code&gt;secrets.&lt;/code&gt; 后面引用的名称&lt;strong&gt;完全一致&lt;/strong&gt;。作者在这里将其命名为 &lt;code&gt;TOKEN&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Secret&lt;/code&gt;：将刚才&lt;strong&gt;复制并保存&lt;/strong&gt;的&lt;strong&gt;完整 Token 字符串&lt;/strong&gt;粘贴到这里。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保存&lt;/strong&gt;：点击 &lt;code&gt;Add secret&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;优点&lt;/strong&gt;：使用 &lt;strong&gt;Secrets&lt;/strong&gt; 可以&lt;strong&gt;隐藏&lt;/strong&gt;敏感信息，workflow 运行时会安全地注入该值，比硬编码在代码中&lt;strong&gt;安全&lt;/strong&gt;得多。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part5-演示自动化部署流程&#34;&gt;part5: 演示自动化部署流程
&lt;/h1&gt;&lt;p&gt;(10:19-10:31) &lt;em&gt;&lt;strong&gt;5.1: 准备 workflow 文件&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：回到本地的 Hugo 项目目录（&lt;code&gt;dev&lt;/code&gt; 目录）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;下一步&lt;/strong&gt;：需要将包含 workflow 配置的 YAML 文件添加到项目中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(10:31-11:29) &lt;em&gt;&lt;strong&gt;5.2: 创建并编辑 workflow 文件&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;♈&lt;strong&gt;操作&lt;/strong&gt;：在本地 Hugo 项目根目录下，&lt;strong&gt;创建&lt;/strong&gt; &lt;code&gt;.github&lt;/code&gt; 文件夹，然后在 &lt;code&gt;.github&lt;/code&gt; 文件夹内&lt;strong&gt;创建&lt;/strong&gt; &lt;code&gt;workflows&lt;/code&gt; 文件夹。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;操作&lt;/strong&gt;：在 &lt;code&gt;workflows&lt;/code&gt; 文件夹中，&lt;strong&gt;新建&lt;/strong&gt;一个 &lt;strong&gt;YAML 文件&lt;/strong&gt;，作者将其命名为 &lt;code&gt;hugo_deploy.yaml&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;操作&lt;/strong&gt;：使用文本编辑器打开 &lt;code&gt;hugo_deploy.yaml&lt;/code&gt; 文件，将之前从教程文章中&lt;strong&gt;复制&lt;/strong&gt;的&lt;strong&gt;简化版 workflow&lt;/strong&gt; 内容&lt;strong&gt;粘贴&lt;/strong&gt;进去。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(11:29-11:57) &lt;em&gt;&lt;strong&gt;5.3: 修改 workflow 文件参数&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：在粘贴好的 workflow 内容中，&lt;strong&gt;修改&lt;/strong&gt;两个关键的 &lt;code&gt;with&lt;/code&gt; 参数：
&lt;ul&gt;
&lt;li&gt;♈将 &lt;code&gt;PERSONAL_TOKEN: ${{ secrets.你的token变量名 }}&lt;/code&gt; 修改为 &lt;code&gt;PERSONAL_TOKEN: ${{ secrets.TOKEN }}&lt;/code&gt;，确保 &lt;code&gt;TOKEN&lt;/code&gt; 与上一步创建的 &lt;strong&gt;Repository Secret 名称&lt;/strong&gt;一致。&lt;/li&gt;
&lt;li&gt;♈ 将 &lt;code&gt;EXTERNAL_REPOSITORY: 你的github名/你的仓库名&lt;/code&gt; 修改为&lt;strong&gt;实际的 GitHub Pages 目标仓库地址&lt;/strong&gt;，作者修改为 &lt;code&gt;letere-gz/hugo-dev&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保存&lt;/strong&gt;：保存对 &lt;code&gt;hugo_deploy.yaml&lt;/code&gt; 文件的修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(11:57-12:47) &lt;em&gt;&lt;strong&gt;5.4: 创建新文章验证部署&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：为了验证&lt;strong&gt;推送到 &lt;code&gt;main&lt;/code&gt; 分支&lt;/strong&gt;是否能&lt;strong&gt;自动触发部署&lt;/strong&gt;，需要对项目做一些更改，例如&lt;strong&gt;添加一篇新文章&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现状&lt;/strong&gt;：先查看本地 (&lt;code&gt;localhost:1313&lt;/code&gt;) 运行的博客，确认当前的文章列表（只有一个 &amp;ldquo;Chinese Test&amp;rdquo;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(12:47-13:22) &lt;em&gt;&lt;strong&gt;5.5: 本地新增文章&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：在命令行中，执行 &lt;code&gt;hugo new content post/newnewnew/index.md&lt;/code&gt; 命令，在 &lt;code&gt;content/post&lt;/code&gt; 目录下创建一个名为 &lt;code&gt;newnewnew&lt;/code&gt; 的子目录，并在其中生成 &lt;code&gt;index.md&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：再次执行 &lt;code&gt;hugo server -D&lt;/code&gt; 启动本地服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证&lt;/strong&gt;：访问 &lt;code&gt;localhost:1313&lt;/code&gt;，确认名为 &lt;code&gt;Newnewnew&lt;/code&gt; 的新文章已成功创建并显示在本地博客首页。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(13:22-14:03) &lt;em&gt;&lt;strong&gt;5.6: 推送更改触发 Action&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：在命令行中按 &lt;code&gt;Ctrl+C&lt;/code&gt; &lt;strong&gt;停止&lt;/strong&gt;本地 &lt;code&gt;hugo server&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：执行 &lt;strong&gt;Git 命令&lt;/strong&gt;将更改推送到远程仓库：
♈*   &lt;code&gt;git add .&lt;/code&gt;：&lt;strong&gt;添加&lt;/strong&gt;所有更改（包括新文章 &lt;code&gt;.md&lt;/code&gt; 文件和 &lt;code&gt;.github/workflows/hugo_deploy.yaml&lt;/code&gt; 文件）。
♈*   &lt;code&gt;git commit -m &amp;quot;update&amp;quot;&lt;/code&gt;：&lt;strong&gt;提交&lt;/strong&gt;更改，提交信息为 &amp;ldquo;update&amp;rdquo;。
♈*   &lt;code&gt;git push&lt;/code&gt;：&lt;strong&gt;推送&lt;/strong&gt;本地 &lt;code&gt;main&lt;/code&gt; 分支的提交到 &lt;strong&gt;GitHub&lt;/strong&gt; 上的 &lt;code&gt;hugo-main&lt;/code&gt; 仓库。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part6-验证自动化部署结果与总结&#34;&gt;part6: 验证自动化部署结果与总结
&lt;/h1&gt;&lt;p&gt;(14:03-14:29) &lt;em&gt;&lt;strong&gt;6.1: 观察 Action 执行&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：切换回 &lt;strong&gt;GitHub&lt;/strong&gt; 网站，进入 &lt;code&gt;hugo-main&lt;/code&gt; 仓库的 &lt;code&gt;Actions&lt;/code&gt; 标签页。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;观察&lt;/strong&gt;：可以看到一个由刚才的 &lt;code&gt;push&lt;/code&gt; 事件触发的名为 &lt;code&gt;update&lt;/code&gt;（commit 信息）的 &lt;strong&gt;workflow run&lt;/strong&gt; 正在执行（黄色图标，&lt;code&gt;in progress&lt;/code&gt;）或者已经执行完毕（绿色勾，&lt;code&gt;Success&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查&lt;/strong&gt;：点击该 workflow run，可以查看名为 &lt;code&gt;deploy&lt;/code&gt; 的 job，再点击进去可以看到详细的&lt;strong&gt;执行步骤和日志&lt;/strong&gt;，确认 &lt;code&gt;Checkout&lt;/code&gt;, &lt;code&gt;Setup Hugo&lt;/code&gt;, &lt;code&gt;Build Web&lt;/code&gt;, &lt;code&gt;Deploy Web&lt;/code&gt; 等步骤均已&lt;strong&gt;成功完成&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(14:29-14:53) &lt;em&gt;&lt;strong&gt;6.2: 验证部署结果（首次刷新）&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：打开或刷新用于 &lt;strong&gt;GitHub Pages&lt;/strong&gt; 托管的&lt;strong&gt;目标网站&lt;/strong&gt;（作者的是 &lt;code&gt;https://letere-gz.github.io/hugo-dev/&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发现&lt;/strong&gt;：&lt;strong&gt;第一次刷新&lt;/strong&gt;时，页面上可能&lt;strong&gt;仍然没有&lt;/strong&gt;显示新添加的文章 &lt;code&gt;Newnewnew&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原因&lt;/strong&gt;：&lt;strong&gt;GitHub Pages&lt;/strong&gt; 的部署和 &lt;strong&gt;CDN 的缓存更新&lt;/strong&gt;通常会有一定的&lt;strong&gt;延迟&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(14:53-15:10) &lt;em&gt;&lt;strong&gt;6.3: 验证部署结果（成功显示）&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：&lt;strong&gt;再次刷新&lt;/strong&gt; GitHub Pages 网站页面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：新添加的文章 &lt;code&gt;Newnewnew&lt;/code&gt; &lt;strong&gt;成功出现在了&lt;/strong&gt;部署后的网站首页上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结论&lt;/strong&gt;：这表明 &lt;strong&gt;GitHub Actions&lt;/strong&gt; 已经成功地&lt;strong&gt;自动拉取&lt;/strong&gt;了 &lt;code&gt;hugo-main&lt;/code&gt; 仓库的最新代码，使用 &lt;strong&gt;Hugo&lt;/strong&gt; 进行了&lt;strong&gt;构建&lt;/strong&gt;，并将生成的 &lt;code&gt;public&lt;/code&gt; 目录内容&lt;strong&gt;推送并部署&lt;/strong&gt;到了 &lt;code&gt;hugo-dev&lt;/code&gt; 这个 &lt;strong&gt;GitHub Pages&lt;/strong&gt; 仓库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(15:10-15:40) &lt;em&gt;&lt;strong&gt;6.4: 总结与结束&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;总结&lt;/strong&gt;：通过以上设置，现在实现了&lt;strong&gt;自动化部署流程&lt;/strong&gt;。开发者只需专注于&lt;strong&gt;编写文章&lt;/strong&gt; (&lt;code&gt;.md&lt;/code&gt; 文件)，完成后执行 &lt;code&gt;git push&lt;/code&gt; 将代码推送到源仓库 (&lt;code&gt;hugo-main&lt;/code&gt;)。&lt;strong&gt;GitHub Actions&lt;/strong&gt; 就会&lt;strong&gt;自动接管&lt;/strong&gt;后续的&lt;strong&gt;构建和部署&lt;/strong&gt;工作，&lt;strong&gt;无需再手动&lt;/strong&gt;处理 &lt;code&gt;public&lt;/code&gt; 目录的生成和上传。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;评价&lt;/strong&gt;：整个过程变得非常&lt;strong&gt;方便和省心&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>搭建本地hugo博客</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0hugo%E5%8D%9A%E5%AE%A2/</link>
        <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0hugo%E5%8D%9A%E5%AE%A2/</guid>
        <description>&lt;h1 id=&#34;part1-hugo--github-免费部署自己的博客介绍&#34;&gt;part1: Hugo + GitHub 免费部署自己的博客介绍
&lt;/h1&gt;&lt;p&gt;(00:00-00:15) &lt;em&gt;&lt;strong&gt;1.1: 视频目标与演示&lt;/strong&gt;&lt;/em&gt;
视频旨在分享如何使用 &lt;strong&gt;Hugo&lt;/strong&gt; 和 &lt;strong&gt;GitHub&lt;/strong&gt; &lt;strong&gt;免费部署&lt;/strong&gt;一个属于自己的&lt;strong&gt;个人博客&lt;/strong&gt;。开头展示了作者已经&lt;strong&gt;部署成功&lt;/strong&gt;的博客页面作为最终效果预览。&lt;/p&gt;
&lt;p&gt;(00:15-00:37) &lt;em&gt;&lt;strong&gt;1.2: 作者说明与目的&lt;/strong&gt;&lt;/em&gt;
作者声明自己并非专业的教学视频制作者，制作此视频主要是因为近期想更新内容，且正好在研究 &lt;strong&gt;Hugo&lt;/strong&gt; 博客的搭建过程。目的是分享经验，帮助观看者在搭建过程中&lt;strong&gt;少走弯路&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(00:37-00:44) &lt;em&gt;&lt;strong&gt;1.3: 博客内容示例&lt;/strong&gt;&lt;/em&gt;
简要展示了博客中的一篇文章，内容即为本次视频所要讲解的 &lt;strong&gt;Hugo + GitHub 免费部署博客&lt;/strong&gt;的&lt;strong&gt;教程记录&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part2-搭建动机与-hugo-vs-hexo-对比&#34;&gt;part2: 搭建动机与 Hugo vs Hexo 对比
&lt;/h1&gt;&lt;p&gt;(00:45-00:57) &lt;em&gt;&lt;strong&gt;2.1: 历史背景 (Hexo)&lt;/strong&gt;&lt;/em&gt;
作者提到自己之前已经使用 &lt;strong&gt;Hexo&lt;/strong&gt; 框架搭建过一个&lt;strong&gt;个人博客&lt;/strong&gt; (展示了之前的 Hexo 博客页面)。&lt;/p&gt;
&lt;p&gt;(00:57-01:19) &lt;em&gt;&lt;strong&gt;2.2: 转向 Hugo 的原因&lt;/strong&gt;&lt;/em&gt;
解释了为何选择使用 &lt;strong&gt;Hugo&lt;/strong&gt; 重新搭建：更换了新电脑 (&lt;strong&gt;天选4&lt;/strong&gt;) 后，之前的 &lt;strong&gt;Hexo&lt;/strong&gt; 本地文件丢失（因为&lt;strong&gt;没有上传备份到 GitHub&lt;/strong&gt;），所以需要重新搭建。借此机会研究并尝试了 &lt;strong&gt;Hugo&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(01:19-01:30) &lt;em&gt;&lt;strong&gt;2.3: Hugo 使用体验&lt;/strong&gt;&lt;/em&gt;
作者认为实际使用下来，&lt;strong&gt;Hugo&lt;/strong&gt; &lt;strong&gt;感觉&lt;/strong&gt;比 &lt;strong&gt;Hexo&lt;/strong&gt; &lt;strong&gt;更方便&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(01:30-01:41) &lt;em&gt;&lt;strong&gt;2.4: 对新手的建议 (Hugo vs Hexo)&lt;/strong&gt;&lt;/em&gt;
指出 &lt;strong&gt;Hugo&lt;/strong&gt; 的官方文档&lt;strong&gt;基本都是英文&lt;/strong&gt;，可能对新手不太友好。因此，&lt;strong&gt;推荐新手&lt;/strong&gt;优先尝试 &lt;strong&gt;Hexo&lt;/strong&gt; (文档相对更完善，中文资源多)。使用 Hugo 需要&lt;strong&gt;啃英文文档&lt;/strong&gt;，对新手来说较为&lt;strong&gt;麻烦&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part3-下载-hugo&#34;&gt;part3: 下载 Hugo
&lt;/h1&gt;&lt;p&gt;(01:41-01:54) &lt;em&gt;&lt;strong&gt;3.1: 开始教程：下载准备&lt;/strong&gt;&lt;/em&gt;
正式进入教程环节，第一步是&lt;strong&gt;下载 Hugo&lt;/strong&gt;。作者打开浏览器并搜索 &lt;strong&gt;Hugo&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(01:54-02:22) &lt;em&gt;&lt;strong&gt;3.2: 定位 Hugo GitHub Releases&lt;/strong&gt;&lt;/em&gt;
进入 &lt;strong&gt;Hugo&lt;/strong&gt; 官网 (&lt;strong&gt;gohugo.io&lt;/strong&gt;)，点击 &lt;strong&gt;GitHub&lt;/strong&gt; 链接跳转到 &lt;strong&gt;Hugo&lt;/strong&gt; 的 &lt;strong&gt;GitHub 仓库&lt;/strong&gt;。在仓库页面，点击 &lt;code&gt;Tags&lt;/code&gt; (标签/版本) 来查找发布版本。选择了当时的最新版本 &lt;strong&gt;v0.131.0&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(02:22-02:30) &lt;em&gt;&lt;strong&gt;3.3: 选择并下载 Hugo Extended 版本&lt;/strong&gt;&lt;/em&gt;
在版本发布页面向下滚动到 &lt;code&gt;Assets&lt;/code&gt; (资源) 部分，强调需要下载 &lt;strong&gt;Extended&lt;/strong&gt; (扩展) 版本，并选择了适用于 Windows 64位的 &lt;code&gt;hugo_extended_0.131.0_windows-amd64.zip&lt;/code&gt; 文件进行&lt;strong&gt;下载&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part4-hugo-文件准备与站点创建&#34;&gt;part4: Hugo 文件准备与站点创建
&lt;/h1&gt;&lt;p&gt;(02:30-02:55) &lt;em&gt;&lt;strong&gt;4.1: 解压 Hugo 文件&lt;/strong&gt;&lt;/em&gt;
展示了下载好的 &lt;strong&gt;zip 压缩包&lt;/strong&gt;。在桌面上创建了一个名为 &lt;code&gt;test&lt;/code&gt; 的新文件夹。将下载的 &lt;strong&gt;zip 包&lt;/strong&gt;移动到 &lt;code&gt;test&lt;/code&gt; 文件夹中，并进行&lt;strong&gt;解压&lt;/strong&gt;。解压后得到包含 &lt;code&gt;hugo.exe&lt;/code&gt; 等文件的文件夹。&lt;/p&gt;
&lt;p&gt;(02:55-03:04) &lt;em&gt;&lt;strong&gt;4.2: Hugo 可执行文件说明&lt;/strong&gt;&lt;/em&gt;
强调 &lt;strong&gt;Hugo&lt;/strong&gt; 是用 &lt;strong&gt;Go&lt;/strong&gt; 语言编写的，但使用时&lt;strong&gt;不需要单独安装 Go 环境&lt;/strong&gt;，♈下载解压后的 &lt;code&gt;hugo.exe&lt;/code&gt; &lt;strong&gt;可执行文件&lt;/strong&gt;即可直接使用，这一点很方便。清理了多余的文件和文件夹，只保留核心文件。&lt;/p&gt;
&lt;p&gt;(03:04-03:13) &lt;em&gt;&lt;strong&gt;4.3: 打开命令行工具 (CMD)&lt;/strong&gt;&lt;/em&gt;
在包含 &lt;code&gt;hugo.exe&lt;/code&gt; 的文件夹（路径类似 &lt;code&gt;C:\Users\Letere\Desktop\test\hugo_extended_0.131.0_windows-amd64&lt;/code&gt;）的&lt;strong&gt;地址栏&lt;/strong&gt;输入 &lt;code&gt;cmd&lt;/code&gt; 并回车，从而&lt;strong&gt;直接在该目录下打开命令行窗口&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(03:13-03:34) &lt;em&gt;&lt;strong&gt;4.4: 创建新站点命令 (&lt;code&gt;hugo new site&lt;/code&gt;)&lt;/strong&gt;&lt;/em&gt;
在命令行窗口中，♈输入命令 &lt;strong&gt;&lt;code&gt;hugo new site dev&lt;/code&gt;&lt;/strong&gt;。该命令会创建一个名为 &lt;code&gt;dev&lt;/code&gt; 的新文件夹，并在其中♈♈生成 &lt;strong&gt;Hugo 站点&lt;/strong&gt;的&lt;strong&gt;基本目录结构&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(03:34-03:45) &lt;em&gt;&lt;strong&gt;4.5: 理解命令输出与后续步骤&lt;/strong&gt;&lt;/em&gt;
展示了 &lt;strong&gt;&lt;code&gt;hugo new site&lt;/code&gt;&lt;/strong&gt; 命令执行后的&lt;strong&gt;输出提示&lt;/strong&gt;，其中包含了建议的后续操作步骤，如切换目录、安装主题、编辑配置、创建内容和启动服务。作者&lt;strong&gt;截图保存&lt;/strong&gt;了这些步骤提示。&lt;/p&gt;
&lt;p&gt;(03:45-04:10) &lt;em&gt;&lt;strong&gt;4.6: 切换目录与复制 Hugo 执行文件&lt;/strong&gt;&lt;/em&gt;
根据提示，首先使用 &lt;strong&gt;&lt;code&gt;cd dev&lt;/code&gt;&lt;/strong&gt; 命令&lt;strong&gt;切换到&lt;/strong&gt;新创建的 &lt;code&gt;dev&lt;/code&gt; 站点&lt;strong&gt;根目录&lt;/strong&gt;。因为 &lt;code&gt;hugo.exe&lt;/code&gt; 不在系统路径中，需要将其&lt;strong&gt;复制&lt;/strong&gt;到当前的 &lt;code&gt;dev&lt;/code&gt; 目录下，才能在该目录中执行 &lt;strong&gt;Hugo&lt;/strong&gt; 相关命令。&lt;/p&gt;
&lt;h1 id=&#34;part5-本地预览-无主题&#34;&gt;part5: 本地预览 (无主题)
&lt;/h1&gt;&lt;p&gt;(04:10-04:28) &lt;em&gt;&lt;strong&gt;5.1: 准备本地预览&lt;/strong&gt;&lt;/em&gt;
根据之前的步骤提示，下一步是安装主题，但作者决定先&lt;strong&gt;不安装主题&lt;/strong&gt;，直接&lt;strong&gt;启动本地服务&lt;/strong&gt;看下效果。&lt;/p&gt;
&lt;p&gt;(04:28-05:08) &lt;em&gt;&lt;strong&gt;5.2: 启动 Hugo 本地服务 (&lt;code&gt;hugo server -D&lt;/code&gt;)&lt;/strong&gt;&lt;/em&gt;
在 &lt;code&gt;dev&lt;/code&gt; 目录下，执行命令 &lt;strong&gt;&lt;code&gt;hugo server -D&lt;/code&gt;&lt;/strong&gt; 来启动 &lt;strong&gt;Hugo&lt;/strong&gt; 的&lt;strong&gt;内置Web服务器&lt;/strong&gt;进行本地预览。解释 &lt;code&gt;-D&lt;/code&gt; 是 &lt;code&gt;--buildDrafts&lt;/code&gt; 的&lt;strong&gt;简写&lt;/strong&gt;，用于包含草稿内容。命令成功执行后，输出了本地服务器地址 &lt;strong&gt;&lt;code&gt;http://localhost:1313&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(05:08-05:16) &lt;em&gt;&lt;strong&gt;5.3: 浏览器访问与结果 (Page Not Found)&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;复制&lt;/strong&gt;该地址并在浏览器中打开。♈页面显示 &lt;strong&gt;&lt;code&gt;Page Not Found&lt;/code&gt;&lt;/strong&gt; (404错误)。作者解释这是&lt;strong&gt;正常现象&lt;/strong&gt;，因为目前&lt;strong&gt;既没有安装主题，也没有任何内容&lt;/strong&gt;，但这表明 &lt;strong&gt;Hugo 服务已经成功启动&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part6-查找与下载-hugo-主题-stack&#34;&gt;part6: 查找与下载 Hugo 主题 (Stack)
&lt;/h1&gt;&lt;p&gt;(05:16-05:33) &lt;em&gt;&lt;strong&gt;6.1: 前往 Hugo 主题站&lt;/strong&gt;&lt;/em&gt;
回到命令行输出提示，明确需要&lt;strong&gt;安装一个主题&lt;/strong&gt;。再次访问 &lt;strong&gt;Hugo&lt;/strong&gt; 官网 (&lt;strong&gt;gohugo.io&lt;/strong&gt;)，点击导航栏中的 &lt;code&gt;Themes&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;(05:33-05:56) &lt;em&gt;&lt;strong&gt;6.2: 选择 Stack 主题&lt;/strong&gt;&lt;/em&gt;
浏览 &lt;strong&gt;Hugo 主题&lt;/strong&gt;列表，作者选择了名为 &lt;strong&gt;&lt;code&gt;Stack&lt;/code&gt;&lt;/strong&gt; 的主题（卡片式风格，适用于博主）。点击进入该主题的详情页。&lt;/p&gt;
&lt;p&gt;(05:56-06:13) &lt;em&gt;&lt;strong&gt;6.3: ♈下载 Stack 主题源码&lt;/strong&gt;&lt;/em&gt;
在 &lt;strong&gt;Stack&lt;/strong&gt; 主题详情页，点击 &lt;code&gt;Download&lt;/code&gt; 按钮，跳转到该主题的 &lt;strong&gt;GitHub 仓库&lt;/strong&gt; (&lt;code&gt;CallMeMaybe/hugo-theme-stack&lt;/code&gt;)。在仓库页面，同样通过 &lt;code&gt;Tags&lt;/code&gt; 找到最新版本 &lt;strong&gt;v3.26.0&lt;/strong&gt;，♈并点击 &lt;strong&gt;&lt;code&gt;Source code (zip)&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;下载主题的源代码压缩包&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part7-安装与配置-hugo-主题&#34;&gt;part7: 安装与配置 Hugo 主题
&lt;/h1&gt;&lt;p&gt;(06:13-06:33) &lt;em&gt;&lt;strong&gt;7.1: 放置主题文件&lt;/strong&gt;&lt;/em&gt;
展示下载好的主题压缩包 &lt;code&gt;hugo-theme-stack-3.26.0.zip&lt;/code&gt;。回到本地的 &lt;strong&gt;Hugo&lt;/strong&gt; 站点 &lt;code&gt;dev&lt;/code&gt; 目录，找到 &lt;code&gt;themes&lt;/code&gt; 文件夹。♈将下载的&lt;strong&gt;主题压缩包&lt;/strong&gt;移动到 &lt;code&gt;themes&lt;/code&gt; 文件夹内，并进行&lt;strong&gt;解压&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(06:33-07:03) &lt;em&gt;&lt;strong&gt;7.2: 重命名主题文件夹与修改配置&lt;/strong&gt;&lt;/em&gt;
解压后的主题文件夹名带有版本号 (&lt;code&gt;hugo-theme-stack-3.26.0&lt;/code&gt;)。为了方便配置，♒将其&lt;strong&gt;重命名&lt;/strong&gt;为 &lt;code&gt;hugo-theme-stack&lt;/code&gt;。打开站点根目录下的&lt;strong&gt;配置文件&lt;/strong&gt; &lt;code&gt;hugo.yaml&lt;/code&gt; (之前从主题的 &lt;code&gt;exampleSite&lt;/code&gt; 复制过来的)。找到 &lt;code&gt;theme&lt;/code&gt; 配置项，将其值修改为&lt;strong&gt;刚刚重命名&lt;/strong&gt;的文件夹名 &lt;code&gt;hugo-theme-stack&lt;/code&gt;。&lt;strong&gt;保存&lt;/strong&gt;配置文件。&lt;/p&gt;
&lt;p&gt;(07:03-07:19) &lt;em&gt;&lt;strong&gt;7.3: 应用主题示例配置与内容&lt;/strong&gt;&lt;/em&gt;
为了快速看到效果，作者将主题♐ &lt;code&gt;exampleSite&lt;/code&gt; 目录下的 &lt;code&gt;content&lt;/code&gt; 文件夹和 &lt;code&gt;hugo.yaml&lt;/code&gt; 文件&lt;strong&gt;复制&lt;/strong&gt;到站点根目录 (&lt;code&gt;dev&lt;/code&gt;) 下，并选择&lt;strong&gt;覆盖&lt;/strong&gt;现有文件。这样就♈直接使用了主题&lt;strong&gt;自带的示例内容和配置&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(07:19-07:28) &lt;em&gt;&lt;strong&gt;7.4: 清理与重启服务&lt;/strong&gt;&lt;/em&gt;
♐删除了站点根目录下原有的 &lt;code&gt;hugo.toml&lt;/code&gt; 文件【因为现在使用 &lt;code&gt;hugo.yaml&lt;/code&gt;，它们是同一个配置文件，只是后缀名不同】。回到命令行窗口，&lt;strong&gt;停止&lt;/strong&gt;之前运行的 &lt;strong&gt;Hugo&lt;/strong&gt; 服务（通过按 Ctrl+C，虽然画面未显示），然后再次执行 &lt;strong&gt;&lt;code&gt;hugo server -D&lt;/code&gt;&lt;/strong&gt; 命令&lt;strong&gt;重新启动服务&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(07:28-07:47) &lt;em&gt;&lt;strong&gt;7.5: 预览带主题的站点&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;刷新&lt;/strong&gt;浏览器中 &lt;code&gt;http://localhost:1313&lt;/code&gt; 页面。此时，网站成功加载了 &lt;strong&gt;Stack 主题&lt;/strong&gt;和其&lt;strong&gt;示例内容&lt;/strong&gt;，外观与之前展示的成品相似。&lt;/p&gt;
&lt;h1 id=&#34;part8-主题示例内容处理&#34;&gt;part8: 主题示例内容处理
&lt;/h1&gt;&lt;p&gt;(07:47-08:07) &lt;em&gt;&lt;strong&gt;8.1: 删除 Rich Content 示例文章&lt;/strong&gt;&lt;/em&gt;
在预览页面滚动时，作者提到主题♋示例中有一个名为 &lt;code&gt;rich-content&lt;/code&gt; 的文章。因为这篇文章&lt;strong&gt;引用了 YouTube 等外部资源&lt;/strong&gt;，在国内网络环境下可能导致&lt;strong&gt;加载超时&lt;/strong&gt;或构建失败，所以♈建议&lt;strong&gt;删除&lt;/strong&gt;。随后展示了♈在 &lt;code&gt;根目录/content/post&lt;/code&gt; 目录下&lt;strong&gt;删除 &lt;code&gt;rich-content&lt;/code&gt; 文件夹&lt;/strong&gt;的操作。&lt;/p&gt;
&lt;p&gt;(08:07-08:39) &lt;em&gt;&lt;strong&gt;8.2: 参考主题 Demo 站&lt;/strong&gt;&lt;/em&gt;
回到主题的 &lt;strong&gt;GitHub 仓库&lt;/strong&gt;页面，指出 &lt;code&gt;README.md&lt;/code&gt; 文件通常包含重要信息。找到了♋主题提供的 &lt;strong&gt;Demo 演示站点&lt;/strong&gt;链接 (&lt;code&gt;demo.stack.jimmycai.com&lt;/code&gt;) 并打开。说明可以通过访问 &lt;strong&gt;Demo 站点&lt;/strong&gt;来了解 &lt;code&gt;rich-content&lt;/code&gt; 页面原本包含哪些内容（如嵌入视频、特殊格式等）。&lt;/p&gt;
&lt;h1 id=&#34;part9-hugo-国际化-i18n-功能说明&#34;&gt;part9: Hugo 国际化 (i18n) 功能说明
&lt;/h1&gt;&lt;p&gt;(08:39-09:04) &lt;em&gt;&lt;strong&gt;9.1: 文件名与语言代码&lt;/strong&gt;&lt;/em&gt;
解释 &lt;strong&gt;Hugo&lt;/strong&gt; 的&lt;strong&gt;国际化 (i18n)&lt;/strong&gt; 功能。以 &lt;code&gt;dev/content/post/chinese-test&lt;/code&gt; 文件夹为例，其中的内容文件是 &lt;code&gt;index.zh-cn.md&lt;/code&gt;。指出文件名中的 &lt;strong&gt;&lt;code&gt;.zh-cn&lt;/code&gt;&lt;/strong&gt; 就是&lt;strong&gt;语言代码&lt;/strong&gt;。对比 &lt;code&gt;emoji-support&lt;/code&gt; 文件夹下的 &lt;code&gt;index.md&lt;/code&gt; 文件，它&lt;strong&gt;没有语言代码&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(09:04-09:19) &lt;em&gt;&lt;strong&gt;9.2: 国际化工作原理&lt;/strong&gt;&lt;/em&gt;
说明：如果文件名&lt;strong&gt;不带语言代码&lt;/strong&gt; (如 &lt;code&gt;index.md&lt;/code&gt;)，则该内容属于在 &lt;code&gt;hugo.yaml&lt;/code&gt; 中配置的&lt;strong&gt;默认语言&lt;/strong&gt;（此例中为&lt;strong&gt;英语&lt;/strong&gt;）。♈网站会根据用户切换的语言（通过页面上的语言切换器）加载对应语言代码的文件【&lt;strong&gt;切出对应后缀名的文件&lt;/strong&gt;】。例如，♈切换到中文，会加载 &lt;code&gt;index.zh-cn.md&lt;/code&gt;；♈切换到英文，会加载 &lt;code&gt;index.en.md&lt;/code&gt; 或默认的 &lt;code&gt;index.md&lt;/code&gt;。
也就是当访问者在您的网站上选择或&lt;strong&gt;切换到中文（简体） 这个语言选项&lt;/strong&gt;时，&lt;strong&gt;Hugo 会查找并使用带有 .zh-cn.md 后缀的文件来渲染该页面&lt;/strong&gt;，比如 有一个名为 我的笔记.md 的 Markdown 文件，并且您希望它只在网站的中文环境下显示，需要将其重命名为 &lt;strong&gt;我的笔记.zh-cn.md&lt;/strong&gt;
(09:19-09:29) &lt;em&gt;&lt;strong&gt;9.3: 国际化演示&lt;/strong&gt;&lt;/em&gt;
为了演示，♈将 &lt;code&gt;chinese-test&lt;/code&gt; 文件夹下的 &lt;code&gt;index.zh-cn.md&lt;/code&gt; &lt;strong&gt;重命名&lt;/strong&gt;为 &lt;code&gt;index.en.md&lt;/code&gt;【&lt;strong&gt;就是改改后缀名而&lt;/strong&gt;】。&lt;strong&gt;刷新&lt;/strong&gt;本地预览页面。此时切换到&lt;strong&gt;英文&lt;/strong&gt;环境，会显示原 &amp;ldquo;Chinese Test&amp;rdquo; 的内容；♈切换到&lt;strong&gt;中文&lt;/strong&gt;环境，则该文章消失，因为对应的中文文件 (&lt;code&gt;index.zh-cn.md&lt;/code&gt;) 已不存在。说明 &lt;strong&gt;Hugo&lt;/strong&gt; 的国际化实现相对&lt;strong&gt;简单&lt;/strong&gt;，只需复制文件并修改语言代码即可。&lt;/p&gt;
&lt;h1 id=&#34;part10-创建与编辑新内容&#34;&gt;part10: 创建与编辑新内容
&lt;/h1&gt;&lt;p&gt;(09:29-09:57) &lt;em&gt;&lt;strong&gt;10.1: 创建新文章命令 (&lt;code&gt;hugo new content&lt;/code&gt;)&lt;/strong&gt;&lt;/em&gt;
演示如何使用命令行&lt;strong&gt;创建新文章&lt;/strong&gt;。命令格式为 &lt;strong&gt;&lt;code&gt;hugo new content &amp;lt;section&amp;gt;/&amp;lt;slug&amp;gt;/index.md&lt;/code&gt;&lt;/strong&gt;。其中 &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; 通常是 &lt;code&gt;content&lt;/code&gt; 目录下的子目录（如 &lt;code&gt;post&lt;/code&gt;），&lt;code&gt;&amp;lt;slug&amp;gt;&lt;/code&gt; 是文章的唯一标识（会成为文件夹名），&lt;code&gt;index.md&lt;/code&gt; 是内容文件名。
♈作者执行了命令 &lt;strong&gt;&lt;code&gt;hugo new content post/myFirstBlog/index.md&lt;/code&gt;&lt;/strong&gt;，成功创建了一个名为 &lt;code&gt;myFirstBlog&lt;/code&gt; 的文章。&lt;/p&gt;
&lt;p&gt;(09:57-10:15) &lt;em&gt;&lt;strong&gt;10.2: 编辑新文章内容 (Markdown)&lt;/strong&gt;&lt;/em&gt;
使用 &lt;strong&gt;Typora&lt;/strong&gt; 编辑器打开新创建的 &lt;code&gt;dev/content/post/myFirstBlog/index.md&lt;/code&gt; 文件。文件自动包含了&lt;strong&gt;基础的 front matter&lt;/strong&gt;（如 &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;draft: true&lt;/code&gt;）。在文件末尾添加了一行 &lt;strong&gt;Markdown&lt;/strong&gt; 内容：&lt;strong&gt;&lt;code&gt;### Hello World!&lt;/code&gt;&lt;/strong&gt;。&lt;strong&gt;保存&lt;/strong&gt;文件。&lt;/p&gt;
&lt;p&gt;(10:15-10:31) &lt;em&gt;&lt;strong&gt;10.3: 预览新文章&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;刷新&lt;/strong&gt;本地预览页面 (&lt;code&gt;http://localhost:1313&lt;/code&gt;)。新创建的 &lt;strong&gt;&amp;ldquo;MyFirstBlog&amp;rdquo;&lt;/strong&gt; 文章出现在首页列表。点击进入该文章，可以看到刚才添加的 &lt;strong&gt;&amp;ldquo;Hello World!&amp;rdquo;&lt;/strong&gt; 标题。这表明文章已成功创建并显示。&lt;/p&gt;
&lt;h1 id=&#34;part11-本地搭建完成与后续步骤&#34;&gt;part11: 本地搭建完成与后续步骤
&lt;/h1&gt;&lt;p&gt;(10:31-10:38) &lt;em&gt;&lt;strong&gt;11.1: 本地搭建总结&lt;/strong&gt;&lt;/em&gt;
至此，使用 &lt;strong&gt;Hugo&lt;/strong&gt; 和 &lt;strong&gt;Stack 主题&lt;/strong&gt;在&lt;strong&gt;本地搭建博客&lt;/strong&gt;的基本流程已经完成。&lt;/p&gt;
&lt;p&gt;(10:38-10:43) &lt;em&gt;&lt;strong&gt;11.2: 后续内容预告&lt;/strong&gt;&lt;/em&gt;
说明接下来的步骤将涉及♐&lt;strong&gt;修改配置 hugo.yaml&lt;/strong&gt;【♐至于hugo.yaml有哪些配置 一般要么样式文件里面的hugo.yaml会讲在哪里找，要么样式文件里面的hugo.yaml已经把全部配置给你了】以及如何将博客&lt;strong&gt;部署到 GitHub Pages&lt;/strong&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>环境变量只有在项目的构建的过程中使用</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%8F%AA%E6%9C%89%E5%9C%A8%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9E%84%E5%BB%BA%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%8F%AA%E6%9C%89%E5%9C%A8%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9E%84%E5%BB%BA%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%BD%BF%E7%94%A8/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cloudflare Pages 连接到 hugo-Fixlt-dev 仓库时，♈Cloudflare Pages 默认是直接托管该仓库中的 静态文件 ，♈它 不会 重新运行 hugo 构建命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因此，♈你在 Cloudflare Pages 设置的环境变量 HUGO_BASEURL 在这个流程中 根本没有机会 被 Hugo 构建过程使用，因为它是在 Action（ hugo-main 仓库中）构建完成 之后 才接触到这些文件的。♈静态文件一旦生成，里面的绝对 URL 就已经固定了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;比如，♈GitHub Action 在构建时使用了固定的 baseURL （例如 GitHub Pages 的 URL），生成的 HTML/CSS/JS 文件中的链接都是指向这个 URL 的绝对路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因此当 Cloudflare Pages 直接提供这些预先构建好的文件时，这些绝对路径对于 Cloudflare 的域名来说是错误的，导致资源加载失败&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>用AI独立开发MCP服务 集合</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E7%94%A8ai%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91mcp%E6%9C%8D%E5%8A%A1-%E9%9B%86%E5%90%88/</link>
        <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E7%94%A8ai%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91mcp%E6%9C%8D%E5%8A%A1-%E9%9B%86%E5%90%88/</guid>
        <description>&lt;h1 id=&#34;用ai独立开发mcp服务的集合&#34;&gt;用AI独立开发MCP服务的集合
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;生成MCP服务 生成调用本地项目的MCP服务   &lt;a class=&#34;link&#34; href=&#34;https://aistudio.google.com/prompts/1yTmovHhdhAThW5Fzigr_4hYlBB8GEaLM&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://aistudio.google.com/prompts/1yTmovHhdhAThW5Fzigr_4hYlBB8GEaLM&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; - [1 如何AI编程开发MCP]
 	- 用AI开发MCP服务 这里用对应的提示词让AI客户端生成满足自己需求的本地MCP服务代码
 	- （markdown格式 、简单描述MCP服务要实现的功能 、 告诉AI 本地项目的路径、 告诉AI 要激活哪个虚拟环境、 告诉AI要设置的 模型的key）、
 	- （把本地项目的全部代码直接告诉AI、告诉AI 项目运行后的响应情况 也就是直接把终端的完整内容复制给AI，这个终端的完整内容包含程序的运行命令和项目运行效果）
 	- （  给AI详细的MCP文档（告诉AI MCP是什么） 、 应该可以让AI生成MCP的标准配置标准配置的对应的字段和参数我还是了解的 ）
 - 【2 案例  创建MCP服务TimeServer的提示词】	 https://aistudio.google.com/prompts/1yTmovHhdhAThW5Fzigr_4hYlBB8GEaLM
 	- 提示词里面需要MCP的哪些参考资料，这里给了链接，直接在链接里面粘贴内容过来
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/</link>
        <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/</guid>
        <description>&lt;p&gt;༼ ༽&lt;/p&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/</link>
        <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/</guid>
        <description>&lt;p&gt;༼ CPU中寄存器的原理༽&lt;/p&gt;
&lt;h1 id=&#34;part1-寄存器与内存的对比及寄存器原理引入&#34;&gt;part1: 寄存器与内存的对比及寄存器原理引入
&lt;/h1&gt;&lt;p&gt;(00:00-00:17) &lt;em&gt;&lt;strong&gt;1.1: CPU寄存器介绍&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视频开头展示了一个&lt;strong&gt;Intel Core i5-7500 CPU&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;提到CPU内部有用于&lt;strong&gt;存储&lt;/strong&gt;数据的装置，称为&lt;strong&gt;寄存器 (Register)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;比较&lt;/strong&gt;寄存器和&lt;strong&gt;内存&lt;/strong&gt;：寄存器&lt;strong&gt;容量很小&lt;/strong&gt;，但拥有&lt;strong&gt;惊人的读写速度&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;提出问题：寄存器的原理是什么？为什么它比内存快这么多？&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part2-组合逻辑电路的局限性&#34;&gt;part2: 组合逻辑电路的局限性
&lt;/h1&gt;&lt;p&gt;(00:17-00:39) &lt;em&gt;&lt;strong&gt;2.1: 无记忆功能的电路示例&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日常生活中&lt;strong&gt;接触&lt;/strong&gt;的&lt;strong&gt;电路&lt;/strong&gt;（如灯）大部分&lt;strong&gt;不具备存储信息的功能&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;演示一个简单的&lt;strong&gt;灯泡电路&lt;/strong&gt;：包含电池、开关和灯泡。&lt;/li&gt;
&lt;li&gt;电路特点：开关闭合灯亮，开关断开灯灭。灯的状态&lt;strong&gt;只取决于当前开关的状态&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;这种电路被称为&lt;strong&gt;组合电路 (Combinational Logic)&lt;/strong&gt;，其输出仅与当前输入有关，与过去状态无关。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part3-时序逻辑电路与记忆功能的需求&#34;&gt;part3: 时序逻辑电路与记忆功能的需求
&lt;/h1&gt;&lt;p&gt;(00:39-00:53) &lt;em&gt;&lt;strong&gt;3.1: 组合电路无法满足计算机需求&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指出仅有&lt;strong&gt;组合电路&lt;/strong&gt;是&lt;strong&gt;无法做电脑的&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;解释原因：电脑的&lt;strong&gt;状态&lt;/strong&gt;不仅&lt;strong&gt;取决于&lt;/strong&gt;你&lt;strong&gt;当前的操作&lt;/strong&gt;，还与&lt;strong&gt;以前的操作&lt;/strong&gt;有关（需要&lt;strong&gt;记忆&lt;/strong&gt;）。&lt;/li&gt;
&lt;li&gt;提出问题：如何让电路&lt;strong&gt;拥有记忆的功能&lt;/strong&gt;？&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part4-自我提醒机制记忆的类比与实现思路&#34;&gt;part4: “自我提醒机制”——记忆的类比与实现思路
&lt;/h1&gt;&lt;p&gt;(00:53-01:44) &lt;em&gt;&lt;strong&gt;4.1: 生活中的记忆类比&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用一个生活场景类比记忆：妻子让丈夫去买东西（一袋盐，五斤苹果），丈夫需要记住这个信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;画面内容：&lt;/strong&gt; 女士（cosplay角色）说：“你去买一袋盐，五斤苹果”。男士问：“你怎么不去啊？” 女士回答：“我要去漫展找小哥哥玩呀！” 男士竖起大拇指：“合理”。&lt;/li&gt;
&lt;li&gt;丈夫通过在路上&lt;strong&gt;不停地对自己重复&lt;/strong&gt;要买的东西（五斤苹果，一袋盐）来&lt;strong&gt;刷新&lt;/strong&gt;自己的&lt;strong&gt;记忆&lt;/strong&gt;，防止忘记。&lt;/li&gt;
&lt;li&gt;将这种方式称为“&lt;strong&gt;自我提醒机制 (Self Reminder Mechanism)&lt;/strong&gt;”。&lt;/li&gt;
&lt;li&gt;这个机制将在设计存储电路时发挥&lt;strong&gt;决定性作用&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part5-基础逻辑门与简单的反馈电路&#34;&gt;part5: 基础逻辑门与简单的反馈电路
&lt;/h1&gt;&lt;p&gt;(01:44-02:44) &lt;em&gt;&lt;strong&gt;5.1: 非门 (NOT Gate) 介绍&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍&lt;strong&gt;非门&lt;/strong&gt;（逻辑符号：一个三角形加一个小圆圈）。&lt;/li&gt;
&lt;li&gt;功能：可以将&lt;strong&gt;输入&lt;/strong&gt;的信号进行&lt;strong&gt;反转&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;示例：输入&lt;strong&gt;高电平&lt;/strong&gt;，输出&lt;strong&gt;低电平&lt;/strong&gt;；输入&lt;strong&gt;低电平&lt;/strong&gt;，输出&lt;strong&gt;高电平&lt;/strong&gt;。
(02:04-02:28) &lt;em&gt;&lt;strong&gt;5.2: 单非门反馈电路 (振荡器)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;引入“&lt;strong&gt;自我提醒机制&lt;/strong&gt;”思路：将&lt;strong&gt;非门&lt;/strong&gt;的&lt;strong&gt;输出&lt;/strong&gt;接回到&lt;strong&gt;输入&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;演示结果：信号在&lt;strong&gt;高低电平&lt;/strong&gt;之间&lt;strong&gt;循环往复&lt;/strong&gt;地变化（&lt;strong&gt;振荡&lt;/strong&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;画面内容：&lt;/strong&gt; 假设初始输入为低电平，输出变高电平，高电平反馈回输入，输出变低电平，低电平再反馈，形成&lt;strong&gt;持续振荡&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;调侃：称其为“&lt;strong&gt;永动机&lt;/strong&gt;”。
(02:28-02:44) &lt;em&gt;&lt;strong&gt;5.3: 澄清“永动机”与门电路供电&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;说明这&lt;strong&gt;不是永动机&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;解释：通常看到的门电路接线只是&lt;strong&gt;信号线&lt;/strong&gt;，实际门电路还需要&lt;strong&gt;连接电源线&lt;/strong&gt;（&lt;strong&gt;电源正极 VDD&lt;/strong&gt; 和 &lt;strong&gt;电源负极 VSS&lt;/strong&gt;）。&lt;/li&gt;
&lt;li&gt;高低电平变化的&lt;strong&gt;动力&lt;/strong&gt;其实&lt;strong&gt;来自于电源线&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part6-双稳态电路的构建与特性&#34;&gt;part6: 双稳态电路的构建与特性
&lt;/h1&gt;&lt;p&gt;(02:44-03:11) &lt;em&gt;&lt;strong&gt;6.1: 单非门反馈的问题与改进思路&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指出单非门反馈电路&lt;strong&gt;无法存储数据&lt;/strong&gt;，因为它一直在振荡。&lt;/li&gt;
&lt;li&gt;提出改进思路：将“光速”（信号传播速度）&lt;strong&gt;调慢&lt;/strong&gt;（作为一种比喻），并在反馈路径上增加门电路。
(03:11-04:09) &lt;em&gt;&lt;strong&gt;6.2: 双非门反馈电路 (Bistable Circuit)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;演示将信号传播速度调慢后，在合适时机&lt;strong&gt;再加入一个非门&lt;/strong&gt;，形成&lt;strong&gt;两个非门&lt;/strong&gt;互相反馈的环路。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分析&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;如果上路输出为&lt;strong&gt;高电平&lt;/strong&gt;，下路输入为高，输出为低，低电平反馈回上路输入，上路输出维持高电平 -&amp;gt; &lt;strong&gt;稳定状态1&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果上路输出为&lt;strong&gt;低电平&lt;/strong&gt;，下路输入为低，输出为高，高电平反馈回上路输入，上路输出维持低电平 -&amp;gt; &lt;strong&gt;稳定状态2&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;结论：这个由两个非门构成的电路具有&lt;strong&gt;两种稳定状态&lt;/strong&gt;，可以用来&lt;strong&gt;存储1 bit&lt;/strong&gt;的数据（例如，一种状态代表&lt;strong&gt;1&lt;/strong&gt;，另一种代表&lt;strong&gt;0&lt;/strong&gt;）。&lt;/li&gt;
&lt;li&gt;这种电路被称为&lt;strong&gt;双稳态电路 (Bistable Circuit)&lt;/strong&gt;。
(04:09-04:28) &lt;em&gt;&lt;strong&gt;6.3: 双稳态电路的问题&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;目前这种双稳态电路虽然能稳定存储状态，但存在一个问题：&lt;strong&gt;状态无法被外部修改&lt;/strong&gt;。不能简单地在特定时机插入非门来改变状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part7-引入控制锁存器的形成&#34;&gt;part7: 引入控制——锁存器的形成
&lt;/h1&gt;&lt;p&gt;(04:28-04:54) &lt;em&gt;&lt;strong&gt;7.1: 或门 (OR Gate) 介绍&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入另一种门电路：&lt;strong&gt;或门&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;符号：类似盾牌的形状。&lt;/li&gt;
&lt;li&gt;有&lt;strong&gt;两个输入&lt;/strong&gt;，&lt;strong&gt;一个输出&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;特性：&lt;strong&gt;只要&lt;/strong&gt;有&lt;strong&gt;一个输入是高电平&lt;/strong&gt;，&lt;strong&gt;输出就是高电平&lt;/strong&gt;。只有当&lt;strong&gt;两个输入都是低电平&lt;/strong&gt;时，&lt;strong&gt;输出才是低电平&lt;/strong&gt;。
(04:54-06:12) &lt;em&gt;&lt;strong&gt;7.2: 构建可控的存储电路 (SR锁存器雏形)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;将&lt;strong&gt;两个或门&lt;/strong&gt;加入到之前的双稳态电路结构中，形成新的电路。&lt;/li&gt;
&lt;li&gt;引入两个外部输入：&lt;strong&gt;Input A&lt;/strong&gt; 和 &lt;strong&gt;Input B&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;演示写入操作 (Set/Reset)&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;当 &lt;strong&gt;Input A&lt;/strong&gt; 为&lt;strong&gt;低电平&lt;/strong&gt;，&lt;strong&gt;Input B&lt;/strong&gt; 为&lt;strong&gt;高电平&lt;/strong&gt;时：
&lt;ul&gt;
&lt;li&gt;下方的或门由于 Input B 为高，其输出&lt;strong&gt;强制为高电平&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;这个高电平经过非门变成&lt;strong&gt;低电平&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;这个低电平反馈到上方或门的输入。&lt;/li&gt;
&lt;li&gt;由于 Input A 和反馈信号都为低电平，上方或门输出为低电平。&lt;/li&gt;
&lt;li&gt;低电平再经过非门变成&lt;strong&gt;高电平&lt;/strong&gt;，反馈到下方或门。&lt;/li&gt;
&lt;li&gt;此时，电路状态被&lt;strong&gt;强制&lt;/strong&gt;设定并&lt;strong&gt;稳定&lt;/strong&gt;下来。Input B 的高电平&lt;strong&gt;打破&lt;/strong&gt;了原有的&lt;strong&gt;双稳态机制&lt;/strong&gt;。
(06:12-06:50) &lt;em&gt;&lt;strong&gt;7.3: 写入与保持 (Latch) 功能演示&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;演示当 &lt;strong&gt;Input A&lt;/strong&gt; 为&lt;strong&gt;高电平&lt;/strong&gt;，&lt;strong&gt;Input B&lt;/strong&gt; 为&lt;strong&gt;低电平&lt;/strong&gt;时的写入操作，结果相反，电路状态被设定为另一种稳定状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;演示保持 (Hold/Latch) 功能&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;当 &lt;strong&gt;Input A&lt;/strong&gt; 和 &lt;strong&gt;Input B&lt;/strong&gt; &lt;strong&gt;都&lt;/strong&gt;设置为&lt;strong&gt;低电平&lt;/strong&gt;时 (&lt;strong&gt;锁存状态 Latch State&lt;/strong&gt;):
&lt;ul&gt;
&lt;li&gt;或门的作用相当于不存在（输出取决于另一个反馈输入）。&lt;/li&gt;
&lt;li&gt;电路&lt;strong&gt;恢复&lt;/strong&gt;到之前的&lt;strong&gt;双稳态结构&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;此时电路会&lt;strong&gt;保持 (维持)&lt;/strong&gt; 上一次写入操作设定的状态。&lt;/li&gt;
&lt;li&gt;结论：电路&lt;strong&gt;记住&lt;/strong&gt;了过去的状态，&lt;strong&gt;拥有了记忆的能力&lt;/strong&gt;。
(06:50-08:16) &lt;em&gt;&lt;strong&gt;7.4: 锁存器的基本功能总结&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;再次演示从写入状态转换到保持状态，状态得以维持。&lt;/li&gt;
&lt;li&gt;总结该电路（&lt;strong&gt;锁存器 Latch&lt;/strong&gt;）具备的三个存储电路最基本的功能：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;写入 (Write)&lt;/strong&gt;：通过设置 Input A 和 Input B (一个高一个低) 来改变存储状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保持 (Hold)&lt;/strong&gt;：通过将 Input A 和 Input B 都设为低电平来维持当前状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;读取 (Read)&lt;/strong&gt;：通过引出导线&lt;strong&gt;测量&lt;/strong&gt;电路内部某个节点的&lt;strong&gt;电平&lt;/strong&gt;来获取存储的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part8-锁存器的非法输入与实际问题&#34;&gt;part8: 锁存器的非法输入与实际问题
&lt;/h1&gt;&lt;p&gt;(08:16-08:38) &lt;em&gt;&lt;strong&gt;8.1: 探讨非法输入组合&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提出疑问：如果 &lt;strong&gt;Input A&lt;/strong&gt; 和 &lt;strong&gt;Input B&lt;/strong&gt; &lt;strong&gt;都&lt;/strong&gt;是&lt;strong&gt;高电平&lt;/strong&gt;会发生什么？
(08:38-09:47) &lt;em&gt;&lt;strong&gt;8.2: 非法输入 (Input A=High, Input B=High) 的后果&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分析&lt;/strong&gt;：当 Input A 和 B 都为高电平时，两个或门输出都为高电平，经过非门后，两个非门的输出都为&lt;strong&gt;低电平&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;问题&lt;/strong&gt;：如果此时&lt;strong&gt;同时&lt;/strong&gt;将 Input A 和 B 变回&lt;strong&gt;低电平&lt;/strong&gt;（进入保持状态），两个非门的输出理论上都应变为高电平。但由于&lt;strong&gt;实际电路中门电路响应存在延迟&lt;/strong&gt;（不是理想的瞬时响应），哪个非门先变高是不确定的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;后果&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;可能导致电路状态&lt;strong&gt;不确定 (Indeterminate State)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;可能导致电路&lt;strong&gt;振荡 (癫狂)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;可能因中间状态导致&lt;strong&gt;大量发热&lt;/strong&gt;，甚至&lt;strong&gt;烧毁电路&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;结论：Input A 和 B &lt;strong&gt;同时为高电平&lt;/strong&gt;是一种&lt;strong&gt;非法输入&lt;/strong&gt;或&lt;strong&gt;不确定后果的输入&lt;/strong&gt;，在&lt;strong&gt;实际使用中应当避免&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;强调理想模型与现实的区别：理想模型中门电路响应是&lt;strong&gt;瞬时&lt;/strong&gt;的，现实中存在&lt;strong&gt;延迟&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part9-电路简化与展望&#34;&gt;part9: 电路简化与展望
&lt;/h1&gt;&lt;p&gt;(09:47-10:31) &lt;em&gt;&lt;strong&gt;9.1: 或非门 (NOR Gate) 与电路简化&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展示或门和非门的&lt;strong&gt;内部结构&lt;/strong&gt;（基于晶体管）。&lt;/li&gt;
&lt;li&gt;指出&lt;strong&gt;或门 + 非门&lt;/strong&gt;的组合称为&lt;strong&gt;或非门 (NOR Gate)&lt;/strong&gt;，并展示其符号。&lt;/li&gt;
&lt;li&gt;指出&lt;strong&gt;或非门&lt;/strong&gt;的后半部分包含一个&lt;strong&gt;非门&lt;/strong&gt;，而电路中另一个独立的部分也是一个&lt;strong&gt;非门&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;应用&lt;strong&gt;负负得正&lt;/strong&gt;原理：连续两个非门可以&lt;strong&gt;抵消&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;结果：可以将原来的电路（两个或门 + 两个非门）&lt;strong&gt;简化&lt;/strong&gt;为仅由&lt;strong&gt;两个或非门&lt;/strong&gt;交叉耦合构成的等效电路。&lt;/li&gt;
&lt;li&gt;这个简化后的电路图就是课本上常见的&lt;strong&gt;SR锁存器&lt;/strong&gt;（由或非门构成）。
(10:31-10:48) &lt;em&gt;&lt;strong&gt;9.2: 锁存器与寄存器的关系&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;提出问题：这个&lt;strong&gt;锁存器&lt;/strong&gt;就能当作&lt;strong&gt;寄存器&lt;/strong&gt;用了吗？&lt;/li&gt;
&lt;li&gt;回答：&lt;strong&gt;还不行&lt;/strong&gt;，还缺少东西。
(10:48-11:16) &lt;em&gt;&lt;strong&gt;9.3: 下期预告&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;预告下期内容：
&lt;ul&gt;
&lt;li&gt;如何&lt;strong&gt;避免锁存器的非法输入&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;真实的&lt;/strong&gt;运算电路中&lt;strong&gt;电压的波形&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;什么是&lt;strong&gt;边沿触发 (Edge Trigger)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;计算机中的 &lt;strong&gt;L1、L2、L3 缓存 (Cache)&lt;/strong&gt; 与寄存器的电路是否一致，区别何在。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part10-片尾彩蛋&#34;&gt;part10: 片尾彩蛋
&lt;/h1&gt;&lt;p&gt;(11:16-11:38) &lt;em&gt;&lt;strong&gt;10.1: 购物后续&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视频结尾，男士回到家，放下了购物成果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;画面内容：&lt;/strong&gt; 男士放下一袋苹果和五袋盐，说：“一袋苹果，五斤盐”。&lt;/li&gt;
&lt;li&gt;女士（cosplay角色）看着桌子上的东西，露出困惑/无语的表情，问男士：“你要这么多盐干嘛？”。&lt;/li&gt;
&lt;li&gt;（呼应前面的记忆类比，暗示丈夫记混了数量和单位）。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/</link>
        <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/</guid>
        <description>&lt;p&gt;༼ ༽&lt;/p&gt;
</description>
        </item>
        <item>
        <title>API的前端界面：Gradio界面</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/api%E7%9A%84%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2gradio%E7%95%8C%E9%9D%A2/</link>
        <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/api%E7%9A%84%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2gradio%E7%95%8C%E9%9D%A2/</guid>
        <description>&lt;p&gt;༼ 🚀挑战Gemini 2.5！最强开源企业级OCR大模型InternVL3！本地部署教程+实战测评全纪录，轻松搞定潦草手写汉字、模糊PDF扫描件、模糊复杂表格，效果炸裂超过人眼！支持Open WebUI༽&lt;/p&gt;
&lt;h1 id=&#34;part1-环境准备与依赖安装&#34;&gt;part1: 环境准备与依赖安装
&lt;/h1&gt;&lt;p&gt;好的，将一个本地运行的模型API（比如在 &lt;code&gt;http://127.0.0.1:5000&lt;/code&gt; 上运行的服务）接入 Gradio 界面是常见的做法。Gradio 在这种情况下扮演的是&lt;strong&gt;前端用户界面&lt;/strong&gt;的角色，而你的本地API则是&lt;strong&gt;后端模型服务&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;你需要做的核心事情是在 Gradio 的&lt;strong&gt;处理函数 (function)&lt;/strong&gt; 中，使用 Python 的 HTTP 请求库（最常用的是 &lt;code&gt;requests&lt;/code&gt;）去&lt;strong&gt;调用&lt;/strong&gt;你本地的 API，然后将 API 返回的结果展示在 Gradio 的输出组件中。&lt;/p&gt;
&lt;p&gt;以下是接入的基本步骤和示例：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 安装必要的库:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install gradio requests
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2. 了解你的本地API:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在编写 Gradio 代码之前，你&lt;strong&gt;必须&lt;/strong&gt;清楚你的本地 API (&lt;code&gt;http://127.0.0.1:5000&lt;/code&gt;) 的以下细节：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;确切的端点 (Endpoint Path):&lt;/strong&gt; API 的具体路径是什么？例如，是 &lt;code&gt;/predict&lt;/code&gt;, &lt;code&gt;/generate&lt;/code&gt;, &lt;code&gt;/chat/completions&lt;/code&gt; 还是其他？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP 方法 (Method):&lt;/strong&gt; 调用这个端点需要使用 &lt;code&gt;GET&lt;/code&gt; 还是 &lt;code&gt;POST&lt;/code&gt; 方法？（通常，如果需要发送数据给模型，会使用 &lt;code&gt;POST&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求格式 (Request Format):&lt;/strong&gt; 调用 API 时，输入数据应该以什么格式发送？
&lt;ul&gt;
&lt;li&gt;是 JSON 格式吗？如果是，JSON 的结构是怎样的？例如 &lt;code&gt;{&amp;quot;prompt&amp;quot;: &amp;quot;用户输入&amp;quot;}&lt;/code&gt; 或 &lt;code&gt;{&amp;quot;image&amp;quot;: &amp;quot;base64编码的图片数据&amp;quot;}&lt;/code&gt;？&lt;/li&gt;
&lt;li&gt;是表单数据 (Form Data) 吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;响应格式 (Response Format):&lt;/strong&gt; API 成功处理请求后，返回的数据是什么格式？
&lt;ul&gt;
&lt;li&gt;通常也是 JSON 格式。JSON 的结构是怎样的？你需要从中提取哪个字段作为最终结果？例如 &lt;code&gt;{&amp;quot;result&amp;quot;: &amp;quot;模型输出&amp;quot;}&lt;/code&gt; 或 &lt;code&gt;{&amp;quot;label&amp;quot;: &amp;quot;分类结果&amp;quot;, &amp;quot;confidence&amp;quot;: 0.9}&lt;/code&gt;？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. 编写 Gradio 代码:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面是几个不同场景的示例：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：简单的文本输入 -&amp;gt; 文本输出 API&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设你的 API 在 &lt;code&gt;http://127.0.0.1:5000/generate&lt;/code&gt;，接受 &lt;code&gt;POST&lt;/code&gt; 请求，请求体是 &lt;code&gt;{&amp;quot;prompt&amp;quot;: &amp;quot;用户输入文本&amp;quot;}&lt;/code&gt;，响应体是 &lt;code&gt;{&amp;quot;response&amp;quot;: &amp;quot;模型生成文本&amp;quot;}&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;gradio&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;gr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 你本地API的URL和端点&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;API_URL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://127.0.0.1:5000/generate&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 假设端点是 /generate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;call_model_api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    这个函数会被Gradio调用，它负责调用本地API。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;prompt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 构建API需要的请求体&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# 发送POST请求到本地API&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;API_URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;raise_for_status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 如果API返回错误状态码 (如 4xx, 5xx)，则抛出异常&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# 解析API返回的JSON响应&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# 从响应中提取模型输出 (根据你的API实际返回格式调整)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;model_output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;response&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;API did not return &amp;#39;response&amp;#39; field.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 获取 &amp;#39;response&amp;#39; 字段&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model_output&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exceptions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RequestException&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Error calling API: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Error connecting to the API: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JSONDecodeError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Error decoding API response: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Error: Could not decode API response.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;An unexpected error occurred: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;An unexpected error occurred: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 创建 Gradio 界面&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 输入是文本框，输出也是文本框&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;iface&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call_model_api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;# 指定处理函数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Textbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lines&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Enter your prompt here...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 输入组件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;outputs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Textbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Model Response&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 输出组件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Local Model API Interface&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Enter text and get a response from the local model API running at &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;API_URL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 启动 Gradio 应用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;iface&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;launch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Gradio interface running. Access it in your browser.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Make sure your local API is running at &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;API_URL&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例 2：图片输入 -&amp;gt; 文本输出 API&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设你的 API 在 &lt;code&gt;http://127.0.0.1:5000/describe_image&lt;/code&gt;，接受 &lt;code&gt;POST&lt;/code&gt; 请求，请求体是 &lt;code&gt;{&amp;quot;image&amp;quot;: &amp;quot;base64编码的图片数据&amp;quot;}&lt;/code&gt;，响应体是 &lt;code&gt;{&amp;quot;description&amp;quot;: &amp;quot;图片描述&amp;quot;}&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;gradio&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;gr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;base64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;PIL&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Image&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;io&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;API_URL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://127.0.0.1:5000/describe_image&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;call_image_api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    处理图片输入并调用API
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    input_image 是 Gradio 传递过来的 PIL Image 对象 或 NumPy array
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input_image&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Please upload an image.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# 将Gradio的输入图片 (通常是PIL Image或numpy array) 转换为 bytes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# 如果输入是 NumPy array，先转为 PIL Image&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;n&#34;&gt;input_image&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fromarray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;buffered&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BytesIO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;input_image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;save&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffered&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;JPEG&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 或者 PNG, 根据你的模型API偏好&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;img_bytes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffered&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getvalue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# 将图片bytes进行Base64编码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;img_base64&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b64encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# 构建API请求体&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img_base64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# 调用API&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;API_URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;raise_for_status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# 提取结果&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;API did not return &amp;#39;description&amp;#39; field.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exceptions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RequestException&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Error calling API: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;An error occurred: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 创建 Gradio 界面&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;iface&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call_image_api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;pil&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 输入是图片上传组件, type=&amp;#34;pil&amp;#34; 表示接收PIL Image对象&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;outputs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Textbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Image Description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 输出是文本框&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Image Description API&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Upload an image to get its description from the local API.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;iface&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;launch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;关键点总结:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;核心是 &lt;code&gt;requests&lt;/code&gt; 库:&lt;/strong&gt; Gradio 函数内部使用 &lt;code&gt;requests.post(...)&lt;/code&gt; 或 &lt;code&gt;requests.get(...)&lt;/code&gt; 来与你的本地 API 通信。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理解你的 API 是前提:&lt;/strong&gt; 你必须知道 API 的 URL、端点、方法、请求和响应格式，才能正确地构建 &lt;code&gt;payload&lt;/code&gt; 和解析 &lt;code&gt;response&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据格式转换:&lt;/strong&gt; Gradio 组件的输入/输出类型（如 &lt;code&gt;gr.Textbox&lt;/code&gt;, &lt;code&gt;gr.Image(type=&amp;quot;pil&amp;quot;)&lt;/code&gt;）需要和你调用 API 时所需的数据格式进行匹配或转换（例如，将 PIL Image 转换为 Base64 字符串）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误处理:&lt;/strong&gt; 务必添加 &lt;code&gt;try...except&lt;/code&gt; 块来处理网络连接错误、API 返回错误或数据解析错误，给用户友好的反馈。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;启动顺序:&lt;/strong&gt; 先确保你的本地模型 API (&lt;code&gt;127.0.0.1:5000&lt;/code&gt;) 已经成功运行，然后再启动 Gradio 脚本。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过这种方式，Gradio 可以非常灵活地接入任何符合标准 HTTP 协议的本地或远程模型 API。。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Qwen3模型测试结果（包含能本地部署的小参数模型）</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/qwen3%E6%A8%A1%E5%9E%8B%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%E5%8C%85%E5%90%AB%E8%83%BD%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E7%9A%84%E5%B0%8F%E5%8F%82%E6%95%B0%E6%A8%A1%E5%9E%8B/</link>
        <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/qwen3%E6%A8%A1%E5%9E%8B%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%E5%8C%85%E5%90%AB%E8%83%BD%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E7%9A%84%E5%B0%8F%E5%8F%82%E6%95%B0%E6%A8%A1%E5%9E%8B/</guid>
        <description>&lt;p&gt;༼🚀企业级最强开源大模型Qwen3震撼发布！本地部署+全面客观测评！Qwen3-235B-A22B+Qwen3-32B+Qwen3-14B谁是最强王者？ollama+LM Studio+vLLM本地部署 ༽&lt;/p&gt;
&lt;h1 id=&#34;part1-internvl3-ocr能力测试---手写体识别&#34;&gt;part1: InternVL3 OCR能力测试 - 手写体识别
&lt;/h1&gt;&lt;p&gt;好的，这是视频中对Qwen3系列模型测试结果的总结：&lt;/p&gt;
&lt;h1 id=&#34;part-1-qwen3-模型基础能力与幻觉测试&#34;&gt;Part 1: Qwen3 模型基础能力与幻觉测试
&lt;/h1&gt;&lt;p&gt;(04:02-04:30) &lt;em&gt;&lt;strong&gt;1.1: 知识库截止日期测试&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试类型&lt;/strong&gt;：知识库时效性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-235B-A22B&lt;/strong&gt; 的知识库截止日期为 &lt;strong&gt;2024年6月&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-32B&lt;/strong&gt; 的知识库截止日期到 &lt;strong&gt;2024年10月&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-14B&lt;/strong&gt; 的知识库截止日期到 &lt;strong&gt;2024年10月&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者观点&lt;/strong&gt;: 三款模型的知识都比较新。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:30-06:33) &lt;em&gt;&lt;strong&gt;1.2: 幻觉测试（虚构信息辨别）&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试类型&lt;/strong&gt;：模型对明确虚构或不存在信息的辨别能力。
&lt;ul&gt;
&lt;li&gt;数字大小比较 (2.999 vs 2.12345)&lt;/li&gt;
&lt;li&gt;英文单词字母统计 (stresslessness)&lt;/li&gt;
&lt;li&gt;虚构人物（量子信息学家马克·威尔逊教授）&lt;/li&gt;
&lt;li&gt;虚构化学物质（九氧化二氮）&lt;/li&gt;
&lt;li&gt;虚构历史事件（公元前235年秦国与齐国的“稷下之盟”）&lt;/li&gt;
&lt;li&gt;虚构物理理论（反熵矩阵理论）&lt;/li&gt;
&lt;li&gt;虚构文学事件（狄更斯和海明威在巴黎辩论）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数字比较&lt;/strong&gt;：三款模型（235B, 32B, 14B）均&lt;strong&gt;正确&lt;/strong&gt;比较。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字母统计&lt;/strong&gt;：三款模型（235B, 32B, 14B）均&lt;strong&gt;正确&lt;/strong&gt;统计。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;虚构人物/化学物质/物理理论/文学事件&lt;/strong&gt;：三款模型（235B, 32B, 14B）基本都能&lt;strong&gt;正确识别&lt;/strong&gt;出这些是虚构的，没有直接产生幻觉进行编造。&lt;strong&gt;235B&lt;/strong&gt;和&lt;strong&gt;32B&lt;/strong&gt;表现很好，&lt;strong&gt;14B&lt;/strong&gt;（开启思考模式后）也能识别。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;虚构历史事件&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-235B-A22B&lt;/strong&gt;：&lt;strong&gt;正确&lt;/strong&gt;指出该事件没有明确记载。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-32B&lt;/strong&gt;：&lt;strong&gt;产生了幻觉&lt;/strong&gt;，编造了“稷下之盟”的细节内容，这是错误的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-14B&lt;/strong&gt;（开启思考模式）：&lt;strong&gt;正确&lt;/strong&gt;指出该事件不存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者观点&lt;/strong&gt;: Qwen3在辨别虚构信息方面表现不错，尤其是235B和开启思考模式的14B。但32B在虚构历史事件上出现了明显幻觉。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part-2-qwen3-模型逻辑推理与遵循指令能力测试&#34;&gt;Part 2: Qwen3 模型逻辑推理与遵循指令能力测试
&lt;/h1&gt;&lt;p&gt;(07:02-08:15) &lt;em&gt;&lt;strong&gt;2.1: 多维模式识别与逻辑推理测试&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试类型&lt;/strong&gt;：根据规则填充矩阵、寻找序列规律（字母、数字、二进制）。
&lt;ul&gt;
&lt;li&gt;矩阵填充&lt;/li&gt;
&lt;li&gt;字母序列 (OTTFFSSEN&amp;hellip;)&lt;/li&gt;
&lt;li&gt;交替数字序列 (3, 5, 6, 10, 9&amp;hellip;)&lt;/li&gt;
&lt;li&gt;二进制序列 (1, 2, 4, 8&amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;矩阵填充&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-235B-A22B&lt;/strong&gt;：&lt;strong&gt;错误&lt;/strong&gt;，未能解决。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-32B&lt;/strong&gt;：&lt;strong&gt;错误&lt;/strong&gt;，未能解决。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-14B&lt;/strong&gt;（开启思考模式）：&lt;strong&gt;正确&lt;/strong&gt;解决。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;序列规律&lt;/strong&gt;：三款模型（235B, 32B, 14B）对于字母、交替数字、二进制序列均能&lt;strong&gt;正确&lt;/strong&gt;找出规律并补全。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者观点&lt;/strong&gt;: 在矩阵逻辑题上，14B开启思考模式后表现优于两个更大的模型。但在序列规律题上，三者表现都很好。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:15-08:30) &lt;em&gt;&lt;strong&gt;2.2: JSON结构化输出能力测试&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试类型&lt;/strong&gt;：根据给定信息生成包含订单处理逻辑的JSON结构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：请根据以下信息，生成一个包含订单处理逻辑的JSON结构：[包含客户信息、购物车商品、优惠券、物流选项、支付方式等信息]&amp;hellip;请计算最终订单金额&amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-235B-A22B&lt;/strong&gt;：生成的&lt;strong&gt;JSON格式正确&lt;/strong&gt;，但&lt;strong&gt;折扣计算顺序出错&lt;/strong&gt;，导致最终金额有&lt;strong&gt;误差&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-32B&lt;/strong&gt;：生成的&lt;strong&gt;JSON格式正确&lt;/strong&gt;，但出现的&lt;strong&gt;错误较多&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-14B&lt;/strong&gt;（开启思考模式）：生成的&lt;strong&gt;JSON格式和计算结果均正确&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者观点&lt;/strong&gt;: 14B开启思考模式后表现最好，235B次之，32B错误较多。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:01-09:35) &lt;em&gt;&lt;strong&gt;2.3: 混合格式信息提取与结构化输出测试&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试类型&lt;/strong&gt;：将包含CSV、XML、普通文本的混合信息转换为统一的JSON格式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：请将以下混合信息转换为统一的JSON格式：[包含CSV格式的产品信息、XML格式的供应商信息、普通文本的促销活动信息]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：三款模型（235B, 32B, 14B）均能&lt;strong&gt;成功&lt;/strong&gt;将混合格式信息转换为正确的&lt;strong&gt;JSON格式&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者观点&lt;/strong&gt;: 在这个混合格式转换任务上，三款模型表现都非常不错。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:35-10:18) &lt;em&gt;&lt;strong&gt;2.4: 代码理解与SVG格式生成测试&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试类型&lt;/strong&gt;：根据Python冒泡排序代码生成SVG格式的流程图。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：为下面的代码用SVG画出完整的流程图：[Python冒泡排序代码]&amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;三款模型（235B, 32B, 14B）均生成了&lt;strong&gt;SVG代码&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;但是，所有模型生成的SVG代码在浏览器中打开时均&lt;strong&gt;出现报错&lt;/strong&gt;，无法正确渲染成流程图。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者观点&lt;/strong&gt;: 三款模型在生成可用的SVG流程图方面都失败了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(10:18-12:57) &lt;em&gt;&lt;strong&gt;2.5: 农夫过河问题（复杂逻辑推理）&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试类型&lt;/strong&gt;：解决经典的农夫过河逻辑谜题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：农夫带着一只老虎、一只羊、一条蛇、一只鸡和一筐苹果要过河&amp;hellip;[详细规则]&amp;hellip;请问农夫如何才能将老虎、羊、蛇、鸡和苹果安全送到对岸？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-235B-A22B&lt;/strong&gt;：&lt;strong&gt;失败&lt;/strong&gt;。在第五步“农夫带鸡过河”后，分析安全性时&lt;strong&gt;产生幻觉&lt;/strong&gt;，错误地认为“老虎会阻止蛇吃羊”，而规则中蛇不吃羊，导致后续步骤错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-32B&lt;/strong&gt;：&lt;strong&gt;失败&lt;/strong&gt;。在第一步就&lt;strong&gt;出错&lt;/strong&gt;，选择了带鸡过河，违反了鸡会阻止老虎吃羊的规则（虽然原题规则是鸡阻止蛇吃鸡，但此处模型理解或应用规则错误）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-14B&lt;/strong&gt;（开启思考模式）：&lt;strong&gt;失败&lt;/strong&gt;。步骤给出的看似合理，但在第七步“带羊过河”后，对岸状态分析错误，认为有老虎、羊、蛇，此时老虎会吃羊，违反安全规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者观点&lt;/strong&gt;: 这个经典的农夫过河问题&lt;strong&gt;难倒了所有三款Qwen3模型&lt;/strong&gt;，它们在多步复杂逻辑推理和状态跟踪方面存在明显不足，容易产生幻觉或违反规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(12:58-13:36) &lt;em&gt;&lt;strong&gt;2.6: 文档分析能力测试&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试类型&lt;/strong&gt;：基于上传的PDF文档（Phi-4-Mini技术报告）回答问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：[上传PDF后提问] Phi-4-Mini具有多少个Transformer层？隐藏状态大小是多少？它使用的GQA配置具体包含多少个查询头和键/值头？&amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-235B-A22B&lt;/strong&gt;：&lt;strong&gt;正确&lt;/strong&gt;回答了所有问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-32B&lt;/strong&gt;：&lt;strong&gt;部分正确&lt;/strong&gt;，前两个问题回答正确，第三个问题（得分提高百分点）回答错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-14B&lt;/strong&gt;（通过Open WebUI测试）：&lt;strong&gt;失败&lt;/strong&gt;，未能从文档中找到答案。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者观点&lt;/strong&gt;: &lt;strong&gt;235B&lt;/strong&gt;表现最好。&lt;strong&gt;14B&lt;/strong&gt;的失败可能是由于&lt;strong&gt;Open WebUI&lt;/strong&gt;文档解析功能的问题，不完全代表模型本身的能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(13:36-14:17) &lt;em&gt;&lt;strong&gt;2.7: 算法与编程能力测试&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试类型&lt;/strong&gt;：用Python编程实现计算第N个质数，要求不引入外部库。
&lt;ul&gt;
&lt;li&gt;算法题：计算438990637是第多少个质数。&lt;/li&gt;
&lt;li&gt;编程题：设计一个2D物理模拟系统（涉及碰撞、旋转等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;（算法题）：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-235B-A22B&lt;/strong&gt;：给出的&lt;strong&gt;Python代码&lt;/strong&gt;只做了&lt;strong&gt;基本的优化&lt;/strong&gt;，整体效率较低。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-32B&lt;/strong&gt;：给出的代码采用了&lt;strong&gt;更高效&lt;/strong&gt;的方法，通过存储已找到的质数来加速判断。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-14B&lt;/strong&gt;（开启思考模式）：给出的代码&lt;strong&gt;优化程度最高&lt;/strong&gt;，比32B的还要好一些，例如在找到目标后能退出循环。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;（编程题 - 2D物理模拟）：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-235B-A22B&lt;/strong&gt;：生成的&lt;strong&gt;Pygame代码&lt;/strong&gt;无法一次性运行，运行时&lt;strong&gt;闪退&lt;/strong&gt;且没有内容，代码存在&lt;strong&gt;错误&lt;/strong&gt;（如 &amp;lsquo;BLACK&amp;rsquo; is not defined）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-32B&lt;/strong&gt;：生成的代码同样无法一次性运行，运行时&lt;strong&gt;闪退&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-14B&lt;/strong&gt;（开启思考模式）：生成的代码&lt;strong&gt;能够运行&lt;/strong&gt;，并展示了两个六边形和一个移动的小球，但&lt;strong&gt;未完全实现&lt;/strong&gt;题目要求的所有物理特性（如交叉区域弹跳）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者观点&lt;/strong&gt;: 在算法题上，&lt;strong&gt;14B&lt;/strong&gt;和&lt;strong&gt;32B&lt;/strong&gt;的代码优化能力优于&lt;strong&gt;235B&lt;/strong&gt;。在编程题上，只有&lt;strong&gt;14B&lt;/strong&gt;生成的代码能基本运行，但功能不完善，而&lt;strong&gt;235B&lt;/strong&gt;和&lt;strong&gt;32B&lt;/strong&gt;生成的代码都无法直接运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(10:18-10:56) &lt;em&gt;&lt;strong&gt;2.8: 提示词遵循能力与负责问题分析能力测试&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试类型&lt;/strong&gt;：模型是否能严格按照一个复杂的、包含多步骤和格式要求的提示词（Prompt）来分析和回答问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：你现在是一名超级思维解析师&amp;hellip;[详细的多步骤分析要求，包括解析流程规范、使用特定符号、探索多种答案、明确能力边界、审视推理过程、应用最佳实践、JSON格式输出等]&amp;hellip;下面是你要解决的问题：[抛硬币概率问题]。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;三款模型（235B, 32B, 14B）均&lt;strong&gt;未能遵循&lt;/strong&gt;复杂的提示词指令。它们都&lt;strong&gt;只给出了第一步&lt;/strong&gt;（输出包含“步骤”、“标题”、“内容”、“下一步行动”的JSON），而没有继续执行提示词中要求的后续分析步骤。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者观点&lt;/strong&gt;: 这个测试表明，Qwen3系列模型在&lt;strong&gt;严格遵循复杂指令（Prompt Following）&lt;strong&gt;方面存在&lt;/strong&gt;显著的短板&lt;/strong&gt;，这是一个较大的弱点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(10:57-11:48) &lt;em&gt;&lt;strong&gt;2.9: SQL能力测试&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试类型&lt;/strong&gt;：根据给定的数据库表结构（产品表、供应商表、客户表、采购订单表、销售订单表、库存交易表等）和5个具体问题，生成相应的SQL查询语句。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-235B-A22B&lt;/strong&gt;：生成的5个SQL查询语句&lt;strong&gt;全部正确&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-32B&lt;/strong&gt;：第3个问题（供应商绩效）使用的**&lt;code&gt;DATEDIFF&lt;/code&gt;函数语法是SQL Server特有的**，而非通用的或MySQL的语法，其他SQL语句正确。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qwen3-14B&lt;/strong&gt;（开启思考模式）：生成的5个SQL查询语句&lt;strong&gt;全部正确&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者观点&lt;/strong&gt;: &lt;strong&gt;235B&lt;/strong&gt;和&lt;strong&gt;14B&lt;/strong&gt;的SQL能力非常强，&lt;strong&gt;32B&lt;/strong&gt;稍有不足（使用了特定数据库方言）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part-5-总体评价&#34;&gt;Part 5: 总体评价
&lt;/h1&gt;&lt;p&gt;(15:19-15:38) &lt;em&gt;&lt;strong&gt;5.1: 作者总结&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作者观点&lt;/strong&gt;: 通过多方面的测试，可以发现&lt;strong&gt;Qwen3系列模型&lt;/strong&gt;在多方面的能力都&lt;strong&gt;有了很大的提升&lt;/strong&gt;。但是，在&lt;strong&gt;复杂逻辑推理&lt;/strong&gt;（如农夫过河）、&lt;strong&gt;严格遵循提示词指令&lt;/strong&gt;以及&lt;strong&gt;部分代码生成&lt;/strong&gt;（尤其是SVG）方面仍有不足。&lt;strong&gt;14B参数的模型&lt;/strong&gt;在开启&lt;strong&gt;思考模式&lt;/strong&gt;后，其效果常常能&lt;strong&gt;媲美甚至超过&lt;/strong&gt;不开启思考模式的&lt;strong&gt;32B模型&lt;/strong&gt;，有时甚至比&lt;strong&gt;235B模型&lt;/strong&gt;效果还好一些（例如在JSON准确性、算法优化方面）。用户可以根据自己的项目需求和对模型能力侧重的不同，来选择不同参数的版本。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>开源多模态模型InternVL3视觉能力测试</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E5%BC%80%E6%BA%90%E5%A4%9A%E6%A8%A1%E6%80%81%E6%A8%A1%E5%9E%8Binternvl3%E8%A7%86%E8%A7%89%E8%83%BD%E5%8A%9B%E6%B5%8B%E8%AF%95/</link>
        <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E5%BC%80%E6%BA%90%E5%A4%9A%E6%A8%A1%E6%80%81%E6%A8%A1%E5%9E%8Binternvl3%E8%A7%86%E8%A7%89%E8%83%BD%E5%8A%9B%E6%B5%8B%E8%AF%95/</guid>
        <description>&lt;p&gt;༼🚀挑战Gemini 2.5！最强开源企业级OCR大模型InternVL3！本地部署教程+实战测评全纪录，轻松搞定潦草手写汉字、模糊PDF扫描件、模糊复杂表格，效果炸裂超过人眼！支持Open WebUI ༽&lt;/p&gt;
&lt;h1 id=&#34;part1-internvl3-ocr能力测试---手写体识别&#34;&gt;part1: InternVL3 OCR能力测试 - 手写体识别
&lt;/h1&gt;&lt;p&gt;#模型的UI界面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型的UI界面用的是openWebUi
(03:34-04:43)
&lt;em&gt;&lt;strong&gt;1.1: 测试1 - 手写体识别&lt;/strong&gt;&lt;/em&gt;
在&lt;strong&gt;OpenWebUI&lt;/strong&gt;中选择部署好的&lt;strong&gt;OpenGVLab/InternVL3-14B-Instruct&lt;/strong&gt;模型进行测试。
上传一张手写体图片（内容为一首诗）。
&lt;strong&gt;输入指令&lt;/strong&gt;：“提取图上的文字内容, 并保持原有格式输出”。
&lt;strong&gt;测试结果&lt;/strong&gt;：模型&lt;strong&gt;很快&lt;/strong&gt;提取出了图片中的手写文字内容，包括诗的标题“&lt;strong&gt;暮春感怀&lt;/strong&gt;”和最后的签名“&lt;strong&gt;AI超元域-书&lt;/strong&gt;”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:43-05:20)
&lt;em&gt;&lt;strong&gt;1.2: 手写体识别结果比对与评价&lt;/strong&gt;&lt;/em&gt;
将模型提取的文字内容与原图进行逐行比对。
&lt;strong&gt;测试结果&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有诗句内容均&lt;strong&gt;完全正确&lt;/strong&gt;提取。&lt;/li&gt;
&lt;li&gt;诗名后的&lt;strong&gt;破折号 (&amp;ndash;)&lt;/strong&gt; 和签名后的&lt;strong&gt;点号 (.)&lt;/strong&gt; 也被&lt;strong&gt;正确识别&lt;/strong&gt;并提取。
&lt;strong&gt;作者观点&lt;/strong&gt;：对于如此&lt;strong&gt;潦草的手写体&lt;/strong&gt;，包括&lt;strong&gt;标点符号&lt;/strong&gt;都能&lt;strong&gt;正确提取&lt;/strong&gt;，效果&lt;strong&gt;非常好&lt;/strong&gt;。之前测试中只有&lt;strong&gt;Gemini 2.5 Pro&lt;/strong&gt;能达到这个效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:47-07:06)
&lt;em&gt;&lt;strong&gt;1.3: Gradio界面资源监控下的手写体识别测试&lt;/strong&gt;&lt;/em&gt;
使用作者编写的&lt;strong&gt;Gradio脚本&lt;/strong&gt;来实时监控模型推理时的&lt;strong&gt;系统资源&lt;/strong&gt;（CPU、内存、GPU显存）占用情况。
在Gradio界面中再次上传之前的手写体图片。
&lt;strong&gt;输入指令&lt;/strong&gt;：“提取图上的文字内容, 并保持原有格式输出”。
&lt;strong&gt;测试结果&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型再次&lt;strong&gt;成功提取&lt;/strong&gt;了手写内容。&lt;/li&gt;
&lt;li&gt;资源监控显示：&lt;strong&gt;CPU使用率&lt;/strong&gt;有波动，&lt;strong&gt;内存使用&lt;/strong&gt;约&lt;strong&gt;2.53 GB&lt;/strong&gt;（初始）上升至处理时的峰值，&lt;strong&gt;GPU显存&lt;/strong&gt;占用高达&lt;strong&gt;45.71 / 47.99 GB (95.2%)&lt;/strong&gt;（使用单张&lt;strong&gt;A6000&lt;/strong&gt;显卡运行&lt;strong&gt;InternVL3-14B&lt;/strong&gt;模型）。
&lt;strong&gt;作者观点&lt;/strong&gt;： &lt;strong&gt;14B参数&lt;/strong&gt;的模型显存占用较高。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part2-internvl3-ocr能力测试---发票与重叠文字识别&#34;&gt;part2: InternVL3 OCR能力测试 - 发票与重叠文字识别
&lt;/h1&gt;&lt;p&gt;(07:06-08:04)
&lt;em&gt;&lt;strong&gt;2.1: 测试2 - 发票扫描件识别（含模糊与重叠文字）&lt;/strong&gt;&lt;/em&gt;
上传一张发票扫描件图片，图片中包含&lt;strong&gt;模糊文字&lt;/strong&gt;和&lt;strong&gt;重叠文字&lt;/strong&gt;。
&lt;strong&gt;输入指令&lt;/strong&gt;：“提取图上的文字内容, 并保持原有格式输出”。
&lt;strong&gt;测试结果&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型将提取内容输出到&lt;strong&gt;code block&lt;/strong&gt;中。&lt;/li&gt;
&lt;li&gt;发票顶部的英文公司信息和地址&lt;strong&gt;完全正确&lt;/strong&gt;提取。&lt;/li&gt;
&lt;li&gt;发票号码、日期、付款条件、到期日等信息&lt;strong&gt;完全正确&lt;/strong&gt;提取。&lt;/li&gt;
&lt;li&gt;客户信息（公司名、联系人、地址、电话、客户编号）&lt;strong&gt;完全正确&lt;/strong&gt;提取。&lt;/li&gt;
&lt;li&gt;项目明细部分：
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;云服务器租用 / Cloud Server Hosting&amp;rdquo; 行：&lt;strong&gt;完全正确&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&amp;ldquo;企业数据备份服务 / Data Backup Service&amp;rdquo; 行：&lt;strong&gt;价格部分存在重叠文字（¥3,500.00与$900.00重叠），模型正确识别并提取为 ¥3,500.00&lt;/strong&gt;，数量“1项”也正确。&lt;/li&gt;
&lt;li&gt;&amp;ldquo;技术支持 / Technical Support&amp;rdquo; 行：&lt;strong&gt;价格部分存在重叠文字（¥19,200.00与¥800.00重叠），模型正确识别并提取为 ¥19,200.00&lt;/strong&gt;，数量“24小时”也正确。&lt;/li&gt;
&lt;li&gt;&amp;ldquo;软件许可证 / Software License&amp;rdquo; 行：&lt;strong&gt;完全正确&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&amp;ldquo;安全审计服务 / Security Audit&amp;rdquo; 行：&lt;strong&gt;完全正确&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;小计、税额、总计金额&lt;strong&gt;完全正确&lt;/strong&gt;提取。&lt;/li&gt;
&lt;li&gt;付款方式、银行转账、账户名、银行、账号、Swift代码等信息&lt;strong&gt;完全正确&lt;/strong&gt;提取。&lt;/li&gt;
&lt;li&gt;唯一识别错误：在重叠的 &amp;ldquo;Data Backup Service&amp;rdquo; 价格处，模型输出为&lt;code&gt;¥3,500.00&lt;/code&gt;，原始应为&lt;code&gt;¥3,500.00&lt;/code&gt;，识别出了重叠内容但未能完全还原格式（原图重叠了$900和¥3500）。 &lt;em&gt;修正：仔细观察视频，应是¥3,500.00与$9,560.00重叠，模型识别为&lt;code&gt;¥3,500.00&lt;/code&gt;，识别是正确的。&lt;/em&gt;
&lt;strong&gt;作者观点&lt;/strong&gt;：效果&lt;strong&gt;非常不错&lt;/strong&gt;，特别是能处理&lt;strong&gt;重叠文字&lt;/strong&gt;的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part3-internvl3-ocr能力测试---模糊pdf扫描件识别含表格和代码&#34;&gt;part3: InternVL3 OCR能力测试 - 模糊PDF扫描件识别（含表格和代码）
&lt;/h1&gt;&lt;p&gt;(08:04-09:03)
&lt;em&gt;&lt;strong&gt;3.1: 测试3 - 模糊PDF扫描件识别&lt;/strong&gt;&lt;/em&gt;
上传一张&lt;strong&gt;非常模糊&lt;/strong&gt;的PDF扫描件图片，包含普通文本、一个表格和一段代码。
&lt;strong&gt;输入指令&lt;/strong&gt;：“提取图上的文字内容, 并保持原有格式输出”。
&lt;strong&gt;测试结果&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文档标题“&lt;strong&gt;AI超元域原创视频-文档扫描测试&lt;/strong&gt;”&lt;strong&gt;正确&lt;/strong&gt;提取。&lt;/li&gt;
&lt;li&gt;开头的英文段落 (Lorem ipsum&amp;hellip;) &lt;strong&gt;正确&lt;/strong&gt;提取。&lt;/li&gt;
&lt;li&gt;中间的中文段落及三个要点（第一点、第二点、第三点）&lt;strong&gt;均正确&lt;/strong&gt;提取，并保持了原有的格式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表格&lt;/strong&gt;内容（包括表头“项目”、“描述”、“状态”及三行测试数据）&lt;strong&gt;完全正确&lt;/strong&gt;提取。&lt;/li&gt;
&lt;li&gt;底部的&lt;strong&gt;非常模糊的代码段&lt;/strong&gt; (function testAIVision()&amp;hellip;) &lt;strong&gt;也完全正确&lt;/strong&gt;地提取出来，并&lt;strong&gt;保持了原有的代码格式&lt;/strong&gt;。
&lt;strong&gt;作者观点&lt;/strong&gt;：即使文档&lt;strong&gt;非常模糊&lt;/strong&gt;，模型依然能够&lt;strong&gt;准确&lt;/strong&gt;提取文本、表格和代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part4-internvl3-ocr能力测试---复杂模糊pdf扫描件识别含噪声&#34;&gt;part4: InternVL3 OCR能力测试 - 复杂模糊PDF扫描件识别（含噪声）
&lt;/h1&gt;&lt;p&gt;(09:04-10:11)
&lt;em&gt;&lt;strong&gt;4.1: 测试4 - 带噪声的复杂模糊PDF扫描件识别&lt;/strong&gt;&lt;/em&gt;
上传一张&lt;strong&gt;更加模糊且复杂&lt;/strong&gt;的PDF扫描件，包含标题、文本和一个带有&lt;strong&gt;人为添加的红色线条噪声&lt;/strong&gt;的表格。
&lt;strong&gt;输入指令&lt;/strong&gt;：“提取图上的文字内容, 并保持原有格式输出”。
&lt;strong&gt;测试结果&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;报告标题“&lt;strong&gt;研究报告：人工智能在现代商业中的应用&lt;/strong&gt;”和副标题“&lt;strong&gt;3.2 行业应用案例分析&lt;/strong&gt;”&lt;strong&gt;正确&lt;/strong&gt;提取。&lt;/li&gt;
&lt;li&gt;第一段中文长文本内容&lt;strong&gt;正确&lt;/strong&gt;提取。&lt;/li&gt;
&lt;li&gt;包含&lt;strong&gt;人为噪声&lt;/strong&gt;的&lt;strong&gt;表格&lt;/strong&gt;内容&lt;strong&gt;完全正确&lt;/strong&gt;提取，模型&lt;strong&gt;成功忽略了噪声&lt;/strong&gt;。其中“医疗健康”行，“投资回报率”列的数值&lt;strong&gt;128.7&lt;/strong&gt;，即使带有噪声干扰，也&lt;strong&gt;正确提取&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;表格下方的引用说明文字“*人工智能的商业价值&amp;hellip;”&lt;strong&gt;基本正确&lt;/strong&gt;提取，但遗漏了中间非常模糊的一小段文字（“各行业AI技术采用及投资回报分析&amp;hellip;”）。&lt;/li&gt;
&lt;li&gt;图例说明“&lt;strong&gt;图7: AI技术投资与业务绩效相关性分析&lt;/strong&gt;”&lt;strong&gt;正确&lt;/strong&gt;提取。&lt;/li&gt;
&lt;li&gt;最下方的“AI商业应用研究系列&amp;hellip;”&lt;strong&gt;正确&lt;/strong&gt;提取。
&lt;strong&gt;作者观点&lt;/strong&gt;：&lt;strong&gt;非常难得&lt;/strong&gt;，模型不仅处理了模糊性，还&lt;strong&gt;有效忽略了表格中的噪声&lt;/strong&gt;，提取结果&lt;strong&gt;非常准确&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part5-internvl3-ocr能力测试---复杂模糊表格扫描件识别&#34;&gt;part5: InternVL3 OCR能力测试 - 复杂模糊表格扫描件识别
&lt;/h1&gt;&lt;p&gt;(10:11-10:50)
&lt;em&gt;&lt;strong&gt;5.1: 测试5 - 复杂模糊表格扫描件识别&lt;/strong&gt;&lt;/em&gt;
上传一张包含&lt;strong&gt;非常模糊且复杂表格&lt;/strong&gt;的扫描件图片，表格中部分文字&lt;strong&gt;超出了单元格边界&lt;/strong&gt;。
&lt;strong&gt;输入指令&lt;/strong&gt;：“提取图上的文字内容, 并保持原有格式输出”。
&lt;strong&gt;测试结果&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型使用&lt;strong&gt;Markdown格式&lt;/strong&gt;输出了表格内容。&lt;/li&gt;
&lt;li&gt;经过仔细比对，表格的&lt;strong&gt;所有内容&lt;/strong&gt;，包括那些&lt;strong&gt;超出单元格的文字&lt;/strong&gt;，都被&lt;strong&gt;完全正确&lt;/strong&gt;地提取出来。&lt;/li&gt;
&lt;li&gt;表格下方的表注“&lt;strong&gt;表1: AI超元域2024-2025年度项目进度表&lt;/strong&gt;”和页码信息“&lt;strong&gt;第1页，共5页&lt;/strong&gt;”也&lt;strong&gt;完全正确&lt;/strong&gt;提取。
&lt;strong&gt;作者观点&lt;/strong&gt;：即使表格&lt;strong&gt;非常模糊和复杂&lt;/strong&gt;，提取结果依然&lt;strong&gt;完全正确&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part6-internvl3-ocr能力测试---图像理解与描述&#34;&gt;part6: InternVL3 OCR能力测试 - 图像理解与描述
&lt;/h1&gt;&lt;p&gt;(10:50-11:27)
&lt;em&gt;&lt;strong&gt;6.1: 测试6 - 线条画（Meme图）描述&lt;/strong&gt;&lt;/em&gt;
上传一张&lt;strong&gt;线条画&lt;/strong&gt;（Meme图）图片。
&lt;strong&gt;输入指令&lt;/strong&gt;：“描述这张图”。
&lt;strong&gt;测试结果&lt;/strong&gt;：模型&lt;strong&gt;正确识别&lt;/strong&gt;出这是一幅&lt;strong&gt;线条画 (line drawing)&lt;/strong&gt;，描绘了一个&lt;strong&gt;聚会场景 (party scene)&lt;/strong&gt;，并准确描述了图中&lt;strong&gt;五个人物&lt;/strong&gt;各自的位置和动作状态。
&lt;strong&gt;作者观点&lt;/strong&gt;：对图像内容的&lt;strong&gt;描述基本正确&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part7-internvl3-ocr能力测试---流程图理解与代码生成&#34;&gt;part7: InternVL3 OCR能力测试 - 流程图理解与代码生成
&lt;/h1&gt;&lt;p&gt;(11:27-12:53)
&lt;em&gt;&lt;strong&gt;7.1: 测试7 - 流程图转Python代码&lt;/strong&gt;&lt;/em&gt;
上传一张&lt;strong&gt;流程图&lt;/strong&gt;图片，该流程图展示的是&lt;strong&gt;冒泡排序 (bubble sort)&lt;/strong&gt; 算法。
&lt;strong&gt;输入指令&lt;/strong&gt;：“请根据图上的流程, 用python给出完整的代码”。
&lt;strong&gt;测试结果&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型&lt;strong&gt;成功识别&lt;/strong&gt;出流程图代表的是&lt;strong&gt;冒泡排序算法&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;生成了相应的&lt;strong&gt;Python代码&lt;/strong&gt;来实现该算法。&lt;/li&gt;
&lt;li&gt;将生成的代码复制到代码编辑器中&lt;strong&gt;运行测试&lt;/strong&gt;，代码&lt;strong&gt;能够成功运行&lt;/strong&gt;并输出了&lt;strong&gt;正确的排序结果&lt;/strong&gt; ([11, 12, 22, 25, 34, 64, 90])。
&lt;strong&gt;作者观点&lt;/strong&gt;：模型能够&lt;strong&gt;识别流程图&lt;/strong&gt;的逻辑，并将其&lt;strong&gt;转换为可运行的Python代码&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part8-总结与评价&#34;&gt;part8: 总结与评价
&lt;/h1&gt;&lt;p&gt;(12:53-13:11)
&lt;em&gt;&lt;strong&gt;8.1: 作者最终评价&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;作者观点&lt;/strong&gt;：通过多方面和多角度的测试，可以发现 &lt;strong&gt;InternVL3-14B-Instruct&lt;/strong&gt; 这款模型的&lt;strong&gt;OCR能力还是非常强的&lt;/strong&gt;。即使面对&lt;strong&gt;非常模糊&lt;/strong&gt;的图像，模型也能&lt;strong&gt;成功提取&lt;/strong&gt;图像上的文字内容。对于需要在&lt;strong&gt;本地部署&lt;/strong&gt;进行&lt;strong&gt;OCR任务&lt;/strong&gt;的企业项目来说，这款模型是一个&lt;strong&gt;非常不错的选择&lt;/strong&gt;。视频中用到的代码和指令会放在&lt;strong&gt;视频下方描述栏&lt;/strong&gt;或&lt;strong&gt;评论区&lt;/strong&gt;，以及作者的&lt;strong&gt;博客 (&lt;a class=&#34;link&#34; href=&#34;https://www.aivi.fyi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.aivi.fyi&lt;/a&gt;)&lt;/strong&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>生成什么样的规则有点用</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E7%94%9F%E6%88%90%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E8%A7%84%E5%88%99%E6%9C%89%E7%82%B9%E7%94%A8/</link>
        <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E7%94%9F%E6%88%90%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E8%A7%84%E5%88%99%E6%9C%89%E7%82%B9%E7%94%A8/</guid>
        <description>&lt;p&gt;༼ ༽
【规则（从cursor一键生成的规则文件中了解到了 规则这个系统提示词） &lt;a class=&#34;link&#34; href=&#34;https://aistudio.google.com/prompts/1RttnSD3EpA0wXkzaz9uGrsp8V-vFvgDT&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://aistudio.google.com/prompts/1RttnSD3EpA0wXkzaz9uGrsp8V-vFvgDT&lt;/a&gt;】
[0 生成规则即便靠现成的完整项目]
《AI 生成规则的过程，不仅仅是为了让 AI 自己 后续能理解，也是一个帮助开发者（包括新手）梳理和理解项目的过程。生成的规则文件本身就是一种结构化的项目文档》
[1 什么是规则]
《规则就是输出规则，是AI理解和遵循的项目“说明书”和“行为准则”，AI会主动参考这些规则来约束和指导自己的输出，可以将规则理解为更结构化、更持久化、更具项目针对性的“系统提示”或“背景知识文档”,》&amp;gt;
[2 创建规则 (core.mdc) ]
&amp;lt;用法：定义Plan/Act 模式，把该规则投喂给AI后，就能指示AI在处理复杂任务时，先输出规划步骤（Plan），待你确认或修改后，再通过特定指令（如输入 ACT）触发它执行具体的代码生成（Act），就是AI客户端的chat模式和build模式&amp;gt;
[3 项目结构规则 (project-structure.mdc, file-structure.mdc)]
&amp;lt;用法：让AI创建新文件、重构代码或添加新功能时，AI会参考这些规则，确保新生成的文件被放置在项目约定的正确位置，并遵循推荐的命名方式&amp;gt;
[4 页面结构规则 (page-structure.mdc)]
&amp;lt;用法：当AI需要生成或修改某个页面时，它会依据此规则来组织页面的HTML结构或组件嵌套，确保页面符合既定的设计和布局规范&amp;gt;
[5 样式规则 (styles.mdc)]
&amp;lt;用法：在生成UI组件或修改样式时，会遵循这些规则来编写CSS或使用预定义的样式类/变量，从而保证整个项目的视觉风格一致性。这可以避免AI随意添加样式或使用不符合规范的写法&amp;gt;
[6 UI组件规则 (ui-components.mdc)]
&amp;lt;用法： AI在构建界面时，会知道可以使用哪些现成的组件，以及如何正确地使用它们&amp;gt;
[7 项目状态规则 (project-status.mdc)、主索引文件 (index.mdc)]
《用法：这更像是一个供AI和开发者参考的项目日志或看板。AI可以读取它来了解项目当前状态&amp;gt;
[8 项目概述规则 (project-overview.mdc)]
《用法：给AI一个关于项目的基础背景和整体印象，帮助AI在处理更广泛或战略性的问题时，能更好地理解上下文》
[9 测试规则 (testing.mdc)]
&amp;lt;用法：当你要求AI为某个功能编写测试时，AI会按照这些规则来生成测试代码，确保测试符合项目的整体标准和实践&amp;gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>用gemini测网络质量</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E7%94%A8gemini%E6%B5%8B%E7%BD%91%E7%BB%9C%E8%B4%A8%E9%87%8F/</link>
        <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E7%94%A8gemini%E6%B5%8B%E7%BD%91%E7%BB%9C%E8%B4%A8%E9%87%8F/</guid>
        <description>&lt;p&gt;༼ ༽&lt;/p&gt;
&lt;p&gt;#测试CDN的速度或节点速度的行不行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用gemin2.5pro就能轻松测出来，无论是在cursor还是在google ai studio
&lt;ul&gt;
&lt;li&gt;♐如果节点速度不行，那么用cursor跑gemini2.5pro就经常跑失败，cursor连续两次跑gemin2.5pro失败那一定是网络问题&lt;/li&gt;
&lt;li&gt;♒google ai studio同理，google ai studio跑gemini模型对网络要求非常高，连续两次跑模型失败那就是网络问题&lt;/li&gt;
&lt;li&gt;♒google ai stuido对视频提取的网络要求变高了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>用LMDeploy本地linux系统部署InternVL3</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E7%94%A8lmdeploy%E6%9C%AC%E5%9C%B0linux%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2internvl3/</link>
        <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E7%94%A8lmdeploy%E6%9C%AC%E5%9C%B0linux%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2internvl3/</guid>
        <description>&lt;p&gt;༼ 🚀挑战Gemini 2.5！最强开源企业级OCR大模型InternVL3！本地部署教程+实战测评全纪录，轻松搞定潦草手写汉字、模糊PDF扫描件、模糊复杂表格，效果炸裂超过人眼！支持Open WebUI༽&lt;/p&gt;
&lt;h1 id=&#34;part1-环境准备与依赖安装&#34;&gt;part1: 环境准备与依赖安装
&lt;/h1&gt;&lt;p&gt;(01:30-01:53)
&lt;em&gt;&lt;strong&gt;1.1: 运行环境说明&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;作者提到的关键信息&lt;/strong&gt;: 演示将在&lt;strong&gt;Ubuntu系统&lt;/strong&gt;上进行，使用&lt;strong&gt;RTX A6000&lt;/strong&gt;显卡。
&lt;strong&gt;作者建议&lt;/strong&gt;: Windows系统用户需要在Windows上&lt;strong&gt;开启WSL (Windows Subsystem for Linux)&lt;/strong&gt; 才能进行后续操作。作者提供了微软官方关于如何安装WSL的文档链接。
&lt;strong&gt;目的&lt;/strong&gt;: 明确演示所使用的硬件和操作系统环境，并为Windows用户提供前置条件说明。&lt;/p&gt;
&lt;p&gt;(01:53-02:04)
&lt;em&gt;&lt;strong&gt;1.2: 安装Miniconda&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;关键操作&lt;/strong&gt;: 通过命令行执行一系列指令 (&lt;code&gt;wget&lt;/code&gt;, &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;eval&lt;/code&gt;, &lt;code&gt;echo&lt;/code&gt;, &lt;code&gt;source&lt;/code&gt;) 下载并安装&lt;strong&gt;Miniconda&lt;/strong&gt;。
&lt;strong&gt;画面内容&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 安装Miniconda (如果尚未安装)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bash ~/miniconda.sh -b -p &lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/miniconda
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/miniconda/bin/conda shell.bash hook&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;export PATH=&amp;#34;$HOME/miniconda/bin:$PATH&amp;#34;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;目的&lt;/strong&gt;: &lt;strong&gt;安装Conda环境管理器&lt;/strong&gt;，用于后续创建和管理Python虚拟环境。
&lt;strong&gt;结果&lt;/strong&gt;: &lt;strong&gt;Miniconda&lt;/strong&gt;成功安装并配置好环境变量。&lt;/p&gt;
&lt;p&gt;(02:04-02:14)
&lt;em&gt;&lt;strong&gt;1.3: 创建并激活Conda虚拟环境&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;关键操作&lt;/strong&gt;: 使用&lt;code&gt;conda create&lt;/code&gt;指令创建一个名为&lt;code&gt;lmdeploy&lt;/code&gt;的&lt;strong&gt;Python 3.11&lt;/strong&gt;虚拟环境，并通过&lt;code&gt;conda activate&lt;/code&gt;指令激活该环境。
&lt;strong&gt;画面内容&lt;/strong&gt;: &lt;code&gt;conda create -n lmdeploy python=3.11 -y &amp;amp;&amp;amp; conda activate lmdeploy&lt;/code&gt;
&lt;strong&gt;目的&lt;/strong&gt;: 为模型部署创建一个&lt;strong&gt;隔离的Python环境&lt;/strong&gt;，避免依赖冲突。
&lt;strong&gt;结果&lt;/strong&gt;: 名为&lt;code&gt;lmdeploy&lt;/code&gt;的Conda环境被成功创建并激活，终端提示符前缀变为&lt;code&gt;(lmdeploy)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;(02:14-02:24)
&lt;em&gt;&lt;strong&gt;1.4: 安装LMDeploy&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;作者提到的关键信息&lt;/strong&gt;: 本次部署将使用&lt;strong&gt;LMDeploy&lt;/strong&gt;工具包。
&lt;strong&gt;关键操作&lt;/strong&gt;: 在已激活的&lt;code&gt;lmdeploy&lt;/code&gt;环境中使用&lt;code&gt;pip install&lt;/code&gt;指令安装&lt;strong&gt;LMDeploy&lt;/strong&gt;。
&lt;strong&gt;画面内容&lt;/strong&gt;: 命令行执行 &lt;code&gt;pip install lmdeploy&lt;/code&gt; (演示脚本中为 &lt;code&gt;pip install lmdeploy&amp;gt;=0.7.3&lt;/code&gt;)。
&lt;strong&gt;目的&lt;/strong&gt;: 安装核心的模型部署工具&lt;strong&gt;LMDeploy&lt;/strong&gt;。
&lt;strong&gt;结果&lt;/strong&gt;: &lt;strong&gt;LMDeploy&lt;/strong&gt;及其相关依赖包被成功下载并安装到&lt;code&gt;lmdeploy&lt;/code&gt;环境中。&lt;/p&gt;
&lt;p&gt;(02:25-02:30)
&lt;em&gt;&lt;strong&gt;1.5: 安装额外依赖包&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;关键操作&lt;/strong&gt;: 使用&lt;code&gt;pip install&lt;/code&gt;指令安装&lt;code&gt;partial_json_parser&lt;/code&gt;和&lt;code&gt;timm&lt;/code&gt;这两个库。
&lt;strong&gt;画面内容&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install partial_json_parser
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install timm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;目的&lt;/strong&gt;: 安装运行&lt;strong&gt;InternVL3&lt;/strong&gt;模型或&lt;strong&gt;LMDeploy&lt;/strong&gt;可能需要的&lt;strong&gt;额外Python库&lt;/strong&gt;。
&lt;strong&gt;结果&lt;/strong&gt;: &lt;code&gt;partial_json_parser&lt;/code&gt;和&lt;code&gt;timm&lt;/code&gt;被成功安装。&lt;/p&gt;
&lt;h1 id=&#34;part2-使用lmdeploy部署模型api服务&#34;&gt;part2: 使用LMDeploy部署模型API服务
&lt;/h1&gt;&lt;p&gt;(02:30-03:05)
&lt;em&gt;&lt;strong&gt;2.1: ♐启动模型API服务器&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;关键操作&lt;/strong&gt;: 执行&lt;code&gt;lmdeploy serve api_server&lt;/code&gt;指令来启动模型服务。
&lt;strong&gt;画面内容&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lmdeploy serve api_server OpenGVLab/InternVL3-14B-Instruct --backend turbomind --server-port &lt;span class=&#34;m&#34;&gt;23333&lt;/span&gt; --tp &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; --chat-template internvl2_5
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;作者提到的关键信息&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令指定了要部署的模型为 &lt;code&gt;OpenGVLab/InternVL3-14B-Instruct&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;使用了&lt;code&gt;turbomind&lt;/code&gt;作为推理后端 (&lt;code&gt;--backend turbomind&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;指定服务器端口为&lt;code&gt;23333&lt;/code&gt; (&lt;code&gt;--server-port 23333&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;设置&lt;strong&gt;张量并行 (Tensor Parallelism)&lt;/strong&gt; 为2 (&lt;code&gt;--tp 2&lt;/code&gt;)，表示使用2块GPU进行推理。&lt;/li&gt;
&lt;li&gt;指定了聊天模板为&lt;code&gt;internvl2_5&lt;/code&gt; (&lt;code&gt;--chat-template internvl2_5&lt;/code&gt;)。
&lt;strong&gt;作者建议&lt;/strong&gt;: 如果只有一块GPU，应将&lt;code&gt;--tp&lt;/code&gt;参数设置为&lt;code&gt;1&lt;/code&gt;。
&lt;strong&gt;目的&lt;/strong&gt;: 将&lt;strong&gt;InternVL3-14B-Instruct&lt;/strong&gt;模型加载到GPU，并通过&lt;strong&gt;LMDeploy&lt;/strong&gt;启动一个&lt;strong&gt;兼容OpenAI API&lt;/strong&gt;的HTTP服务，以便后续应用调用。
&lt;strong&gt;结果&lt;/strong&gt;: &lt;strong&gt;LMDeploy&lt;/strong&gt;开始下载模型权重文件（&lt;code&gt;.safetensors&lt;/code&gt;），下载完成后加载模型并启动&lt;strong&gt;Uvicorn Web服务器&lt;/strong&gt;。服务器成功运行在&lt;code&gt;http://0.0.0.0:23333&lt;/code&gt;，并提示可以在浏览器中打开该地址查看API详情（Swagger UI）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part3-安装并配置openwebui&#34;&gt;part3: 安装并配置OpenWebUI
&lt;/h1&gt;&lt;p&gt;(03:05-03:32)
&lt;em&gt;&lt;strong&gt;3.1: 安装并启动OpenWebUI&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;作者提到的关键信息&lt;/strong&gt;: 使用&lt;strong&gt;OpenWebUI&lt;/strong&gt;作为与模型API交互的前端界面。
&lt;strong&gt;关键操作&lt;/strong&gt;: 使用&lt;code&gt;pip install open-webui&lt;/code&gt;指令安装&lt;strong&gt;OpenWebUI&lt;/strong&gt;。
&lt;strong&gt;画面内容&lt;/strong&gt;: &lt;code&gt;pip install open-webui&lt;/code&gt;
&lt;strong&gt;目的&lt;/strong&gt;: 安装Web用户界面。
&lt;strong&gt;结果&lt;/strong&gt;: &lt;strong&gt;OpenWebUI&lt;/strong&gt;安装完成。
&lt;strong&gt;关键操作&lt;/strong&gt;: 使用&lt;code&gt;open-webui serve&lt;/code&gt;指令启动&lt;strong&gt;OpenWebUI&lt;/strong&gt;服务。
&lt;strong&gt;画面内容&lt;/strong&gt;: &lt;code&gt;open-webui serve&lt;/code&gt;
&lt;strong&gt;目的&lt;/strong&gt;: 运行Web界面服务器。
&lt;strong&gt;结果&lt;/strong&gt;: &lt;strong&gt;OpenWebUI&lt;/strong&gt;服务启动，可以通过浏览器访问&lt;code&gt;localhost:8080&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;(03:32-04:06)
&lt;em&gt;&lt;strong&gt;3.2: 配置OpenWebUI连接模型API&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;关键操作&lt;/strong&gt;: 在浏览器中打开&lt;code&gt;localhost:8080&lt;/code&gt;访问&lt;strong&gt;OpenWebUI&lt;/strong&gt;。
&lt;strong&gt;关键操作&lt;/strong&gt;: 点击左下角头像 -&amp;gt; 设置 -&amp;gt; 管理员设置 -&amp;gt; 外部连接。
&lt;strong&gt;关键操作&lt;/strong&gt;: 确认“&lt;strong&gt;OpenAI API&lt;/strong&gt;”开关已打开。
&lt;strong&gt;关键操作&lt;/strong&gt;: 在“管理OpenAI API连接”的输入框中，填入由&lt;strong&gt;LMDeploy&lt;/strong&gt;启动的API服务器地址。
&lt;strong&gt;作者提到的关键信息&lt;/strong&gt;: API地址应为&lt;code&gt;http://[部署服务器的IP地址]:23333/v1&lt;/code&gt;。视频中示例为&lt;code&gt;http://192.168.1.105:23333/v1&lt;/code&gt;。
&lt;strong&gt;关键操作&lt;/strong&gt;: 点击右下角的“保存”按钮。
&lt;strong&gt;关键操作&lt;/strong&gt;: 返回主界面，点击左上角“新建对话”。
&lt;strong&gt;关键操作&lt;/strong&gt;: 在模型选择下拉菜单中，选择刚刚部署的模型 &lt;code&gt;OpenGVLab/InternVL3-14B-Instruct&lt;/code&gt;。
&lt;strong&gt;目的&lt;/strong&gt;: 将&lt;strong&gt;OpenWebUI&lt;/strong&gt;前端指向本地运行的&lt;strong&gt;InternVL3模型API&lt;/strong&gt;，使其能够调用该模型进行交互。
&lt;strong&gt;结果&lt;/strong&gt;: &lt;strong&gt;OpenWebUI&lt;/strong&gt;成功连接到本地部署的模型API，可以在聊天界面中选择并使用&lt;code&gt;OpenGVLab/InternVL3-14B-Instruct&lt;/code&gt;模型。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FastAPI:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定位:&lt;/strong&gt; FastAPI 是一个&lt;strong&gt;通用的、高性能的Python Web框架&lt;/strong&gt;，用于构建API（应用程序接口）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用:&lt;/strong&gt; 它的核心功能是&lt;strong&gt;创建Web服务和API端点&lt;/strong&gt;。在模型部署的场景中，你可以使用FastAPI来编写代码，定义模型的输入/输出接口，接收用户请求，调用模型进行推理，然后将结果返回给用户。♈它本身&lt;strong&gt;不包含&lt;/strong&gt;模型加载、优化或推理执行的功能，♐你需要自己集成这些逻辑（例如使用&lt;code&gt;transformers&lt;/code&gt;库加载模型，用PyTorch/TensorFlow进行推理）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类比:&lt;/strong&gt; 它更像是建造房屋的**“脚手架”或“工具箱”**，提供了构建API的基础结构，但具体的模型推理逻辑需要你自己实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ollama:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定位:&lt;/strong&gt; Ollama 是一个&lt;strong&gt;简化在本地运行大型语言模型（LLM）的工具&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用:&lt;/strong&gt; 它&lt;strong&gt;打包了&lt;/strong&gt;运行多种开源LLM所需的环境、模型权重下载和管理，并&lt;strong&gt;内置了一个API服务器&lt;/strong&gt;（通常兼容OpenAI API格式）。用户可以通过简单的命令 (&lt;code&gt;ollama run model_name&lt;/code&gt;) 快速启动并与模型交互，或者通过其提供的API进行调用。它的&lt;strong&gt;重点在于易用性和本地快速体验&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类比:&lt;/strong&gt; 它更像是一个**“开箱即用的LLM运行器”**，帮你处理了很多底层的配置和模型管理，让你能快速用上各种模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;LMDeploy:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定位:&lt;/strong&gt; LMDeploy 是一个专注于&lt;strong&gt;大型语言模型（LLM）的高效部署工具包&lt;/strong&gt;，由InternLM团队开发。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用:&lt;/strong&gt; 它提供了&lt;strong&gt;模型转换、推理引擎（如TurboMind）优化、量化&lt;/strong&gt;以及&lt;strong&gt;API服务部署&lt;/strong&gt;等一系列功能。它的&lt;strong&gt;核心优势在于推理性能优化&lt;/strong&gt;，可以显著提升LLM的推理速度并降低显存占用。它也提供了一个&lt;strong&gt;开箱即用的API服务器&lt;/strong&gt;（如视频中展示的&lt;code&gt;lmdeploy serve api_server&lt;/code&gt;），并且这个服务器也&lt;strong&gt;兼容OpenAI API格式&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类比:&lt;/strong&gt; 它更像是一个**“高性能LLM部署与服务引擎”**，不仅帮你部署模型并提供API，还着重于优化模型的运行效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;总结与比较：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;相似之处:&lt;/strong&gt; LMDeploy 和 Ollama 都提供了&lt;strong&gt;相对完整的、用于运行LLM并提供API服务&lt;/strong&gt;的功能，都致力于简化模型部署的过程，并且都提供了兼容OpenAI的API接口，方便与其他应用集成。从这个角度看，LMDeploy和Ollama更像是同类工具，都是&lt;strong&gt;LLM Serving（服务）框架/工具&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不同之处:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LMDeploy vs Ollama:&lt;/strong&gt; LMDeploy 更侧重于&lt;strong&gt;推理性能优化&lt;/strong&gt;（特别是对于InternLM系列模型，利用TurboMind等引擎），提供更细致的部署配置选项（如张量并行）；而Ollama更侧重于&lt;strong&gt;跨模型兼容性和本地运行的便捷性&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LMDeploy/Ollama vs FastAPI:&lt;/strong&gt; FastAPI 是一个&lt;strong&gt;更底层的Web框架&lt;/strong&gt;，用于构建各种API，包括模型API。而LMDeploy和Ollama是&lt;strong&gt;更高层、更专注于LLM部署的解决方案&lt;/strong&gt;，它们内部可能使用了类似FastAPI/Uvicorn这样的Web框架来构建其API服务部分，但它们还封装了模型加载、优化、推理和管理等更多功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;简单来说：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;♈如果你想&lt;strong&gt;快速在本地跑各种开源LLM&lt;/strong&gt;，并且不太关心极致的性能优化，&lt;strong&gt;Ollama&lt;/strong&gt; 是个好选择。&lt;/li&gt;
&lt;li&gt;♈如果你想&lt;strong&gt;高效地部署特定（尤其是InternLM系列）的LLM&lt;/strong&gt;，追求&lt;strong&gt;推理速度和低资源占用&lt;/strong&gt;，并需要一个兼容OpenAI的API服务，&lt;strong&gt;LMDeploy&lt;/strong&gt; 是一个强大的工具。&lt;/li&gt;
&lt;li&gt;如果你想&lt;strong&gt;从头开始构建一个定制化的模型API服务&lt;/strong&gt;，需要完全控制API的逻辑和行为，或者部署非LLM模型，那么你会&lt;strong&gt;使用FastAPI&lt;/strong&gt;这样的Web框架作为基础。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，LMDeploy 和 Ollama 可以被认为是同类（LLM Serving工具），而 FastAPI 是构建这类工具（或其他Web API）的基础框架。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>用VLLM本地linux系统部署Qwen3</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E7%94%A8vllm%E6%9C%AC%E5%9C%B0linux%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2qwen3/</link>
        <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E7%94%A8vllm%E6%9C%AC%E5%9C%B0linux%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2qwen3/</guid>
        <description>&lt;p&gt;༼ 企业级最强开源大模型Qwen3震撼发布！本地部署+全面客观测评！Qwen3-235B-A22B+Qwen3-32B+Qwen3-14B谁是最强王者？ollama+LM Studio+vLLM本地部署I༽&lt;/p&gt;
&lt;h1 id=&#34;part-1-准备vllm部署环境&#34;&gt;Part 1: 准备vLLM部署环境
&lt;/h1&gt;&lt;p&gt;(01:57-02:06) &lt;em&gt;&lt;strong&gt;1.1: 介绍vLLM及部署平台&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作者提到的关键信息&lt;/strong&gt;：如果需要进行&lt;strong&gt;企业项目&lt;/strong&gt;部署，可以使用&lt;strong&gt;vLLM&lt;/strong&gt;。作者将在&lt;strong&gt;Ubuntu系统&lt;/strong&gt;上演示使用&lt;strong&gt;vLLM&lt;/strong&gt;进行部署。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:06-02:10) &lt;em&gt;&lt;strong&gt;1.2: 展示部署环境&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：作者执行&lt;code&gt;nvidia-smi&lt;/code&gt;命令查看服务器的显卡信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：确认部署环境的硬件配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;画面内容&lt;/strong&gt;：显示服务器使用的是&lt;strong&gt;NVIDIA RTX A6000&lt;/strong&gt;显卡，显存为&lt;strong&gt;48G&lt;/strong&gt;，CUDA版本为12.7。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:10-02:19) &lt;em&gt;&lt;strong&gt;1.3: 安装Miniconda&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：安装&lt;strong&gt;Miniconda&lt;/strong&gt;用于管理Python环境和依赖包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：作者展示并执行了一系列命令来下载、安装&lt;strong&gt;Miniconda&lt;/strong&gt;，并配置相关的环境变量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;画面内容&lt;/strong&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 安装Miniconda (如果尚未安装)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bash ~/miniconda.sh -b -p &lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/miniconda
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/miniconda/bin/conda shell.bash hook&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;export PATH=&amp;#34;$HOME/miniconda/bin:$PATH&amp;#34;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：&lt;strong&gt;Miniconda&lt;/strong&gt;环境安装并配置完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:19-02:29) &lt;em&gt;&lt;strong&gt;1.4: 创建并激活Conda环境&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：创建一个独立的Python环境（&lt;code&gt;qwen3_env&lt;/code&gt;）用于&lt;strong&gt;vLLM&lt;/strong&gt;部署，指定&lt;strong&gt;Python版本为3.10&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：执行&lt;code&gt;conda create&lt;/code&gt;命令创建环境，然后执行&lt;code&gt;conda activate&lt;/code&gt;命令激活该环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;画面内容&lt;/strong&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 创建conda环境&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda create -n qwen3_env &lt;span class=&#34;nv&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;3.10 -y
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda activate qwen3_env
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：成功创建并进入了名为&lt;code&gt;qwen3_env&lt;/code&gt;的&lt;strong&gt;Conda&lt;/strong&gt;环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:29-02:35) &lt;em&gt;&lt;strong&gt;1.5: 安装vLLM及依赖&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：安装&lt;strong&gt;vLLM&lt;/strong&gt;库及其运行所需的依赖库（&lt;strong&gt;ray&lt;/strong&gt;, &lt;strong&gt;transformers&lt;/strong&gt;, &lt;strong&gt;accelerate&lt;/strong&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：在已激活的&lt;strong&gt;Conda&lt;/strong&gt;环境（&lt;code&gt;qwen3_env&lt;/code&gt;）中，使用&lt;code&gt;pip install&lt;/code&gt;命令安装&lt;strong&gt;vLLM&lt;/strong&gt;及相关依赖。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;画面内容&lt;/strong&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install vllm ray transformers accelerate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：&lt;strong&gt;vLLM&lt;/strong&gt;及其依赖库安装完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part-2-使用vllm启动qwen3-14b模型服务&#34;&gt;Part 2: 使用vLLM启动Qwen3 14B模型服务
&lt;/h1&gt;&lt;p&gt;(02:35-02:46) &lt;em&gt;&lt;strong&gt;2.1: 启动vLLM服务&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：使用&lt;strong&gt;vLLM&lt;/strong&gt;将&lt;strong&gt;Qwen3 14B&lt;/strong&gt;模型加载并启动为一个API服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：执行&lt;code&gt;vllm serve&lt;/code&gt;命令，指定模型为&lt;strong&gt;Qwen/Qwen3-14B&lt;/strong&gt;，并添加了参数&lt;code&gt;--enable-reasoning&lt;/code&gt;和&lt;code&gt;--reasoning-parser deepseek_r1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;画面内容&lt;/strong&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vllm serve Qwen/Qwen3-14B --enable-reasoning --reasoning-parser deepseek_r1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：&lt;strong&gt;vLLM&lt;/strong&gt;服务成功启动，API服务器监听在&lt;code&gt;http://0.0.0.0:8000&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part-3-通过open-webui调用vllm模型&#34;&gt;Part 3: 通过Open WebUI调用vLLM模型
&lt;/h1&gt;&lt;p&gt;(02:46-03:38) &lt;em&gt;&lt;strong&gt;3.1: 安装、启动并配置Open WebUI连接vLLM&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：配置一个Web UI（&lt;strong&gt;Open WebUI&lt;/strong&gt;）来方便地与通过&lt;strong&gt;vLLM&lt;/strong&gt;部署的&lt;strong&gt;Qwen3 14B&lt;/strong&gt;模型进行交互。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;:
&lt;ol&gt;
&lt;li&gt;在本地电脑终端安装&lt;strong&gt;Open WebUI&lt;/strong&gt;：&lt;code&gt;pip install open-webui&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;启动&lt;strong&gt;Open WebUI&lt;/strong&gt;服务：&lt;code&gt;open-webui serve&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在浏览器访问&lt;code&gt;http://localhost:8080&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;进入&lt;strong&gt;Open WebUI&lt;/strong&gt;设置 -&amp;gt; 管理员设置 -&amp;gt; 外部连接。&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;OpenAI API连接&lt;/strong&gt;设置中，将&lt;strong&gt;API请求地址&lt;/strong&gt;设置为&lt;strong&gt;vLLM&lt;/strong&gt;服务器的&lt;strong&gt;IP地址+端口号+/v1&lt;/strong&gt;（例如：&lt;code&gt;http://192.168.1.105:8000/v1&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API Key&lt;/strong&gt;处随意输入几个字母。&lt;/li&gt;
&lt;li&gt;点击保存。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：&lt;strong&gt;Open WebUI&lt;/strong&gt;配置完成，可以连接到&lt;strong&gt;vLLM&lt;/strong&gt;服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:38-03:52) &lt;em&gt;&lt;strong&gt;3.2: 在Open WebUI中选择并使用模型&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：通过配置好的&lt;strong&gt;Open WebUI&lt;/strong&gt;界面与&lt;strong&gt;Qwen3 14B&lt;/strong&gt;模型进行对话测试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：在&lt;strong&gt;Open WebUI&lt;/strong&gt;中，点击&lt;strong&gt;新建对话&lt;/strong&gt;，然后在模型选择列表中选择刚配置好的&lt;strong&gt;Qwen: Qwen3 14B&lt;/strong&gt;模型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：用户现在可以通过&lt;strong&gt;Open WebUI&lt;/strong&gt;与本地通过&lt;strong&gt;vLLM&lt;/strong&gt;部署的&lt;strong&gt;Qwen3 14B&lt;/strong&gt;模型进行交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part-4-补充信息&#34;&gt;Part 4: 补充信息
&lt;/h1&gt;&lt;p&gt;(15:39-15:43) &lt;em&gt;&lt;strong&gt;4.1: 获取代码和指令&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作者建议&lt;/strong&gt;：视频中使用的代码和指令会放在视频下方的描述栏或者评论区。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(15:43-15:49) &lt;em&gt;&lt;strong&gt;4.2: 通过博客获取笔记&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作者建议&lt;/strong&gt;：如果在视频下方无法找到代码和指令，可以访问作者的博客（&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.aivi.fyi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.aivi.fyi&lt;/a&gt;&lt;/strong&gt;）查找本期视频对应的笔记。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>科技新闻1</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB1/</link>
        <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB1/</guid>
        <description>&lt;p&gt;༼ ༽&lt;/p&gt;
&lt;h1 id=&#34;part1-开场与本周内容预告&#34;&gt;part1: 开场与本周内容预告
&lt;/h1&gt;&lt;p&gt;(00:00-00:03) &lt;em&gt;&lt;strong&gt;1.1: 开场白&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视频开头，介绍了这是&lt;strong&gt;GitHub一周热点汇总&lt;/strong&gt;的&lt;strong&gt;第70期&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(00:03-00:17) &lt;em&gt;&lt;strong&gt;1.2: 本周内容预告&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预告了本周将包含的内容，包括：
&lt;ul&gt;
&lt;li&gt;微软的&lt;strong&gt;原生1 Bit模型&lt;/strong&gt;：&lt;strong&gt;BitNet&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无限长度影片生成模型&lt;/strong&gt;：&lt;strong&gt;SkyReels-V2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;程序员在家做饭指南&lt;/strong&gt;：&lt;strong&gt;HowToCook&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;浏览器中运行VSCode&lt;/strong&gt;：&lt;strong&gt;code-server&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命令行的视频下载器&lt;/strong&gt;：&lt;strong&gt;yt-dlp&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;最后分享&lt;strong&gt;两份资料&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(00:17-00:19) &lt;em&gt;&lt;strong&gt;1.3: 互动提示&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提醒观众如果觉得内容不错，别忘了&lt;strong&gt;点赞关注&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part2-bitnet---微软原生1bit模型&#34;&gt;part2: BitNet - 微软原生1bit模型
&lt;/h1&gt;&lt;p&gt;(00:19-00:28) &lt;em&gt;&lt;strong&gt;2.1: BitNet项目介绍&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BitNet&lt;/strong&gt;是微软开源的&lt;strong&gt;原生1 Bit三进制大模型&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;号称&lt;/strong&gt;可以在&lt;strong&gt;单CPU&lt;/strong&gt;上就能运行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能&lt;/strong&gt;与同规模&lt;strong&gt;全精度&lt;/strong&gt;的开源模型&lt;strong&gt;相当&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(00:29-00:52) &lt;em&gt;&lt;strong&gt;2.2: BitNet b1.58 2B4T命名解析&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解释了模型名称 &lt;strong&gt;BitNet b1.58 2B4T&lt;/strong&gt; 的含义：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;b1.58&lt;/strong&gt;：表示采用了&lt;strong&gt;三进制存储权重&lt;/strong&gt;，每个权重仅用&lt;strong&gt;1.58 Bit&lt;/strong&gt;，相比16位浮点数可&lt;strong&gt;大幅降低显存需求&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2B&lt;/strong&gt;：代表模型包含&lt;strong&gt;20亿参数&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4T&lt;/strong&gt;：表示模型使用了&lt;strong&gt;4T (Trillion) 的训练数据&lt;/strong&gt;进行训练。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(00:53-01:17) &lt;em&gt;&lt;strong&gt;2.3: bitnet.cpp项目介绍与性能&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bitnet.cpp&lt;/strong&gt;是&lt;strong&gt;BitNet配套&lt;/strong&gt;的&lt;strong&gt;官方推理框架&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;提供了一套&lt;strong&gt;优化的内核&lt;/strong&gt;，支持在&lt;strong&gt;CPU&lt;/strong&gt;上进行&lt;strong&gt;快速无损&lt;/strong&gt;的&lt;strong&gt;1.58位模型推理&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;性能对比&lt;strong&gt;llama.cpp&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在&lt;strong&gt;ARM CPU&lt;/strong&gt;上实现了&lt;strong&gt;1.37倍到5.07倍&lt;/strong&gt;的加速。&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;X86架构CPU&lt;/strong&gt;上实现了&lt;strong&gt;2.07倍到6.17倍&lt;/strong&gt;的加速。&lt;/li&gt;
&lt;li&gt;并且都能&lt;strong&gt;大幅降低能耗&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(01:18-01:31) &lt;em&gt;&lt;strong&gt;2.4: 运行示例与前景&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;展示了在&lt;strong&gt;苹果M2芯片&lt;/strong&gt;上运行的效果，速度&lt;strong&gt;非常不错&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;该项目因其&lt;strong&gt;CPU推理&lt;/strong&gt;能力和&lt;strong&gt;更少的资源需求&lt;/strong&gt;而备受关注，在&lt;strong&gt;个人电脑&lt;/strong&gt;和&lt;strong&gt;边缘设备&lt;/strong&gt;上的运行&lt;strong&gt;前景&lt;/strong&gt;被看好。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(01:32-01:38) &lt;em&gt;&lt;strong&gt;2.5: 技术报告&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微软的&lt;strong&gt;开源&lt;/strong&gt;一直很&lt;strong&gt;全面&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;相关的&lt;strong&gt;技术报告&lt;/strong&gt;也已发布，感兴趣的朋友可以&lt;strong&gt;深入阅读&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part3-skyreels-v2---无限长度影片生成模型&#34;&gt;part3: SkyReels-V2 - 无限长度影片生成模型
&lt;/h1&gt;&lt;p&gt;(01:39-01:55) &lt;em&gt;&lt;strong&gt;3.1: SkyReels-V2项目介绍&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SkyReels-V2&lt;/strong&gt;是由&lt;strong&gt;昆仑万维&lt;/strong&gt;发布的&lt;strong&gt;无限长度影片生成模型&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;被认为是国内大模型玩家的&lt;strong&gt;新生力量&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最大特点&lt;/strong&gt;是生成的&lt;strong&gt;时长是无限的&lt;/strong&gt;，相比目前主流的&lt;strong&gt;5-10秒&lt;/strong&gt;片段非常有&lt;strong&gt;吸引力&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;官方给出的视频效果&lt;strong&gt;都不错&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(01:56-02:03) &lt;em&gt;&lt;strong&gt;3.2: 量子位演示效果&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提到了在网上看到&lt;strong&gt;量子位&lt;/strong&gt;发布的一个视频，效果&lt;strong&gt;非常震撼&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;该视频演示了用&lt;strong&gt;一张照片&lt;/strong&gt;加上&lt;strong&gt;一句prompt&lt;/strong&gt;为起点，实现了&lt;strong&gt;AI版的《罗马假日》&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:04-02:15) &lt;em&gt;&lt;strong&gt;3.3: 技术原理简述 (基于报告)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据官方技术报告，模型通过&lt;strong&gt;各种技术&lt;/strong&gt;，基于&lt;strong&gt;前一段视频的最后几帧&lt;/strong&gt;来&lt;strong&gt;扩充后续的视频&lt;/strong&gt;，从而实现了&lt;strong&gt;无限的扩展&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:16-02:25) &lt;em&gt;&lt;strong&gt;3.4: 在线版本与试用&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SkyReels&lt;/strong&gt;目前有自己的&lt;strong&gt;在线版本&lt;/strong&gt;可以使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注册&lt;/strong&gt;会赠送&lt;strong&gt;25积分&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生图&lt;/strong&gt;还可以，但&lt;strong&gt;生成视频&lt;/strong&gt;的话，免费积分只够生成&lt;strong&gt;5秒&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;想要更多功能需要&lt;strong&gt;购买会员&lt;/strong&gt;，价格&lt;strong&gt;稍微有点小贵&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:26-02:30) &lt;em&gt;&lt;strong&gt;3.5: 网友生成效果&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展示了一些网友的生成效果，&lt;strong&gt;整体感觉还不错&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;画面内容2&lt;/strong&gt; (展示网友生成的动画风格女孩走路视频)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:31-02:39) &lt;em&gt;&lt;strong&gt;3.6: 基于开源项目与ComfyUI集成&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SkyReels&lt;/strong&gt;是基于&lt;strong&gt;阿里开源的wan2.1&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;网上已经有很多&lt;strong&gt;大神&lt;/strong&gt;开始整合&lt;strong&gt;ComfyUI的工作流&lt;/strong&gt;了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:38-03:16) &lt;em&gt;&lt;strong&gt;3.7: 本地显卡限制与青椒云方案&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者表示自己的&lt;strong&gt;本地显卡确实不太行&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;推荐使用&lt;strong&gt;青椒云&lt;/strong&gt;云桌面进行尝试。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;青椒云&lt;/strong&gt;是&lt;strong&gt;专注为视觉行业&lt;/strong&gt;提供&lt;strong&gt;垂直云计算服务&lt;/strong&gt;的平台。&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;视觉云计算&lt;/strong&gt;领域，其&lt;strong&gt;算力规模是亚洲第一&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;作者使用了其&lt;strong&gt;高性能4060-Ti云桌面&lt;/strong&gt;，选择了&lt;strong&gt;自带ComfyUI的模板&lt;/strong&gt;进行演示（模板内已内置好工具，用起来方便）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;画面内容3&lt;/strong&gt; (演示在青椒云选择带ComfyUI模板的4060Ti云桌面)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;建议：&lt;/strong&gt; 对于&lt;strong&gt;Mac用户&lt;/strong&gt;临时想用&lt;strong&gt;Windows系统&lt;/strong&gt;或&lt;strong&gt;想玩游戏&lt;/strong&gt;，青椒云也提供多种&lt;strong&gt;高性能GPU和CPU的云桌面&lt;/strong&gt;，可按需&lt;strong&gt;按时计费&lt;/strong&gt;，且&lt;strong&gt;安全合规，数据不落地&lt;/strong&gt;，是个不错的选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part4-howtocook---程序员在家做饭方法指南&#34;&gt;part4: HowToCook - 程序员在家做饭方法指南
&lt;/h1&gt;&lt;p&gt;(03:17-03:26) &lt;em&gt;&lt;strong&gt;4.1: HowToCook项目介绍&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HowToCook&lt;/strong&gt;是一个&lt;strong&gt;程序员在家做饭的指南&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;作者很久以前看到过，也有朋友推荐过。&lt;/li&gt;
&lt;li&gt;引出疑问：为什么一个&lt;strong&gt;菜谱的项目&lt;/strong&gt;会这么火？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:27-03:42) &lt;em&gt;&lt;strong&gt;4.2: 核心理念：程序员思维做饭&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为它使用&lt;strong&gt;程序员的思维&lt;/strong&gt;来&lt;strong&gt;解构做饭&lt;/strong&gt;这件事。&lt;/li&gt;
&lt;li&gt;采用&lt;strong&gt;结构化、逻辑化&lt;/strong&gt;的方式来完成做饭。&lt;/li&gt;
&lt;li&gt;以&lt;strong&gt;红烧茄子&lt;/strong&gt;为例，其过程被分解为：&lt;strong&gt;原料工具、计算、操作、最后是成品&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:43-04:04) &lt;em&gt;&lt;strong&gt;4.3: 细节：量化与开发流程类比&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;材料用量&lt;/strong&gt;不像一般菜谱的“几勺”，而是&lt;strong&gt;精确的剂量&lt;/strong&gt;（例如 &lt;code&gt;多少多少克&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间&lt;/strong&gt;也精确到&lt;strong&gt;秒&lt;/strong&gt;（例如 &lt;code&gt;翻炒15秒&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;看起来非常像一份&lt;strong&gt;项目的文档&lt;/strong&gt;，类比软件开发流程：从&lt;strong&gt;需求分析 -&amp;gt; 架构设计 -&amp;gt; 开发计划 -&amp;gt; 项目完成 -&amp;gt; 成品&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;这是&lt;strong&gt;理工男与厨房锅铲的理想主义结合&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;建议：&lt;/strong&gt; 如果自己也能做饭，不妨去&lt;strong&gt;试一试&lt;/strong&gt;，看看按照这个菜谱做出的效果怎么样。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part5-code-server---浏览器中运行vscode&#34;&gt;part5: code-server - 浏览器中运行VSCode
&lt;/h1&gt;&lt;p&gt;(04:05-04:14) &lt;em&gt;&lt;strong&gt;5.1: code-server项目介绍&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;code-server&lt;/strong&gt;是一个用&lt;strong&gt;浏览器&lt;/strong&gt;来运行&lt;strong&gt;VS Code&lt;/strong&gt;的项目。&lt;/li&gt;
&lt;li&gt;可以用&lt;strong&gt;任何的电脑、平板&lt;/strong&gt;来进行&lt;strong&gt;远程的开发&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在国内，这类工具通常被称为&lt;strong&gt;Cloud IDE&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:15-04:49) &lt;em&gt;&lt;strong&gt;5.2: Cloud IDE的优势&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cloud IDE常见的&lt;strong&gt;好处&lt;/strong&gt;有几个：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;#1 无设备限制&lt;/strong&gt;：只要有&lt;strong&gt;浏览器&lt;/strong&gt;就可以开发，&lt;strong&gt;不限地点、不限设备&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;#2 省去环境配置&lt;/strong&gt;：可以&lt;strong&gt;省去环境的配置工作&lt;/strong&gt;。例如项目有新人进来，启动一套新环境，马上就能开始干活。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;#3 性能限制&lt;/strong&gt;：解决&lt;strong&gt;设备的性能限制&lt;/strong&gt;。因为实际运行都是在&lt;strong&gt;服务器&lt;/strong&gt;上，对&lt;strong&gt;本地的要求其实很低&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;#4 安全性&lt;/strong&gt;：在一些&lt;strong&gt;安全性&lt;/strong&gt;的场景下也是一个&lt;strong&gt;卖点&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:50-05:18) &lt;em&gt;&lt;strong&gt;5.3: Coder与Terraform集成及商业方案&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;code-server&lt;/strong&gt;属于&lt;strong&gt;Coder&lt;/strong&gt;项目组。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Coder&lt;/strong&gt;项目组还有专门的&lt;strong&gt;Terraform的项目模板&lt;/strong&gt;，可以用来&lt;strong&gt;快速地构建服务器上的开发环境&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;将 &lt;strong&gt;Coder server (运行VS Code)&lt;/strong&gt; + &lt;strong&gt;模板部署 (环境构建)&lt;/strong&gt; + &lt;strong&gt;K8s (底层架构)&lt;/strong&gt; 结合起来，就是国内很多&lt;strong&gt;商业的Cloud IDE的方案&lt;/strong&gt;的基本结构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者观点：&lt;/strong&gt; 很多&lt;strong&gt;开发者不习惯在浏览器里写代码&lt;/strong&gt;。如果强制只能用浏览器IDE，不能装本地版，开发者可能不会同意。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part6-yt-dlp---命令行的视频下载器&#34;&gt;part6: yt-dlp - 命令行的视频下载器
&lt;/h1&gt;&lt;p&gt;(05:19-05:29) &lt;em&gt;&lt;strong&gt;6.1: yt-dlp项目介绍&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;yt-dlp&lt;/strong&gt;是一个非常不错的&lt;strong&gt;视频下载项目&lt;/strong&gt; (命令行工具)。&lt;/li&gt;
&lt;li&gt;很多图形化的下载工具，&lt;strong&gt;实际上有可能就是用的它&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:30-05:40) &lt;em&gt;&lt;strong&gt;6.2: 与youtube-dl对比&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;yt-dlp&lt;/strong&gt;是基于&lt;strong&gt;youtube-dl&lt;/strong&gt;的&lt;strong&gt;开发应用 (fork)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对比&lt;strong&gt;youtube-dl&lt;/strong&gt;，&lt;strong&gt;yt-dlp&lt;/strong&gt;更加&lt;strong&gt;灵活&lt;/strong&gt;，&lt;strong&gt;活跃度也比较高&lt;/strong&gt;，&lt;strong&gt;下载速度也很快&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:41-05:49) &lt;em&gt;&lt;strong&gt;6.3: 安装与使用&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以通过官方的&lt;strong&gt;一键安装脚本&lt;/strong&gt;来安装。&lt;/li&gt;
&lt;li&gt;也可以通过&lt;strong&gt;pip来安装&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;建议：&lt;/strong&gt; 使用方面建议大家&lt;strong&gt;自己去实操一下&lt;/strong&gt;，因为这个东西不太好说太多。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:50-06:00) &lt;em&gt;&lt;strong&gt;6.4: 使用技巧与问题处理&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;几个注意点：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;如果&lt;strong&gt;下载速度慢&lt;/strong&gt;，可以&lt;strong&gt;开启多线程 (&lt;code&gt;-N&lt;/code&gt;)&lt;/strong&gt; 或者&lt;strong&gt;开启加速/限制速率 (&lt;code&gt;-r&lt;/code&gt;, &lt;code&gt;--limit-rate&lt;/code&gt;)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果报**“机器人”的错误 (not a bot)&lt;strong&gt;，那可能是&lt;/strong&gt;IP被封了**，需要考虑&lt;strong&gt;换个IP&lt;/strong&gt;或者&lt;strong&gt;换一下cookie (&lt;code&gt;--cookies&lt;/code&gt;)&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:01-06:06) &lt;em&gt;&lt;strong&gt;6.5: 依赖项：FFmpeg&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;yt-dlp&lt;/strong&gt;依赖于&lt;strong&gt;FFmpeg&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;否则&lt;/strong&gt;的话，下载&lt;strong&gt;高清视频&lt;/strong&gt;就会&lt;strong&gt;有画质、没有声音&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part7-one-more-thing---资料分享&#34;&gt;part7: One more thing - 资料分享
&lt;/h1&gt;&lt;p&gt;(06:07-06:20) &lt;em&gt;&lt;strong&gt;7.1: DevOps Roadmap 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分享第一个资料：&lt;strong&gt;DevOps Roadmap 2025&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;建议：&lt;/strong&gt; 作为开发者，最好都要有一些&lt;strong&gt;DevOps的意识&lt;/strong&gt;，尤其是&lt;strong&gt;小团队或者创业者&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:21-06:29) &lt;em&gt;&lt;strong&gt;7.2: Google AI Agent白皮书&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分享第二个资料：&lt;strong&gt;谷歌出品的AI agent白皮书&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;之前官方就推出了，&lt;strong&gt;值得一看&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果需要可以&lt;strong&gt;告诉作者&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part8-结尾&#34;&gt;part8: 结尾
&lt;/h1&gt;&lt;p&gt;(06:30-06:34) &lt;em&gt;&lt;strong&gt;8.1: 总结与互动&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以上是本周的全部内容。&lt;/li&gt;
&lt;li&gt;如果觉得不错，别忘了&lt;strong&gt;点赞关注&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:34-06:36) &lt;em&gt;&lt;strong&gt;8.2: 结束语&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们下周再见。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>能把价格打下来但也要活下去才有用</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E8%83%BD%E6%8A%8A%E4%BB%B7%E6%A0%BC%E6%89%93%E4%B8%8B%E6%9D%A5%E4%BD%86%E4%B9%9F%E8%A6%81%E6%B4%BB%E4%B8%8B%E5%8E%BB%E6%89%8D%E6%9C%89%E7%94%A8/</link>
        <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E8%83%BD%E6%8A%8A%E4%BB%B7%E6%A0%BC%E6%89%93%E4%B8%8B%E6%9D%A5%E4%BD%86%E4%B9%9F%E8%A6%81%E6%B4%BB%E4%B8%8B%E5%8E%BB%E6%89%8D%E6%9C%89%E7%94%A8/</guid>
        <description>&lt;p&gt;༼2元面包店为什么不火了？——【两元面包】不是真正的产品，【面包店】才是 ༽&lt;/p&gt;
&lt;h1 id=&#34;part1-2元面包店的热潮与疑问&#34;&gt;part1: 2元面包店的热潮与疑问
&lt;/h1&gt;&lt;p&gt;(00:00-00:09) &lt;em&gt;&lt;strong&gt;1.1: 起源时间&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视频提问：&lt;strong&gt;2元面包店何时开始火爆&lt;/strong&gt;？&lt;/li&gt;
&lt;li&gt;讲述者认为大约是&lt;strong&gt;2023年上半年&lt;/strong&gt;开始的，距今已快2年时间（口误，应为1年多）。&lt;/li&gt;
&lt;li&gt;引用&lt;strong&gt;百度百科&lt;/strong&gt;信息佐证，显示&lt;strong&gt;2023年6月&lt;/strong&gt;济南火车站附近开设了第一家，&lt;strong&gt;10月&lt;/strong&gt;日照市街头也出现了多家。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(00:09-00:24) &lt;em&gt;&lt;strong&gt;1.2: 初期火爆原因与预期&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;刚出现时&lt;strong&gt;特别火&lt;/strong&gt;，引发热议。&lt;/li&gt;
&lt;li&gt;人们认为终于有人把&lt;strong&gt;面包价格打下来了&lt;/strong&gt;，使其价格&lt;strong&gt;与馒头相当&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;优点在于价格低廉且&lt;strong&gt;种类繁多&lt;/strong&gt;可供选择。&lt;/li&gt;
&lt;li&gt;讲述者评价这种模式“&lt;strong&gt;太牛逼了&lt;/strong&gt;”，并预测按照正常逻辑，&lt;strong&gt;武汉市一年能开200家&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(00:24-00:34) &lt;em&gt;&lt;strong&gt;1.3: 热潮消退与解析引入&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提出疑问：为何现在&lt;strong&gt;反而没动静了&lt;/strong&gt;，像&lt;strong&gt;一阵风&lt;/strong&gt;一样过去了？&lt;/li&gt;
&lt;li&gt;猜测：难道是商家&lt;strong&gt;不愿意把价钱打下来&lt;/strong&gt;吗？&lt;/li&gt;
&lt;li&gt;引入讲述者“小鱼”为大家&lt;strong&gt;解析原因&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part2-揭秘核心卖的不是面包是项目&#34;&gt;part2: 揭秘核心：卖的不是面包，是项目
&lt;/h1&gt;&lt;p&gt;(00:34-00:47) &lt;em&gt;&lt;strong&gt;2.1: 商业模式本质&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解析最早的起源：从一开始，&lt;strong&gt;产品就不是店里卖的面包&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;真正的“产品”是&lt;strong&gt;2元面包店这个项目本身&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;强调：“&lt;strong&gt;谁问的就赚谁的钱&lt;/strong&gt;”。&lt;/li&gt;
&lt;li&gt;实际售卖的是“&lt;strong&gt;如何开2元面包店&lt;/strong&gt;”的加盟或培训项目。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(00:47-01:02) &lt;em&gt;&lt;strong&gt;2.2: 低价引流与素材制造&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初期通过&lt;strong&gt;低价促销&lt;/strong&gt;吸引眼球。&lt;/li&gt;
&lt;li&gt;很多人（包括同行）出于&lt;strong&gt;好奇心&lt;/strong&gt;（想了解2元能做出什么水平的面包）而去购买，自然而然&lt;strong&gt;形成了排队&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;关键点：&lt;strong&gt;排队的人群&lt;/strong&gt;成为了编织“&lt;strong&gt;暴富梦想&lt;/strong&gt;”的&lt;strong&gt;素材和主角&lt;/strong&gt;，用于吸引更多加盟者。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part3-互联网模式的套用及其局限&#34;&gt;part3: 互联网模式的套用及其局限
&lt;/h1&gt;&lt;p&gt;(01:02-01:24) &lt;em&gt;&lt;strong&gt;3.1: 互联网概念的应用&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该项目运用了&lt;strong&gt;互联网概念&lt;/strong&gt;进行包装。&lt;/li&gt;
&lt;li&gt;核心策略是“&lt;strong&gt;花钱烧规模&lt;/strong&gt;”，前期&lt;strong&gt;不赚钱无所谓&lt;/strong&gt;，目的是&lt;strong&gt;固定用户&lt;/strong&gt;，后期再进行“&lt;strong&gt;收割&lt;/strong&gt;”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(01:24-01:40) &lt;em&gt;&lt;strong&gt;3.2: 实体业务的根本差异&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加盟者&lt;strong&gt;忽略了一个关键点&lt;/strong&gt;：&lt;strong&gt;面包是需要人做的实体产品&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;它&lt;strong&gt;不是数字化的Ctrl+C、Ctrl+V&lt;/strong&gt;，无法无限复制。&lt;/li&gt;
&lt;li&gt;实体店受&lt;strong&gt;固定面积&lt;/strong&gt;限制，导致&lt;strong&gt;产量有上限&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;结合&lt;strong&gt;极低的可怜利润率&lt;/strong&gt;，导致难以规模化盈利。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part4-加盟者的困境与模式演变&#34;&gt;part4: 加盟者的困境与模式演变
&lt;/h1&gt;&lt;p&gt;(01:40-02:02) &lt;em&gt;&lt;strong&gt;4.1: 加盟商盈利现状&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;讲述者分享群友案例：有人去&lt;strong&gt;济南加盟&lt;/strong&gt;2元面包店。&lt;/li&gt;
&lt;li&gt;提及“&lt;strong&gt;勇哥&lt;/strong&gt;”都知道&lt;strong&gt;济南加盟多为骗局&lt;/strong&gt;，&lt;strong&gt;上当受骗&lt;/strong&gt;的人很多。&lt;/li&gt;
&lt;li&gt;群里几百个加盟商，&lt;strong&gt;只有两个人盈利&lt;/strong&gt;（包括该群友）。&lt;/li&gt;
&lt;li&gt;盈利者赚的也只是&lt;strong&gt;纯辛苦钱&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:02-02:22) &lt;em&gt;&lt;strong&gt;4.2: 经营的辛劳与不可持续&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;盈利的加盟商需要&lt;strong&gt;拉上全家亲戚（如妈妈）一起&lt;/strong&gt;长时间辛苦劳作。&lt;/li&gt;
&lt;li&gt;举例：一天做&lt;strong&gt;1000个面包&lt;/strong&gt;（2000多元营业额）非常累，堆积如山。&lt;/li&gt;
&lt;li&gt;结果：&lt;strong&gt;赚钱的人累得要死&lt;/strong&gt;，&lt;strong&gt;不赚钱的人更惨&lt;/strong&gt;（累死还不赚钱）。&lt;/li&gt;
&lt;li&gt;结论：这个模式&lt;strong&gt;推不起来&lt;/strong&gt;，不可持续。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:22-02:41) &lt;em&gt;&lt;strong&gt;4.3: 模式演变：走向普通面包店&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即使是&lt;strong&gt;勉强活下来的&lt;/strong&gt;店（如“2元总管”）。&lt;/li&gt;
&lt;li&gt;生存之道在于&lt;strong&gt;增加高价产品&lt;/strong&gt;：开发&lt;strong&gt;3元、5元、8元&lt;/strong&gt;的产品。&lt;/li&gt;
&lt;li&gt;最终&lt;strong&gt;慢慢变成了一个普通的面包店&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;总结：2元面包店模式并非一定会失败，但作为一种商业模式&lt;strong&gt;没什么意思&lt;/strong&gt;，投入产出比极低。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part5-低成本创业陷阱的本质与循环&#34;&gt;part5: 低成本创业陷阱的本质与循环
&lt;/h1&gt;&lt;p&gt;(02:41-03:07) &lt;em&gt;&lt;strong&gt;5.1: 类比“慈善”与“打工”&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将开2元面包店比作&lt;strong&gt;做慈善&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;描述投入：&lt;strong&gt;投资10万&lt;/strong&gt;，换来&lt;strong&gt;一周7天、每天10小时&lt;/strong&gt;的工作，月收入可能只有&lt;strong&gt;4000元&lt;/strong&gt;（仅为&lt;strong&gt;辛苦钱&lt;/strong&gt;），&lt;strong&gt;回本遥遥无期&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对比：收入甚至&lt;strong&gt;不如在旁边包子铺打工&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:07-03:20) &lt;em&gt;&lt;strong&gt;5.2: 旁观者与实践者的认知偏差&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建议：去2元面包店&lt;strong&gt;上两天班&lt;/strong&gt;就能明白其中辛劳。&lt;/li&gt;
&lt;li&gt;指出：去年觉得这个模式有搞头的，往往是&lt;strong&gt;那些不干活的人&lt;/strong&gt;（指推广加盟的人）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:20-03:49) &lt;em&gt;&lt;strong&gt;5.3: 消费者期望与商家现实的矛盾&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推广者声称模式&lt;strong&gt;满足了人民（消费者）的需求&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;消费者角度：希望东西&lt;strong&gt;越便宜越好&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;商家现实：&lt;strong&gt;不赚钱&lt;/strong&gt;的情况下，必然会&lt;strong&gt;偷工减料&lt;/strong&gt;，例如馅料像葡萄干一样小，使用&lt;strong&gt;植物奶油&lt;/strong&gt;而非&lt;strong&gt;动物奶油&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;反问：2块钱还想吃动物奶油？给你包&lt;strong&gt;波士顿龙虾&lt;/strong&gt;你敢吃吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:49-04:13) &lt;em&gt;&lt;strong&gt;5.4: 快消加盟模式的换皮与循环&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指出消费者&lt;strong&gt;只考虑自己，不考虑别人（商家）&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;这种模式本质上是&lt;strong&gt;快消行业的换皮&lt;/strong&gt;，与“&lt;strong&gt;大锅卤菜&lt;/strong&gt;”等加盟类似。&lt;/li&gt;
&lt;li&gt;预言：&lt;strong&gt;明年还会有新的套路&lt;/strong&gt;出现，本质都是针对&lt;strong&gt;对行业完全没有理解&lt;/strong&gt;的人，推广&lt;strong&gt;低成本创业项目&lt;/strong&gt;，进行&lt;strong&gt;反反复复的割（韭菜）&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:13-04:33) &lt;em&gt;&lt;strong&gt;5.5: 历史教训与思维定式&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引用《&lt;strong&gt;过秦论&lt;/strong&gt;》：“&lt;strong&gt;后人哀之而不鉴之，亦使后人而复哀后人&lt;/strong&gt;”。&lt;/li&gt;
&lt;li&gt;批评人们&lt;strong&gt;永远不总结&lt;/strong&gt;教训，总想着“&lt;strong&gt;零基础、低投入、赚大钱&lt;/strong&gt;”的美梦。&lt;/li&gt;
&lt;li&gt;只要存在这种想法，&lt;strong&gt;快招（快速招商加盟）就永远存在&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part6-低价模式成功与失败的对比分析&#34;&gt;part6: 低价模式成功与失败的对比分析
&lt;/h1&gt;&lt;p&gt;(04:33-04:57) &lt;em&gt;&lt;strong&gt;6.1: 对比蜜雪冰城&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提出对比：大家都想喝&lt;strong&gt;便宜的奶茶&lt;/strong&gt;，&lt;strong&gt;蜜雪冰城&lt;/strong&gt;成功了。&lt;/li&gt;
&lt;li&gt;反观面包：大家都想吃&lt;strong&gt;便宜的面包&lt;/strong&gt;，为什么2元面包店就&lt;strong&gt;起不来&lt;/strong&gt;？&lt;/li&gt;
&lt;li&gt;核心原因：&lt;strong&gt;价钱压得太低了&lt;/strong&gt;，导致模式&lt;strong&gt;不可持续&lt;/strong&gt;，无法盈利。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part7-特殊案例信仰驱动的低成本模式&#34;&gt;part7: 特殊案例：信仰驱动的低成本模式
&lt;/h1&gt;&lt;p&gt;(04:57-05:42) &lt;em&gt;&lt;strong&gt;7.1: 北京某“教会企业”案例引入&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在一种能让别人&lt;strong&gt;心甘情愿免费干活&lt;/strong&gt;的办法。&lt;/li&gt;
&lt;li&gt;举例北京一家&lt;strong&gt;非常有名、规模很大、产品很好&lt;/strong&gt;的企业。&lt;/li&gt;
&lt;li&gt;其产品&lt;strong&gt;价格便宜&lt;/strong&gt;，按常规成本计算&lt;strong&gt;很难覆盖&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;原因揭秘：该企业的&lt;strong&gt;工人&lt;/strong&gt;（很多是&lt;strong&gt;残障人士&lt;/strong&gt;）&lt;strong&gt;加班不要加班费&lt;/strong&gt;，&lt;strong&gt;月工资仅800元&lt;/strong&gt;（在北京）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:42-06:14) &lt;em&gt;&lt;strong&gt;7.2: 信仰的力量：低薪或无薪的驱动力&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工人&lt;strong&gt;非常用心用力地干活&lt;/strong&gt;，并非因为钱少。&lt;/li&gt;
&lt;li&gt;这家企业是“&lt;strong&gt;教会企业&lt;/strong&gt;”。&lt;/li&gt;
&lt;li&gt;工人认为自己是在&lt;strong&gt;为上帝干活&lt;/strong&gt;，传播福音，而非为了钱。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;信仰&lt;/strong&gt;是驱动力，所以即使给500元也干，甚至&lt;strong&gt;不需要钱&lt;/strong&gt;，&lt;strong&gt;包吃包住&lt;/strong&gt;即可。&lt;/li&gt;
&lt;li&gt;想干活的人&lt;strong&gt;多得很&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:14-06:31) &lt;em&gt;&lt;strong&gt;7.3: 常规模式的对比与2元店的结局&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对比普通人（无神论者）：&lt;strong&gt;就是看钱&lt;/strong&gt;，&lt;strong&gt;钱少了就不干&lt;/strong&gt;，人&lt;strong&gt;都请不到&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;结论：2元面包店最终只能&lt;strong&gt;老板剥削自己&lt;/strong&gt;来维持。&lt;/li&gt;
&lt;li&gt;模式&lt;strong&gt;垮台&lt;/strong&gt;的根本原因：找不到那种&lt;strong&gt;既不要钱（或极低工资）又好好干活的人&lt;/strong&gt;，除非有&lt;strong&gt;信仰&lt;/strong&gt;等特殊驱动力。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>github action：0 action部署hugo项目的aciton程序 最基本原理</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/github-action0-action%E9%83%A8%E7%BD%B2hugo%E9%A1%B9%E7%9B%AE%E7%9A%84aciton%E7%A8%8B%E5%BA%8F-%E6%9C%80%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</link>
        <pubDate>Tue, 20 Feb 2024 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/github-action0-action%E9%83%A8%E7%BD%B2hugo%E9%A1%B9%E7%9B%AE%E7%9A%84aciton%E7%A8%8B%E5%BA%8F-%E6%9C%80%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</guid>
        <description>&lt;pre&gt;&lt;code&gt;	- [action部署hugo项目的aciton程序]
		- &amp;lt;action部署hugo项目的aciton程序的核心：让action使用hugo命令，action环境需要hugo命令执行hugo博客&amp;gt;
		- &amp;lt;1 有参考作用的使用uses参数的action程序的写法（参考如何让AI写action程序）&amp;gt;
		- &amp;lt;2 有参考作用的使用run字段的action程序的写法 https://aistudio.google.com/prompts/1dv1SBgRsYgFBSgYe1Dseg0dyYouTZ3_P（参考如何让AI写action程序）&amp;gt;

	- [[[[在action环境安装项目包（hugo包）的两种做法（参考如何让AI写action程序）]
		- 《1 uses 关键字并指定一个像 别大大佬些好的aciton 比如peaceiris/actions-hugo@v3 这样的“动作 (Action)”时，你是在委托这个预先打包好的工具去完成安装和配置 Hugo 的任务》
		- 《2 直接用run字段亲自告诉那个临时的 Linux 系统具体怎么做才能把 Hugo 装好》


	- [aciton想部署hugo的核心就是用别人预先写好的东西]
		- 《hugo官方有提供官方action动作把仓库代码下载（检出） 到当前的虚拟运行环境中，它就是actions/checkout@v4，通过uses: actions/checkout@v4: 就能使用一个预先写好的、官方提供的“动作” (Action)》
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>github action：2 github action部署项目原理：github action是将项目部署到其它仓库，不是部署到自己的仓库</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/github-action2-github-action%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%8E%9F%E7%90%86github-action%E6%98%AF%E5%B0%86%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E5%85%B6%E5%AE%83%E4%BB%93%E5%BA%93%E4%B8%8D%E6%98%AF%E9%83%A8%E7%BD%B2%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%93%E5%BA%93/</link>
        <pubDate>Mon, 20 Feb 2023 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/github-action2-github-action%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%8E%9F%E7%90%86github-action%E6%98%AF%E5%B0%86%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E5%85%B6%E5%AE%83%E4%BB%93%E5%BA%93%E4%B8%8D%E6%98%AF%E9%83%A8%E7%BD%B2%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%93%E5%BA%93/</guid>
        <description>&lt;p&gt;(08:41-10:19) &lt;em&gt;&lt;strong&gt;4.4: 配置 Repository Secret&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;♈ &lt;strong&gt;目的&lt;/strong&gt;：将生成的 Token 安全地提供给 &lt;strong&gt;GitHub Actions workflow&lt;/strong&gt; 使用。&lt;strong&gt;不应该&lt;/strong&gt;直接将 Token 字符串写入 YAML 文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;操作路径&lt;/strong&gt;：回到♎♐&lt;strong&gt;存放 Hugo 源代码&lt;/strong&gt;的仓库（即 &lt;code&gt;hugo-main&lt;/code&gt;），进入该仓库的 &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; 左侧菜单 &lt;code&gt;Security&lt;/code&gt; 下的 &lt;code&gt;Secrets and variables&lt;/code&gt; -&amp;gt; &lt;code&gt;Actions&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;♈&lt;strong&gt;操作&lt;/strong&gt;：点击 &lt;code&gt;New repository secret&lt;/code&gt; 按钮。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置 Secret&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name&lt;/code&gt;：输入 &lt;strong&gt;Secret 的名称&lt;/strong&gt;。这个名称&lt;strong&gt;必须&lt;/strong&gt;与 workflow YAML 文件中 &lt;code&gt;secrets.&lt;/code&gt; 后面引用的名称&lt;strong&gt;完全一致&lt;/strong&gt;。作者在这里将其命名为 &lt;code&gt;TOKEN&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Secret&lt;/code&gt;：将刚才&lt;strong&gt;复制并保存&lt;/strong&gt;的&lt;strong&gt;完整 Token 字符串&lt;/strong&gt;粘贴到这里。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;保存&lt;/strong&gt;：点击 &lt;code&gt;Add secret&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;♈&lt;strong&gt;优点&lt;/strong&gt;：使用 &lt;strong&gt;Secrets&lt;/strong&gt; 可以&lt;strong&gt;隐藏&lt;/strong&gt;敏感信息，workflow 运行时会安全地注入该值，比硬编码在代码中&lt;strong&gt;安全&lt;/strong&gt;得多&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[[[[[使用aciton后将分源代码仓库和静态页面仓库 ]https://aistudio.google.com/prompts/1dv1SBgRsYgFBSgYe1Dseg0dyYouTZ3_P&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《《《hugo-main 仓库 (源代码仓库)，专门用来提交项目源码的仓库，以及用来运行action的仓库，不需要开启github page的功能，所以hugo-main仓库不需要公开，也不需要把静态资源上传到这仓库上》&lt;/li&gt;
&lt;li&gt;《《《hugo-dev 仓库 (部署目标/静态页面仓库)，hugo-main运行action后生成的静态资源文件所推送到的仓库，是存放最终网站文件并对外提供访问的地方，它是自动化流程的终点/发布目标，因此我们在仓库开启github page功能》
&lt;ul&gt;
&lt;li&gt;《《《aciton中的参数 EXTERNAL_REPOSITORY: letere-gz/hugo-dev 就是用来 明确指定了main仓库部署的目标是这个dev仓库。》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>github action：3 AI编写action程序技巧</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/github-action3-ai%E7%BC%96%E5%86%99action%E7%A8%8B%E5%BA%8F%E6%8A%80%E5%B7%A7/</link>
        <pubDate>Mon, 20 Feb 2023 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/github-action3-ai%E7%BC%96%E5%86%99action%E7%A8%8B%E5%BA%8F%E6%8A%80%E5%B7%A7/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;github aciton配置文件如何创建
&lt;ul&gt;
&lt;li&gt;(2 action配置文件用aciton模板的配置文件， action模板配置文件扔给AI，说明需要这个action模板运行哪个脚本，让AI修改即可，因为有些时候 AI直接生成的action配置文件aciton根本运行不了)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>github action：4 用github action把源码仓库部署项目到github page仓库的真正意义</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/github-action4-%E7%94%A8github-action%E6%8A%8A%E6%BA%90%E7%A0%81%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0github-page%E4%BB%93%E5%BA%93%E7%9A%84%E7%9C%9F%E6%AD%A3%E6%84%8F%E4%B9%89/</link>
        <pubDate>Mon, 20 Feb 2023 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/github-action4-%E7%94%A8github-action%E6%8A%8A%E6%BA%90%E7%A0%81%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0github-page%E4%BB%93%E5%BA%93%E7%9A%84%E7%9C%9F%E6%AD%A3%E6%84%8F%E4%B9%89/</guid>
        <description>&lt;p&gt;(00:09-00:32) &lt;em&gt;&lt;strong&gt;1.2: 手动部署痛点与自动化优势&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;♈指出传统方式下，每次修改完文件后，都需要&lt;strong&gt;手动将生成&lt;/strong&gt;的 &lt;code&gt;public&lt;/code&gt; 文件夹&lt;strong&gt;上传&lt;/strong&gt;到服务器或托管平台，这个过程比较&lt;strong&gt;麻烦&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♈使用 &lt;strong&gt;GitHub Actions&lt;/strong&gt; 可以实现&lt;strong&gt;自动化&lt;/strong&gt;：&lt;strong&gt;自动&lt;/strong&gt;帮我们&lt;strong&gt;生成&lt;/strong&gt; &lt;code&gt;public&lt;/code&gt; 目录，并将其&lt;strong&gt;部署&lt;/strong&gt;到&lt;strong&gt;静态页面网站&lt;/strong&gt;（如 GitHub Pages）。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;优点&lt;/strong&gt;：只需&lt;strong&gt;提交代码&lt;/strong&gt; (&lt;code&gt;git push&lt;/code&gt;)，后续的&lt;strong&gt;构建&lt;/strong&gt;和&lt;strong&gt;部署&lt;/strong&gt;过程就能&lt;strong&gt;自动完成&lt;/strong&gt;，&lt;strong&gt;方便&lt;/strong&gt;很多。x x &amp;lt;-https://aistudio.google.com/prompts/1dv1SBgRsYgFBSgYe1Dseg0dyYouTZ3_P
&lt;ul&gt;
&lt;li&gt;《《《♐可以源码仓库和静态资源仓库分开；因为源码仓库很重要，每次项目回溯时回溯源码仓库的代码才有意义，回溯静态资源仓库的代码没意义，这意味着未来版本控制就必须要push推送源码仓库，♓但要推送源码仓库就意味着每次推送都要同时push推送源码仓库和静态资源仓库，手动维护两个独立的 Git，需再手动进行第二次推送 流程退冗余了；♐而有了action部署静态资源后，每次只需要推送最重要的源码仓库，无需做冗余的推送静态资源仓库的步骤，无需再手动进行第二次推送&amp;gt;&lt;/li&gt;
&lt;li&gt;《♓我觉得最主要作用是源码静态资源仓库和源代码仓库分开；♐其实不要action也行，不要action就不去推送源代码仓库了，在本地只推送public静态资源即可，反正都是推送步骤不会减少&lt;/li&gt;
&lt;li&gt;《《♐用action把部署静态资源到github page的真正价值：多人协作，多人协作时，需要所有人都遵循同样的流程，但很是有人知道我们要推送的是public静态资源，不是源码，这就导致源码把静态资源给污染了（目录混入源代码仓库会极大地污染 Git 历史）》&lt;/li&gt;
&lt;li&gt;&amp;lt;设置好 Action 后，你甚至可以通过 GitHub 网页界面直接编辑 Markdown 文件并提交，Action 照样能完成部署，你此时甚至不需要本地安装 Hugo；因此未来你更换了本地开发机器，构建环境都是一致的，每次 Action 运行时，都是用同一个版本、同一种配置的 Hugo 工具在同一种操作系统环境下进行构建，结果更可控&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>github配置：1 使用.gitignore的意义</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/github%E9%85%8D%E7%BD%AE1-%E4%BD%BF%E7%94%A8.gitignore%E7%9A%84%E6%84%8F%E4%B9%89/</link>
        <pubDate>Mon, 20 Feb 2023 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/github%E9%85%8D%E7%BD%AE1-%E4%BD%BF%E7%94%A8.gitignore%E7%9A%84%E6%84%8F%E4%B9%89/</guid>
        <description>&lt;p&gt;(01:24-02:04) &lt;em&gt;&lt;strong&gt;2.4: 配置 .gitignore 忽略生成文件&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;：&lt;strong&gt;Hugo&lt;/strong&gt; 项目中的某些文件/目录是&lt;strong&gt;自动生成的&lt;/strong&gt;，&lt;strong&gt;不应该&lt;/strong&gt;提交到源代码仓库，包括：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public/&lt;/code&gt;：&lt;strong&gt;Hugo&lt;/strong&gt; 生成的静态网站文件目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resources/&lt;/code&gt;：&lt;strong&gt;Hugo&lt;/strong&gt; 处理后的资源缓存目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hugo.build.lock&lt;/code&gt;：构建锁文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hugo.exe&lt;/code&gt;：（如果在 Windows 下）&lt;strong&gt;Hugo&lt;/strong&gt; 可执行文件本身。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;♈ &lt;strong&gt;操作&lt;/strong&gt;：在本地 Hugo 项目根目录下，&lt;strong&gt;创建&lt;/strong&gt;一个名为 &lt;code&gt;.gitignore&lt;/code&gt; 的文件。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;操作&lt;/strong&gt;：编辑 &lt;code&gt;.gitignore&lt;/code&gt; 文件，将上述需要忽略的文件名或目录名（如 &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;resources&lt;/code&gt;, &lt;code&gt;hugo.build.lock&lt;/code&gt;, &lt;code&gt;hugo.exe&lt;/code&gt;）添加进去，每行一个。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;目的&lt;/strong&gt;：&lt;strong&gt;保证&lt;/strong&gt;上传到 &lt;strong&gt;GitHub&lt;/strong&gt; 的是&lt;strong&gt;最干净、最原始&lt;/strong&gt;的 Hugo 项目文件。
&lt;ul&gt;
&lt;li&gt;《♓目的就是不要让静态资源污染源码，因为hugo-main是源代码仓库，源代码仓库不负责展示github page，只负责运行action得到静态资源给其它部署仓库hugo-dev，所以没必要把多余的静态资源上传到hugo-main，反正在hugo-main展示这些静态资源》&lt;/li&gt;
&lt;li&gt;&amp;lt;git add .：添加所有文件到暂存区（♎.gitignore 会生效，忽略指定文件）。&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>github配置：2 github pull 与 github push，pull对分支后才能用push</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/github%E9%85%8D%E7%BD%AE2-github-pull-%E4%B8%8E-github-pushpull%E5%AF%B9%E5%88%86%E6%94%AF%E5%90%8E%E6%89%8D%E8%83%BD%E7%94%A8push/</link>
        <pubDate>Mon, 20 Feb 2023 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/github%E9%85%8D%E7%BD%AE2-github-pull-%E4%B8%8E-github-pushpull%E5%AF%B9%E5%88%86%E6%94%AF%E5%90%8E%E6%89%8D%E8%83%BD%E7%94%A8push/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[0 检查当前分支的跟踪关系]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;命令：git status；因为如果追踪错误，那么我想要push推送到我想要的分支很可能失败，因为追踪错误的缘故，pull的是其它的分支，因此我想要的分支就没法push了&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[1 取消本地 main 分支对 所有分支 的跟踪]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;命令：git branch &amp;ndash;unset-upstream&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[[[[2 指定pull拉取main的分支（为了push到main，只能强制指定要拉取main分支）]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《命令：git pull origin main》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[[[[3 pull拉取了main分支后 就能push推送到main分支了]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;命令：git push -u origin main&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Archives</title>
        <link>https://yichixing.github.io/hugo-stack-dev/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>模板</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E6%A8%A1%E6%9D%BF/</link>
        <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E6%A8%A1%E6%9D%BF/</guid>
        <description>&lt;img src="https://yichixing.github.io/hugo-stack-dev/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post 模板" /&gt;</description>
        </item>
        <item>
        <title>About</title>
        <link>https://yichixing.github.io/hugo-stack-dev/about/</link>
        <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/about/</guid>
        <description>&lt;p&gt;Written in Go, Hugo is an open source static site generator available under the &lt;a class=&#34;link&#34; href=&#34;https://github.com/gohugoio/hugo/blob/master/LICENSE&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Apache License 2.0.&lt;/a&gt; Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.&lt;/p&gt;
&lt;p&gt;Hugo makes use of a variety of open source projects including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/yuin/goldmark&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/yuin/goldmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/alecthomas/chroma&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/alecthomas/chroma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/muesli/smartcrop&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/muesli/smartcrop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/spf13/cobra&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/spf13/cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/spf13/viper&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/spf13/viper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.&lt;/p&gt;
&lt;p&gt;Hugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.&lt;/p&gt;
&lt;p&gt;Websites built with Hugo are extremely fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.&lt;/p&gt;
&lt;p&gt;Learn more and contribute on &lt;a class=&#34;link&#34; href=&#34;https://github.com/gohugoio&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Links</title>
        <link>https://yichixing.github.io/hugo-stack-dev/links/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/links/</guid>
        <description>&lt;p&gt;To use this feature, add &lt;code&gt;links&lt;/code&gt; section to frontmatter.&lt;/p&gt;
&lt;p&gt;This page&amp;rsquo;s frontmatter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GitHub is the world&amp;#39;s largest software development platform.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://github.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TypeScript&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://www.typescriptlang.org&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ts-logo-128.jpg&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;image&lt;/code&gt; field accepts both local and external images.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Search</title>
        <link>https://yichixing.github.io/hugo-stack-dev/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/search/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
