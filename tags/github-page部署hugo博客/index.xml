<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Github Page部署hugo博客 on 个人笔记博客</title>
        <link>https://yichixing.github.io/hugo-stack-dev/tags/github-page%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2/</link>
        <description>Recent content in Github Page部署hugo博客 on 个人笔记博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Thu, 20 Feb 2025 20:14:22 +0800</lastBuildDate><atom:link href="https://yichixing.github.io/hugo-stack-dev/tags/github-page%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>github page部署hugo博客</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/github-page%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2/</link>
        <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/github-page%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2/</guid>
        <description>&lt;h2 id=&#34;part1-创建新的-github-仓库&#34;&gt;part1: 创建新的 GitHub 仓库
&lt;/h2&gt;&lt;p&gt;(00:04-00:23) &lt;em&gt;&lt;strong&gt;1.1: 推荐仓库命名&lt;/strong&gt;&lt;/em&gt;
对于&lt;strong&gt;首次部署博客&lt;/strong&gt;的用户，视频&lt;strong&gt;推荐&lt;/strong&gt;将 GitHub &lt;strong&gt;仓库名称&lt;/strong&gt;设置为 &lt;code&gt;**用户名.github.io**&lt;/code&gt; 的格式。视频中演示了输入 &lt;code&gt;**letere-gg.github.io**&lt;/code&gt; 作为示例。&lt;/p&gt;
&lt;p&gt;(00:23-00:30) &lt;em&gt;&lt;strong&gt;1.2: 处理命名冲突&lt;/strong&gt;&lt;/em&gt;
视频指出 &lt;code&gt;**letere-gg.github.io**&lt;/code&gt; 这个特定名称在其账户下&lt;strong&gt;已被占用&lt;/strong&gt;，因为它已被用于&lt;strong&gt;部署&lt;/strong&gt;另一个项目（提及了 &lt;strong&gt;Hexo&lt;/strong&gt;，但后续操作基于 &lt;strong&gt;Hugo&lt;/strong&gt;）。&lt;/p&gt;
&lt;h2 id=&#34;part2-理解-github-pages-的-url-结构&#34;&gt;part2: 理解 GitHub Pages 的 URL 结构
&lt;/h2&gt;&lt;p&gt;(00:30-00:47) &lt;em&gt;&lt;strong&gt;2.1: &lt;code&gt;用户名.github.io&lt;/code&gt; 仓库的 URL&lt;/strong&gt;&lt;/em&gt;
视频展示了名为 &lt;code&gt;**letere-gg.github.io**&lt;/code&gt; 的仓库，在其 &lt;strong&gt;Settings -&amp;gt; Pages&lt;/strong&gt; 中，生成的 &lt;strong&gt;GitHub Pages&lt;/strong&gt; 网站 URL 是&lt;strong&gt;根域名&lt;/strong&gt; &lt;code&gt;**https://letere-gg.github.io**&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;(00:48-01:02) &lt;em&gt;&lt;strong&gt;2.2: 普通仓库的 URL&lt;/strong&gt;&lt;/em&gt;
视频接着展示了另一个名为 &lt;code&gt;**hugo-stack**&lt;/code&gt; 的仓库，在其 &lt;strong&gt;Settings -&amp;gt; Pages&lt;/strong&gt; 中，生成的 &lt;strong&gt;GitHub Pages&lt;/strong&gt; 网站 URL 带有&lt;strong&gt;仓库名称作为子路径&lt;/strong&gt;，即 &lt;code&gt;**https://letere-gg.github.io/hugo-stack**&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;(01:02-01:18) &lt;em&gt;&lt;strong&gt;2.3: 部署建议&lt;/strong&gt;&lt;/em&gt;
基于以上对比，视频&lt;strong&gt;建议首次部署时使用 &lt;code&gt;用户名.github.io&lt;/code&gt; 格式命名仓库&lt;/strong&gt;，这样生成的网站 URL &lt;strong&gt;不带子路径&lt;/strong&gt;，可以&lt;strong&gt;避免一些潜在的 bug&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;part3-设置新仓库与本地项目配置&#34;&gt;part3: 设置新仓库与本地项目配置
&lt;/h2&gt;&lt;p&gt;(01:21-01:35) &lt;em&gt;&lt;strong&gt;3.1: 创建示例仓库&lt;/strong&gt;&lt;/em&gt;
由于推荐的仓库名已被占用，视频演示创建了一个&lt;strong&gt;新的示例仓库&lt;/strong&gt;，命名为 &lt;code&gt;**hugo-dev**&lt;/code&gt;，并确保其设置为 &lt;strong&gt;Public&lt;/strong&gt;（公开），因为&lt;strong&gt;只有公开仓库才能部署 GitHub Pages 静态页面&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(01:35-01:46) &lt;em&gt;&lt;strong&gt;3.2: 准备上传代码&lt;/strong&gt;&lt;/em&gt;
仓库创建成功后，页面显示了用于&lt;strong&gt;上传代码的 Git 命令&lt;/strong&gt;。视频提到下一步是上传代码，但在此之前需要&lt;strong&gt;修改一个配置文件&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(01:46-02:16) &lt;em&gt;&lt;strong&gt;3.3: 修改 &lt;code&gt;hugo.yaml&lt;/code&gt; 文件&lt;/strong&gt;&lt;/em&gt;
视频打开本地项目中的 &lt;code&gt;**hugo.yaml**&lt;/code&gt; 文件，指出需要修改 &lt;code&gt;**baseURL**&lt;/code&gt; 配置项。将其值&lt;strong&gt;修改为&lt;/strong&gt;与 GitHub Pages 部署后&lt;strong&gt;期望的 URL 一致&lt;/strong&gt;。因为仓库名是 &lt;code&gt;hugo-dev&lt;/code&gt;，所以 &lt;code&gt;baseURL&lt;/code&gt; 被设置为 &lt;code&gt;**https://letere-gg.github.io/hugo-dev/**&lt;/code&gt;，&lt;strong&gt;必须包含&lt;/strong&gt;末尾的仓库名子路径。&lt;/p&gt;
&lt;h2 id=&#34;part4-生成静态网站并上传至-github&#34;&gt;part4: 生成静态网站并上传至 GitHub
&lt;/h2&gt;&lt;p&gt;(02:18-02:46) &lt;em&gt;&lt;strong&gt;4.1: 使用 Hugo 生成站点&lt;/strong&gt;&lt;/em&gt;
视频演示在本地项目文件夹中♈&lt;strong&gt;删除旧的 &lt;code&gt;public&lt;/code&gt; 文件夹&lt;/strong&gt;（如果存在）。然后在项目&lt;strong&gt;根目录&lt;/strong&gt;打开&lt;strong&gt;命令提示符 (cmd)&lt;/strong&gt;，♈运行 &lt;code&gt;**hugo -D**&lt;/code&gt; 命令。此命令使用 &lt;strong&gt;Hugo&lt;/strong&gt; &lt;strong&gt;编译&lt;/strong&gt;项目，并♈将生成的&lt;strong&gt;静态网站文件&lt;/strong&gt;输出到 &lt;code&gt;public&lt;/code&gt; 文件夹中。&lt;/p&gt;
&lt;p&gt;(02:46-03:18) &lt;em&gt;&lt;strong&gt;4.2: 初始化 Git 仓库&lt;/strong&gt;&lt;/em&gt;
♈进入新生成的 &lt;code&gt;public&lt;/code&gt; 文件夹，确认里面是&lt;strong&gt;静态网站内容&lt;/strong&gt;。在此 &lt;code&gt;public&lt;/code&gt; 文件夹内打开&lt;strong&gt;命令提示符 (cmd)&lt;/strong&gt;，并♈执行 &lt;code&gt;**git init**&lt;/code&gt; 命令，将其&lt;strong&gt;初始化为一个 Git 仓库&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(03:18-03:49) &lt;em&gt;&lt;strong&gt;4.3: 添加文件、提交并关联远程仓库&lt;/strong&gt;&lt;/em&gt;
♈按照 GitHub 页面提供的指南（略作修改）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;**git add .**&lt;/code&gt; 命令将 &lt;code&gt;public&lt;/code&gt; 文件夹内&lt;strong&gt;所有生成的静态文件&lt;/strong&gt;添加到暂存区（视频强调是 &lt;code&gt;.&lt;/code&gt; 而不是 &lt;code&gt;README.md&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;**git commit -m &amp;quot;first commit&amp;quot;**&lt;/code&gt; 提交更改。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;**git branch -M main**&lt;/code&gt; 将当前分支重命名为 &lt;code&gt;main&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;**git remote add origin https://github.com/letere-gg/hugo-dev.git**&lt;/code&gt; 关联到之前创建的&lt;strong&gt;远程 GitHub 仓库&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:49-04:08) &lt;em&gt;&lt;strong&gt;4.4: 推送代码到 GitHub&lt;/strong&gt;&lt;/em&gt;
♈执行 &lt;code&gt;**git push -u origin main**&lt;/code&gt; 命令，将本地 &lt;code&gt;main&lt;/code&gt; 分支的&lt;strong&gt;代码推送到 GitHub 远程仓库&lt;/strong&gt;。视频提到在国内环境可能需要&lt;strong&gt;开启代理&lt;/strong&gt;才能成功推送。推送完成后，&lt;strong&gt;刷新 GitHub 仓库页面&lt;/strong&gt;，可以看到&lt;strong&gt;静态文件已成功上传&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;part5-启用-github-pages-并验证部署&#34;&gt;part5: 启用 GitHub Pages 并验证部署
&lt;/h2&gt;&lt;p&gt;(04:09-04:23) &lt;em&gt;&lt;strong&gt;5.1: 配置 Pages 源&lt;/strong&gt;&lt;/em&gt;
返回 GitHub 上的 &lt;code&gt;hugo-dev&lt;/code&gt; 仓库页面，进入 &lt;strong&gt;Settings -&amp;gt; Pages&lt;/strong&gt; 选项卡。在 &amp;ldquo;Build and deployment&amp;rdquo; 部分下的 &amp;ldquo;Source&amp;rdquo; 设置中，选择 &lt;strong&gt;Deploy from a branch&lt;/strong&gt;，然后从 &amp;ldquo;Branch&amp;rdquo; 下拉菜单中选择 &lt;code&gt;**main**&lt;/code&gt; 分支，点击 &lt;strong&gt;Save&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(04:23-05:24) &lt;em&gt;&lt;strong&gt;5.2: 等待部署完成&lt;/strong&gt;&lt;/em&gt;
保存设置后，&lt;strong&gt;GitHub Pages 开始部署&lt;/strong&gt;过程。视频指出这&lt;strong&gt;需要一些时间&lt;/strong&gt;。等待页面刷新，直到显示 &amp;ldquo;Your site is live at &amp;hellip;&amp;rdquo; 并给出&lt;strong&gt;最终的网站 URL&lt;/strong&gt;：&lt;code&gt;**https://letere-gg.github.io/hugo-dev/**&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;(05:24-05:35) &lt;em&gt;&lt;strong&gt;5.3: 访问并验证站点&lt;/strong&gt;&lt;/em&gt;
点击页面上提供的&lt;strong&gt;网站链接&lt;/strong&gt;。浏览器成功加载了部署好的&lt;strong&gt;博客网站&lt;/strong&gt;，显示内容正常，证明&lt;strong&gt;部署已成功&lt;/strong&gt;。视频总结这个过程&lt;strong&gt;很简单&lt;/strong&gt;。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
