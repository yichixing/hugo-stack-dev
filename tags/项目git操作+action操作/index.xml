<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>项目git操作&#43;action操作 on 个人笔记博客</title>
        <link>https://yichixing.github.io/hugo-stack-dev/tags/%E9%A1%B9%E7%9B%AEgit%E6%93%8D%E4%BD%9C&#43;action%E6%93%8D%E4%BD%9C/</link>
        <description>Recent content in 项目git操作&#43;action操作 on 个人笔记博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Thu, 20 Feb 2025 20:14:22 +0800</lastBuildDate><atom:link href="https://yichixing.github.io/hugo-stack-dev/tags/%E9%A1%B9%E7%9B%AEgit%E6%93%8D%E4%BD%9C+action%E6%93%8D%E4%BD%9C/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>使用github-action自动部署hugo博客到“page”仓库</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E4%BD%BF%E7%94%A8github-action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2%E5%88%B0page%E4%BB%93%E5%BA%93/</link>
        <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E4%BD%BF%E7%94%A8github-action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hugo%E5%8D%9A%E5%AE%A2%E5%88%B0page%E4%BB%93%E5%BA%93/</guid>
        <description>&lt;h1 id=&#34;part1-介绍-github-action-自动化部署-hugo-博客&#34;&gt;part1: 介绍 GitHub Action 自动化部署 Hugo 博客
&lt;/h1&gt;&lt;p&gt;(00:00-00:09) &lt;em&gt;&lt;strong&gt;1.1: 介绍目标&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视频开篇展示了一个本地运行的 &lt;strong&gt;Hugo&lt;/strong&gt; 博客 (&lt;code&gt;localhost:1313&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;目标是向大家介绍如何通过 &lt;strong&gt;GitHub&lt;/strong&gt; 的 &lt;strong&gt;GitHub Actions&lt;/strong&gt; 功能来&lt;strong&gt;自动部署&lt;/strong&gt;博客。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(00:09-00:32) &lt;em&gt;&lt;strong&gt;1.2: 手动部署痛点与自动化优势&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;♈指出传统方式下，每次修改完文件后，都需要&lt;strong&gt;手动将生成&lt;/strong&gt;的 &lt;code&gt;public&lt;/code&gt; 文件夹&lt;strong&gt;上传&lt;/strong&gt;到服务器或托管平台，这个过程比较&lt;strong&gt;麻烦&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♈使用 &lt;strong&gt;GitHub Actions&lt;/strong&gt; 可以实现&lt;strong&gt;自动化&lt;/strong&gt;：&lt;strong&gt;自动&lt;/strong&gt;帮我们&lt;strong&gt;生成&lt;/strong&gt; &lt;code&gt;public&lt;/code&gt; 目录，并将其&lt;strong&gt;部署&lt;/strong&gt;到&lt;strong&gt;静态页面网站&lt;/strong&gt;（如 GitHub Pages）。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;优点&lt;/strong&gt;：只需&lt;strong&gt;提交代码&lt;/strong&gt; (&lt;code&gt;git push&lt;/code&gt;)，后续的&lt;strong&gt;构建&lt;/strong&gt;和&lt;strong&gt;部署&lt;/strong&gt;过程就能&lt;strong&gt;自动完成&lt;/strong&gt;，&lt;strong&gt;方便&lt;/strong&gt;很多。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part2-创建-github-仓库并推送-hugo-源码&#34;&gt;part2: 创建 GitHub 仓库并推送 Hugo 源码
&lt;/h1&gt;&lt;p&gt;(00:32-00:41) &lt;em&gt;&lt;strong&gt;2.1: 创建仓库准备&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要实现自动化部署，首先需要一个 &lt;strong&gt;GitHub 仓库&lt;/strong&gt;来存放 &lt;strong&gt;Hugo&lt;/strong&gt; 项目的&lt;strong&gt;主文件&lt;/strong&gt;（源代码）。&lt;/li&gt;
&lt;li&gt;操作：导航到 &lt;strong&gt;GitHub&lt;/strong&gt; 网站，准备&lt;strong&gt;创建&lt;/strong&gt;一个新的仓库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(00:41-01:12) &lt;em&gt;&lt;strong&gt;2.2: 创建私有仓库&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 GitHub 创建新仓库页面（经历短暂的网络卡顿后），设置仓库信息：
&lt;ul&gt;
&lt;li&gt;仓库名：&lt;code&gt;hugo-main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可见性：&lt;strong&gt;建议&lt;/strong&gt;选择&lt;strong&gt;私有（Private）&lt;/strong&gt;，因为源代码一般不需要公开。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作：点击 &lt;code&gt;Create repository&lt;/code&gt; 完成创建。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(01:12-01:24) &lt;em&gt;&lt;strong&gt;2.3: 上传文件准备&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仓库创建完成后，需要将本地的 &lt;strong&gt;Hugo&lt;/strong&gt; 项目文件&lt;strong&gt;上传&lt;/strong&gt;到这个新仓库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键点&lt;/strong&gt;：上传前需要注意&lt;strong&gt;忽略&lt;/strong&gt;掉一些不需要版本控制的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(01:24-02:04) &lt;em&gt;&lt;strong&gt;2.4: 配置 .gitignore 忽略生成文件&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;：&lt;strong&gt;Hugo&lt;/strong&gt; 项目中的某些文件/目录是&lt;strong&gt;自动生成的&lt;/strong&gt;，&lt;strong&gt;不应该&lt;/strong&gt;提交到源代码仓库，包括：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public/&lt;/code&gt;：&lt;strong&gt;Hugo&lt;/strong&gt; 生成的静态网站文件目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resources/&lt;/code&gt;：&lt;strong&gt;Hugo&lt;/strong&gt; 处理后的资源缓存目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hugo.build.lock&lt;/code&gt;：构建锁文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hugo.exe&lt;/code&gt;：（如果在 Windows 下）&lt;strong&gt;Hugo&lt;/strong&gt; 可执行文件本身。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;♈ &lt;strong&gt;操作&lt;/strong&gt;：在本地 Hugo 项目根目录下，&lt;strong&gt;创建&lt;/strong&gt;一个名为 &lt;code&gt;.gitignore&lt;/code&gt; 的文件。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;操作&lt;/strong&gt;：编辑 &lt;code&gt;.gitignore&lt;/code&gt; 文件，将上述需要忽略的文件名或目录名（如 &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;resources&lt;/code&gt;, &lt;code&gt;hugo.build.lock&lt;/code&gt;, &lt;code&gt;hugo.exe&lt;/code&gt;）添加进去，每行一个。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;目的&lt;/strong&gt;：&lt;strong&gt;保证&lt;/strong&gt;上传到 &lt;strong&gt;GitHub&lt;/strong&gt; 的是&lt;strong&gt;最干净、最原始&lt;/strong&gt;的 Hugo 项目文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(02:04-03:10) &lt;em&gt;&lt;strong&gt;2.5: Git 推送操作&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：在本地 Hugo 项目目录下打开&lt;strong&gt;命令行终端 (cmd)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;操作&lt;/strong&gt;：执行一系列 **Git 命令（仓库首页有）**来初始化仓库、添加文件并推送到远程 &lt;strong&gt;GitHub&lt;/strong&gt; 仓库：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;：&lt;strong&gt;初始化&lt;/strong&gt;本地 Git 仓库。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add .&lt;/code&gt;：&lt;strong&gt;添加&lt;/strong&gt;所有文件到暂存区（&lt;code&gt;.gitignore&lt;/code&gt; 会生效，忽略指定文件）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m &amp;quot;first commit&amp;quot;&lt;/code&gt;：&lt;strong&gt;提交&lt;/strong&gt;更改。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -M main&lt;/code&gt;：&lt;strong&gt;重命名&lt;/strong&gt;当前分支为 &lt;code&gt;main&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote add origin https://github.com/letere-gz/hugo-main.git&lt;/code&gt;：&lt;strong&gt;关联&lt;/strong&gt;远程仓库地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u origin main&lt;/code&gt;：&lt;strong&gt;推送&lt;/strong&gt;本地 &lt;code&gt;main&lt;/code&gt; 分支到远程仓库。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证&lt;/strong&gt;：切换到 &lt;strong&gt;GitHub&lt;/strong&gt; 仓库页面刷新，确认项目文件已上传，且 &lt;code&gt;.gitignore&lt;/code&gt; 中指定的文件（如 &lt;code&gt;public&lt;/code&gt;）&lt;strong&gt;未被上传&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part3-配置-github-actions-workflow&#34;&gt;part3: 配置 GitHub Actions Workflow
&lt;/h1&gt;&lt;p&gt;(03:10-03:59) &lt;em&gt;&lt;strong&gt;3.1: 参考官方与民间方案&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提及&lt;/strong&gt;：作者自己的博客 (&lt;code&gt;letere-gz.github.io/hugo-stack/&lt;/code&gt;) 提供了关于 &lt;strong&gt;Hugo + GitHub&lt;/strong&gt; 免费部署的教程文章。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;参考&lt;/strong&gt;：查看 &lt;strong&gt;Hugo 官方文档&lt;/strong&gt; (&lt;code&gt;gohugo.io&lt;/code&gt;) 中关于 &lt;code&gt;Hosting and deployment&lt;/code&gt; -&amp;gt; &lt;code&gt;Host on GitHub Pages&lt;/code&gt; 的部分。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发现&lt;/strong&gt;：官方文档提供了一个使用 &lt;strong&gt;GitHub Actions&lt;/strong&gt; 部署的 &lt;strong&gt;workflow&lt;/strong&gt; 示例（&lt;code&gt;Step 6&lt;/code&gt; 中的 &lt;code&gt;hugo.yml&lt;/code&gt; 文件内容）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;评价&lt;/strong&gt;：作者认为官方提供的 &lt;strong&gt;workflow&lt;/strong&gt; 文件内容&lt;strong&gt;很长&lt;/strong&gt;，配置起来可能有点&lt;strong&gt;麻烦&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:59-04:13) &lt;em&gt;&lt;strong&gt;3.2: 引入简化版 Workflow&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;建议&lt;/strong&gt;：作者推荐使用一个&lt;strong&gt;民间大佬（peaceiris）&lt;strong&gt;编写和维护的&lt;/strong&gt;简化版&lt;/strong&gt;的 &lt;strong&gt;GitHub Actions workflow&lt;/strong&gt; 配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;来源&lt;/strong&gt;：该简化配置可以在作者的教程文章中找到（或者直接参考 &lt;code&gt;peaceiris/actions-hugo&lt;/code&gt; 和 &lt;code&gt;peaceiris/actions-gh-pages&lt;/code&gt; 这两个 Action）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优势&lt;/strong&gt;：相比官方示例，这个版本&lt;strong&gt;更简洁、更方便&lt;/strong&gt;使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:13-06:15) &lt;em&gt;&lt;strong&gt;3.3: 解析简化版 Workflow 配置&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;展示&lt;/strong&gt;：作者展示了其教程文章中的&lt;strong&gt;简化版 workflow YAML 文件&lt;/strong&gt;内容，并逐段解释其含义：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name: deploy&lt;/code&gt;: 定义 &lt;strong&gt;Workflow 的名称&lt;/strong&gt;，显示在 Actions 列表里。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on: push: branches: [ main ]&lt;/code&gt;: 设置&lt;strong&gt;触发条件&lt;/strong&gt;，当代码被 &lt;code&gt;push&lt;/code&gt; 到 &lt;code&gt;main&lt;/code&gt; 分支时，自动执行此 workflow。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jobs: deploy:&lt;/code&gt;: 定义一个名为 &lt;code&gt;deploy&lt;/code&gt; 的&lt;strong&gt;作业 (job)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♈ &lt;code&gt;runs-on: ubuntu-latest&lt;/code&gt;: 指定该作业运行在 &lt;strong&gt;GitHub&lt;/strong&gt; 提供的最新版 &lt;strong&gt;Ubuntu&lt;/strong&gt; 虚拟环境上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;steps:&lt;/code&gt;: 定义该作业包含的一系列&lt;strong&gt;步骤 (step)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;- name: Checkout&lt;/code&gt;: 步骤名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uses: actions/checkout@v4&lt;/code&gt;: 使用官方提供的 &lt;code&gt;checkout&lt;/code&gt; &lt;strong&gt;Action&lt;/strong&gt;，将&lt;strong&gt;仓库代码&lt;/strong&gt;下载到运行环境中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with: fetch-depth: 0&lt;/code&gt;: &lt;strong&gt;获取&lt;/strong&gt;完整的 Git 历史记录（对于 Hugo 可能需要）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;- name: Setup Hugo&lt;/code&gt;: 步骤名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uses: peaceiris/actions-hugo@v3&lt;/code&gt;: 使用 &lt;code&gt;peaceiris&lt;/code&gt; 提供的 &lt;code&gt;actions-hugo&lt;/code&gt; &lt;strong&gt;Action&lt;/strong&gt; 来&lt;strong&gt;安装和设置 Hugo 环境&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with: hugo-version: &#39;latest&#39;, extended: true&lt;/code&gt;: 配置 &lt;code&gt;actions-hugo&lt;/code&gt;，指定安装&lt;strong&gt;最新 (latest)&lt;/strong&gt; 版本的 Hugo，并且是&lt;strong&gt;扩展 (extended)&lt;/strong&gt; 版本（支持 Sass/SCSS）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;- name: Build Web&lt;/code&gt;: 步骤名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run: hugo -D&lt;/code&gt;: &lt;strong&gt;执行 Hugo 命令&lt;/strong&gt; (&lt;code&gt;hugo&lt;/code&gt; 默认会构建，&lt;code&gt;-D&lt;/code&gt; 表示包含草稿内容，但在部署时通常不需要 &lt;code&gt;-D&lt;/code&gt;，作者这里可能写错了，通常只用 &lt;code&gt;hugo&lt;/code&gt;)，&lt;strong&gt;生成静态网站文件&lt;/strong&gt;到 &lt;code&gt;public&lt;/code&gt; 目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;- name: Deploy Web&lt;/code&gt;: 步骤名称。&lt;/li&gt;
&lt;li&gt;♈ &lt;code&gt;uses: peaceiris/actions-gh-pages@v4&lt;/code&gt;: 使用 &lt;code&gt;peaceiris&lt;/code&gt; 提供的 &lt;code&gt;actions-gh-pages&lt;/code&gt; &lt;strong&gt;Action&lt;/strong&gt;，将构建好的网站&lt;strong&gt;部署到 GitHub Pages&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with:&lt;/code&gt;: 配置 &lt;code&gt;actions-gh-pages&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PERSONAL_TOKEN: ${{ secrets.你的token变量名 }}&lt;/code&gt;: &lt;strong&gt;关键配置&lt;/strong&gt;，用于&lt;strong&gt;授权&lt;/strong&gt; Action 推送代码到目标仓库。需要一个&lt;strong&gt;个人访问令牌 (PAT)&lt;/strong&gt;，并将其存储为仓库的 &lt;strong&gt;Secret&lt;/strong&gt;。&lt;code&gt;你的token变量名&lt;/code&gt; 需要替换成实际设置的 &lt;strong&gt;Secret 名称&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXTERNAL_REPOSITORY: 你的github名/你的仓库名&lt;/code&gt;: &lt;strong&gt;关键配置&lt;/strong&gt;，指定&lt;strong&gt;目标仓库&lt;/strong&gt;，即用来&lt;strong&gt;托管 GitHub Pages 的仓库地址&lt;/strong&gt;（例如 &lt;code&gt;letere-gz/hugo-dev&lt;/code&gt;），&lt;strong&gt;必须修改&lt;/strong&gt;为用户自己的 Pages 仓库。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUBLISH_BRANCH: main&lt;/code&gt;: 指定将 &lt;code&gt;public&lt;/code&gt; 目录的内容推送到&lt;strong&gt;目标仓库&lt;/strong&gt;的哪个&lt;strong&gt;分支&lt;/strong&gt;（通常是 &lt;code&gt;gh-pages&lt;/code&gt; 或 &lt;code&gt;main&lt;/code&gt;，取决于 Pages 设置）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUBLISH_DIR: ./public&lt;/code&gt;: 指定要&lt;strong&gt;发布&lt;/strong&gt;的&lt;strong&gt;目录&lt;/strong&gt;，即 Hugo 构建生成的 &lt;code&gt;public&lt;/code&gt; 目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commit_message: auto deploy&lt;/code&gt;: &lt;strong&gt;自动部署&lt;/strong&gt;时 Git 提交的&lt;strong&gt;消息&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part4-创建和配置-personal-access-token-pat&#34;&gt;part4: 创建和配置 Personal Access Token (PAT)
&lt;/h1&gt;&lt;p&gt;(06:15-06:49) &lt;em&gt;&lt;strong&gt;4.1: Token 的作用与必要性&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;重申&lt;/strong&gt;：Workflow 中的 &lt;code&gt;PERSONAL_TOKEN&lt;/code&gt; 参数需要填入一个&lt;strong&gt;个人访问令牌 (PAT)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：这个 Token 用于&lt;strong&gt;身份验证&lt;/strong&gt;，使得 &lt;strong&gt;GitHub Actions&lt;/strong&gt; 有权限将构建好的静态文件推送到&lt;strong&gt;目标 GitHub Pages 仓库&lt;/strong&gt;。没有它，推送会因权限不足而失败。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作准备&lt;/strong&gt;：接下来演示如何生成这个 Token。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:49-08:09) &lt;em&gt;&lt;strong&gt;4.2: 生成 Personal Access Token (Classic)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作路径&lt;/strong&gt;：在 &lt;strong&gt;GitHub&lt;/strong&gt; 页面，点击右上角个人头像 -&amp;gt; &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; 左侧菜单滚动到底部找到 &lt;code&gt;Developer settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Personal access tokens&lt;/code&gt; -&amp;gt; &lt;code&gt;Tokens (classic)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：点击 &lt;code&gt;Generate new token&lt;/code&gt; 按钮，选择 &lt;code&gt;Generate new token (classic)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置 Token&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Note&lt;/code&gt;：给 Token 起一个&lt;strong&gt;描述性名称&lt;/strong&gt;，例如 “用作部署”。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Expiration&lt;/code&gt;：设置&lt;strong&gt;过期时间&lt;/strong&gt;。作者&lt;strong&gt;建议选择 &lt;code&gt;No expiration&lt;/code&gt;（永不过期）&lt;/strong&gt;，理由是避免定期更新 Token 的麻烦。&lt;strong&gt;但也提示&lt;/strong&gt; GitHub 出于&lt;strong&gt;安全&lt;/strong&gt;考虑&lt;strong&gt;建议&lt;/strong&gt;设置过期时间。对于个人私有仓库，作者认为永不过期问题不大。
♈*   &lt;code&gt;Select scopes&lt;/code&gt;：选择 Token 的&lt;strong&gt;权限范围&lt;/strong&gt;。&lt;strong&gt;必须勾选&lt;/strong&gt;以下两项：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;repo&lt;/code&gt;：授予对仓库的完全控制权（包括推送）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;workflow&lt;/code&gt;：授予更新 GitHub Actions workflow 的权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成&lt;/strong&gt;：点击页面底部的 &lt;code&gt;Generate token&lt;/code&gt; 按钮。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:09-08:41) &lt;em&gt;&lt;strong&gt;4.3: 保存 Token&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;♈ &lt;strong&gt;重要提示&lt;/strong&gt;：Token 生成后，&lt;strong&gt;完整的 Token 字符串&lt;/strong&gt;只会&lt;strong&gt;显示这一次&lt;/strong&gt;。&lt;strong&gt;必须立即复制&lt;/strong&gt; (&lt;code&gt;Copy&lt;/code&gt; 按钮) 并将其&lt;strong&gt;保存&lt;/strong&gt;在安全的地方（例如，作者将其粘贴到了本地的记事本文件中）。如果关闭或刷新页面，将&lt;strong&gt;无法再次查看&lt;/strong&gt;完整的 Token。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:41-10:19) &lt;em&gt;&lt;strong&gt;4.4: 配置 Repository Secret&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;♈ &lt;strong&gt;目的&lt;/strong&gt;：将生成的 Token 安全地提供给 &lt;strong&gt;GitHub Actions workflow&lt;/strong&gt; 使用。&lt;strong&gt;不应该&lt;/strong&gt;直接将 Token 字符串写入 YAML 文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作路径&lt;/strong&gt;：回到&lt;strong&gt;存放 Hugo 源代码&lt;/strong&gt;的仓库（即 &lt;code&gt;hugo-main&lt;/code&gt;），进入该仓库的 &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; 左侧菜单 &lt;code&gt;Security&lt;/code&gt; 下的 &lt;code&gt;Secrets and variables&lt;/code&gt; -&amp;gt; &lt;code&gt;Actions&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;操作&lt;/strong&gt;：点击 &lt;code&gt;New repository secret&lt;/code&gt; 按钮。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置 Secret&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name&lt;/code&gt;：输入 &lt;strong&gt;Secret 的名称&lt;/strong&gt;。这个名称&lt;strong&gt;必须&lt;/strong&gt;与 workflow YAML 文件中 &lt;code&gt;secrets.&lt;/code&gt; 后面引用的名称&lt;strong&gt;完全一致&lt;/strong&gt;。作者在这里将其命名为 &lt;code&gt;TOKEN&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Secret&lt;/code&gt;：将刚才&lt;strong&gt;复制并保存&lt;/strong&gt;的&lt;strong&gt;完整 Token 字符串&lt;/strong&gt;粘贴到这里。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保存&lt;/strong&gt;：点击 &lt;code&gt;Add secret&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;优点&lt;/strong&gt;：使用 &lt;strong&gt;Secrets&lt;/strong&gt; 可以&lt;strong&gt;隐藏&lt;/strong&gt;敏感信息，workflow 运行时会安全地注入该值，比硬编码在代码中&lt;strong&gt;安全&lt;/strong&gt;得多。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part5-演示自动化部署流程&#34;&gt;part5: 演示自动化部署流程
&lt;/h1&gt;&lt;p&gt;(10:19-10:31) &lt;em&gt;&lt;strong&gt;5.1: 准备 workflow 文件&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：回到本地的 Hugo 项目目录（&lt;code&gt;dev&lt;/code&gt; 目录）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;下一步&lt;/strong&gt;：需要将包含 workflow 配置的 YAML 文件添加到项目中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(10:31-11:29) &lt;em&gt;&lt;strong&gt;5.2: 创建并编辑 workflow 文件&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;♈&lt;strong&gt;操作&lt;/strong&gt;：在本地 Hugo 项目根目录下，&lt;strong&gt;创建&lt;/strong&gt; &lt;code&gt;.github&lt;/code&gt; 文件夹，然后在 &lt;code&gt;.github&lt;/code&gt; 文件夹内&lt;strong&gt;创建&lt;/strong&gt; &lt;code&gt;workflows&lt;/code&gt; 文件夹。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;操作&lt;/strong&gt;：在 &lt;code&gt;workflows&lt;/code&gt; 文件夹中，&lt;strong&gt;新建&lt;/strong&gt;一个 &lt;strong&gt;YAML 文件&lt;/strong&gt;，作者将其命名为 &lt;code&gt;hugo_deploy.yaml&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;♈&lt;strong&gt;操作&lt;/strong&gt;：使用文本编辑器打开 &lt;code&gt;hugo_deploy.yaml&lt;/code&gt; 文件，将之前从教程文章中&lt;strong&gt;复制&lt;/strong&gt;的&lt;strong&gt;简化版 workflow&lt;/strong&gt; 内容&lt;strong&gt;粘贴&lt;/strong&gt;进去。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(11:29-11:57) &lt;em&gt;&lt;strong&gt;5.3: 修改 workflow 文件参数&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：在粘贴好的 workflow 内容中，&lt;strong&gt;修改&lt;/strong&gt;两个关键的 &lt;code&gt;with&lt;/code&gt; 参数：
&lt;ul&gt;
&lt;li&gt;♈将 &lt;code&gt;PERSONAL_TOKEN: ${{ secrets.你的token变量名 }}&lt;/code&gt; 修改为 &lt;code&gt;PERSONAL_TOKEN: ${{ secrets.TOKEN }}&lt;/code&gt;，确保 &lt;code&gt;TOKEN&lt;/code&gt; 与上一步创建的 &lt;strong&gt;Repository Secret 名称&lt;/strong&gt;一致。&lt;/li&gt;
&lt;li&gt;♈ 将 &lt;code&gt;EXTERNAL_REPOSITORY: 你的github名/你的仓库名&lt;/code&gt; 修改为&lt;strong&gt;实际的 GitHub Pages 目标仓库地址&lt;/strong&gt;，作者修改为 &lt;code&gt;letere-gz/hugo-dev&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保存&lt;/strong&gt;：保存对 &lt;code&gt;hugo_deploy.yaml&lt;/code&gt; 文件的修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(11:57-12:47) &lt;em&gt;&lt;strong&gt;5.4: 创建新文章验证部署&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：为了验证&lt;strong&gt;推送到 &lt;code&gt;main&lt;/code&gt; 分支&lt;/strong&gt;是否能&lt;strong&gt;自动触发部署&lt;/strong&gt;，需要对项目做一些更改，例如&lt;strong&gt;添加一篇新文章&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现状&lt;/strong&gt;：先查看本地 (&lt;code&gt;localhost:1313&lt;/code&gt;) 运行的博客，确认当前的文章列表（只有一个 &amp;ldquo;Chinese Test&amp;rdquo;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(12:47-13:22) &lt;em&gt;&lt;strong&gt;5.5: 本地新增文章&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：在命令行中，执行 &lt;code&gt;hugo new content post/newnewnew/index.md&lt;/code&gt; 命令，在 &lt;code&gt;content/post&lt;/code&gt; 目录下创建一个名为 &lt;code&gt;newnewnew&lt;/code&gt; 的子目录，并在其中生成 &lt;code&gt;index.md&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：再次执行 &lt;code&gt;hugo server -D&lt;/code&gt; 启动本地服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证&lt;/strong&gt;：访问 &lt;code&gt;localhost:1313&lt;/code&gt;，确认名为 &lt;code&gt;Newnewnew&lt;/code&gt; 的新文章已成功创建并显示在本地博客首页。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(13:22-14:03) &lt;em&gt;&lt;strong&gt;5.6: 推送更改触发 Action&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：在命令行中按 &lt;code&gt;Ctrl+C&lt;/code&gt; &lt;strong&gt;停止&lt;/strong&gt;本地 &lt;code&gt;hugo server&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：执行 &lt;strong&gt;Git 命令&lt;/strong&gt;将更改推送到远程仓库：
♈*   &lt;code&gt;git add .&lt;/code&gt;：&lt;strong&gt;添加&lt;/strong&gt;所有更改（包括新文章 &lt;code&gt;.md&lt;/code&gt; 文件和 &lt;code&gt;.github/workflows/hugo_deploy.yaml&lt;/code&gt; 文件）。
♈*   &lt;code&gt;git commit -m &amp;quot;update&amp;quot;&lt;/code&gt;：&lt;strong&gt;提交&lt;/strong&gt;更改，提交信息为 &amp;ldquo;update&amp;rdquo;。
♈*   &lt;code&gt;git push&lt;/code&gt;：&lt;strong&gt;推送&lt;/strong&gt;本地 &lt;code&gt;main&lt;/code&gt; 分支的提交到 &lt;strong&gt;GitHub&lt;/strong&gt; 上的 &lt;code&gt;hugo-main&lt;/code&gt; 仓库。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part6-验证自动化部署结果与总结&#34;&gt;part6: 验证自动化部署结果与总结
&lt;/h1&gt;&lt;p&gt;(14:03-14:29) &lt;em&gt;&lt;strong&gt;6.1: 观察 Action 执行&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：切换回 &lt;strong&gt;GitHub&lt;/strong&gt; 网站，进入 &lt;code&gt;hugo-main&lt;/code&gt; 仓库的 &lt;code&gt;Actions&lt;/code&gt; 标签页。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;观察&lt;/strong&gt;：可以看到一个由刚才的 &lt;code&gt;push&lt;/code&gt; 事件触发的名为 &lt;code&gt;update&lt;/code&gt;（commit 信息）的 &lt;strong&gt;workflow run&lt;/strong&gt; 正在执行（黄色图标，&lt;code&gt;in progress&lt;/code&gt;）或者已经执行完毕（绿色勾，&lt;code&gt;Success&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查&lt;/strong&gt;：点击该 workflow run，可以查看名为 &lt;code&gt;deploy&lt;/code&gt; 的 job，再点击进去可以看到详细的&lt;strong&gt;执行步骤和日志&lt;/strong&gt;，确认 &lt;code&gt;Checkout&lt;/code&gt;, &lt;code&gt;Setup Hugo&lt;/code&gt;, &lt;code&gt;Build Web&lt;/code&gt;, &lt;code&gt;Deploy Web&lt;/code&gt; 等步骤均已&lt;strong&gt;成功完成&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(14:29-14:53) &lt;em&gt;&lt;strong&gt;6.2: 验证部署结果（首次刷新）&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：打开或刷新用于 &lt;strong&gt;GitHub Pages&lt;/strong&gt; 托管的&lt;strong&gt;目标网站&lt;/strong&gt;（作者的是 &lt;code&gt;https://letere-gz.github.io/hugo-dev/&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发现&lt;/strong&gt;：&lt;strong&gt;第一次刷新&lt;/strong&gt;时，页面上可能&lt;strong&gt;仍然没有&lt;/strong&gt;显示新添加的文章 &lt;code&gt;Newnewnew&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原因&lt;/strong&gt;：&lt;strong&gt;GitHub Pages&lt;/strong&gt; 的部署和 &lt;strong&gt;CDN 的缓存更新&lt;/strong&gt;通常会有一定的&lt;strong&gt;延迟&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(14:53-15:10) &lt;em&gt;&lt;strong&gt;6.3: 验证部署结果（成功显示）&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：&lt;strong&gt;再次刷新&lt;/strong&gt; GitHub Pages 网站页面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：新添加的文章 &lt;code&gt;Newnewnew&lt;/code&gt; &lt;strong&gt;成功出现在了&lt;/strong&gt;部署后的网站首页上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结论&lt;/strong&gt;：这表明 &lt;strong&gt;GitHub Actions&lt;/strong&gt; 已经成功地&lt;strong&gt;自动拉取&lt;/strong&gt;了 &lt;code&gt;hugo-main&lt;/code&gt; 仓库的最新代码，使用 &lt;strong&gt;Hugo&lt;/strong&gt; 进行了&lt;strong&gt;构建&lt;/strong&gt;，并将生成的 &lt;code&gt;public&lt;/code&gt; 目录内容&lt;strong&gt;推送并部署&lt;/strong&gt;到了 &lt;code&gt;hugo-dev&lt;/code&gt; 这个 &lt;strong&gt;GitHub Pages&lt;/strong&gt; 仓库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(15:10-15:40) &lt;em&gt;&lt;strong&gt;6.4: 总结与结束&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;总结&lt;/strong&gt;：通过以上设置，现在实现了&lt;strong&gt;自动化部署流程&lt;/strong&gt;。开发者只需专注于&lt;strong&gt;编写文章&lt;/strong&gt; (&lt;code&gt;.md&lt;/code&gt; 文件)，完成后执行 &lt;code&gt;git push&lt;/code&gt; 将代码推送到源仓库 (&lt;code&gt;hugo-main&lt;/code&gt;)。&lt;strong&gt;GitHub Actions&lt;/strong&gt; 就会&lt;strong&gt;自动接管&lt;/strong&gt;后续的&lt;strong&gt;构建和部署&lt;/strong&gt;工作，&lt;strong&gt;无需再手动&lt;/strong&gt;处理 &lt;code&gt;public&lt;/code&gt; 目录的生成和上传。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;评价&lt;/strong&gt;：整个过程变得非常&lt;strong&gt;方便和省心&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
