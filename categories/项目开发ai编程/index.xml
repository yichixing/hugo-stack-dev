<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>项目开发（AI编程） on 个人笔记博客</title>
        <link>https://yichixing.github.io/hugo-stack-dev/categories/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91ai%E7%BC%96%E7%A8%8B/</link>
        <description>Recent content in 项目开发（AI编程） on 个人笔记博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Sun, 27 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://yichixing.github.io/hugo-stack-dev/categories/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91ai%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>MCP&#43;智能体，开发AI版“你画我猜”效率翻倍</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/mcp-%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91ai%E7%89%88%E4%BD%A0%E7%94%BB%E6%88%91%E7%8C%9C%E6%95%88%E7%8E%87%E7%BF%BB%E5%80%8D/</link>
        <pubDate>Sun, 27 Apr 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/mcp-%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91ai%E7%89%88%E4%BD%A0%E7%94%BB%E6%88%91%E7%8C%9C%E6%95%88%E7%8E%87%E7%BF%BB%E5%80%8D/</guid>
        <description>&lt;p&gt;༼ MCP+智能体，开发AI版“你画我猜”效率翻倍༽&lt;/p&gt;
&lt;h1 id=&#34;part1-自定义智能体-mcp-git--github-配置&#34;&gt;part1: 自定义智能体 (MCP Git &amp;amp; Github 配置)
&lt;/h1&gt;&lt;p&gt;(02:42-03:04) &lt;em&gt;&lt;strong&gt;1.1: 添加Git MCP Server&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍如何添加 &lt;strong&gt;Git&lt;/strong&gt; 的 &lt;strong&gt;MCP Server&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;作者展示了在 &lt;strong&gt;MCP 市场&lt;/strong&gt; 中找到 &lt;strong&gt;Git&lt;/strong&gt; 工具，并点击添加。&lt;/li&gt;
&lt;li&gt;添加过程需要参考 &lt;strong&gt;介绍页面&lt;/strong&gt;，将 &lt;strong&gt;JSON 配置&lt;/strong&gt; 复制过来。作者展示了从 Github 上的 &lt;code&gt;modelcontextprotocol/servers&lt;/code&gt; 仓库中找到 &lt;code&gt;mcp-server-git&lt;/code&gt; 的配置，特别是 &lt;strong&gt;uvx&lt;/strong&gt; 的配置方式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：复制了使用 &lt;code&gt;uvx&lt;/code&gt; 命令启动 &lt;code&gt;mcp-server-git&lt;/code&gt; 的 &lt;strong&gt;JSON&lt;/strong&gt; 配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者建议&lt;/strong&gt;：使用 &lt;strong&gt;uvx&lt;/strong&gt; 之前需要在电脑上先安装 &lt;strong&gt;uv&lt;/strong&gt;（一个 Python 版本和包管理工具），可以使用官网的&lt;strong&gt;一键安装命令&lt;/strong&gt;进行安装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;画面内容 (JSON 配置)&lt;/strong&gt;：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;mcpServers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;git&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;uvx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mcp-server-git&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;--repository-path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;作者将复制的 &lt;strong&gt;JSON&lt;/strong&gt; 粘贴到 Trae 的 &lt;strong&gt;MCP Server&lt;/strong&gt; 添加窗口中，并点击确认完成添加。现在 &lt;strong&gt;MCP Servers&lt;/strong&gt; 列表中同时有了 &lt;code&gt;git&lt;/code&gt; 和 &lt;code&gt;GitHub&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:04-03:09) &lt;em&gt;&lt;strong&gt;1.2: 创建Git专家智能体&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：将已配置的 &lt;code&gt;git&lt;/code&gt; 和 &lt;code&gt;GitHub&lt;/code&gt; &lt;strong&gt;MCP Server&lt;/strong&gt; 工具组合成一个专门处理 Git 相关任务的智能体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;点击“智能体” -&amp;gt; “+ 创建智能体”。&lt;/li&gt;
&lt;li&gt;将智能体命名为 &lt;strong&gt;“Git 专家”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在“工具” -&amp;gt; “工具 - MCP”部分，&lt;strong&gt;勾选&lt;/strong&gt;上刚刚配置好的 &lt;code&gt;git&lt;/code&gt; 和 &lt;code&gt;GitHub&lt;/code&gt; 两个工具。&lt;/li&gt;
&lt;li&gt;编写&lt;strong&gt;提示词&lt;/strong&gt;，定义该智能体的角色：&lt;code&gt;你是一个Git专家，擅长使用MCP Server操作Git与Github&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;点击“创建”完成智能体配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part2-git专家智能体测试-初始化与提交&#34;&gt;part2: Git专家智能体测试 (初始化与提交)
&lt;/h1&gt;&lt;p&gt;(03:10-03:21) &lt;em&gt;&lt;strong&gt;2.1: 使用Git专家初始化项目&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：测试新创建的 &lt;strong&gt;“Git 专家”&lt;/strong&gt; 智能体的 Git 初始化能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;新建一个对话窗口。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;@&lt;/code&gt; 符号&lt;strong&gt;调用“Git 专家”智能体&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♏&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;把这个文件夹初始化成一个git工程，名字用文件夹名字即可&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 开始执行任务，依次调用了 &lt;code&gt;git&lt;/code&gt; MCP 工具执行了 &lt;code&gt;git init&lt;/code&gt; 命令，并&lt;strong&gt;创建了 &lt;code&gt;.gitignore&lt;/code&gt; 文件&lt;/strong&gt;，然后执行了 &lt;code&gt;git add .gitignore&lt;/code&gt; 和 &lt;code&gt;git commit -m &amp;quot;初始初始化仓库：添加.gitignore文件&amp;quot;&lt;/code&gt; 命令。&lt;/li&gt;
&lt;li&gt;用户&lt;strong&gt;一路点击确认&lt;/strong&gt;（或设置为自动执行），AI &lt;strong&gt;成功完成了初始化&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:22-03:37) &lt;em&gt;&lt;strong&gt;2.2: 使用Git专家提交到Github&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：测试 &lt;strong&gt;“Git 专家”&lt;/strong&gt; 智能体与 Github 的交互能力，将本地仓库推送到远程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;♏&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;把这个仓库，提交到Github上面&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 开始执行任务，调用 &lt;code&gt;GitHub&lt;/code&gt; MCP 工具&lt;strong&gt;创建了一个新的 Github 仓库&lt;/strong&gt; (&lt;code&gt;tech-shrimp/trae_test&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;接着调用 &lt;code&gt;git&lt;/code&gt; MCP 工具执行了 &lt;code&gt;git remote add origin ...&lt;/code&gt; 和 &lt;code&gt;git push -u origin main&lt;/code&gt; 命令，将本地仓库与远程仓库关联并&lt;strong&gt;推送代码&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：操作成功完成，代码被推送到新创建的 Github 仓库。作者切换到浏览器验证，确认 Github 上已成功创建 &lt;code&gt;trae_test&lt;/code&gt; 仓库。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part3-git专家智能体测试-分支合并与冲突解决&#34;&gt;part3: Git专家智能体测试 (分支合并与冲突解决)
&lt;/h1&gt;&lt;p&gt;(03:37-03:48) &lt;em&gt;&lt;strong&gt;3.1: 模拟分支冲突&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：创建一个更复杂的场景来测试 &lt;strong&gt;“Git 专家”&lt;/strong&gt; 智能体处理&lt;strong&gt;分支合并冲突&lt;/strong&gt;的能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;作者在 Github 仓库 &lt;code&gt;trae_test&lt;/code&gt; 中手动操作：
&lt;ul&gt;
&lt;li&gt;创建了一个 &lt;code&gt;colors.txt&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;创建了两个分支：&lt;code&gt;feature&lt;/code&gt; 和 &lt;code&gt;main&lt;/code&gt;。
♋- 在 &lt;code&gt;feature&lt;/code&gt; 分支的 &lt;code&gt;colors.txt&lt;/code&gt; 文件末尾&lt;strong&gt;添加了一行 &amp;ldquo;pink&amp;rdquo;&lt;/strong&gt;。
♋- 在 &lt;code&gt;main&lt;/code&gt; 分支的 &lt;code&gt;colors.txt&lt;/code&gt; 文件末尾&lt;strong&gt;添加了一行 &amp;ldquo;black&amp;rdquo;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：这样就在两个分支的同一个文件 (&lt;code&gt;colors.txt&lt;/code&gt;) 的同一位置（末尾）产生了&lt;strong&gt;修改冲突&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者观点&lt;/strong&gt;：这是开发过程中&lt;strong&gt;经常遇到的问题&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:48-04:12) &lt;em&gt;&lt;strong&gt;3.2: 指示Git专家合并分支并解决冲突&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 &lt;strong&gt;“Git 专家”&lt;/strong&gt; 智能体自动&lt;strong&gt;合并&lt;/strong&gt; &lt;code&gt;feature&lt;/code&gt; 分支到 &lt;code&gt;main&lt;/code&gt; 分支，并&lt;strong&gt;解决&lt;/strong&gt;期间产生的&lt;strong&gt;冲突&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;♏&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;把远程的feature分支合并到main分支，并且帮我解决冲突&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 开始执行任务：
&lt;ul&gt;
&lt;li&gt;调用 &lt;code&gt;git&lt;/code&gt; MCP 工具执行 &lt;code&gt;git status&lt;/code&gt; 检查状态，然后 &lt;code&gt;git fetch origin&lt;/code&gt; 获取远程更新。&lt;/li&gt;
&lt;li&gt;尝试执行 &lt;code&gt;git merge origin/feature&lt;/code&gt; 进行合并，此时检测到&lt;strong&gt;冲突&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;AI &lt;strong&gt;分析冲突&lt;/strong&gt;，决定&lt;strong&gt;保留两个分支的修改&lt;/strong&gt;（即同时保留 &amp;ldquo;pink&amp;rdquo; 和 &amp;ldquo;black&amp;rdquo;）。&lt;/li&gt;
&lt;li&gt;AI 修改 &lt;code&gt;colors.txt&lt;/code&gt; 文件以解决冲突，然后执行 &lt;code&gt;git add colors.txt&lt;/code&gt; 和 &lt;code&gt;git commit -m &amp;quot;Merge feature branch: 合并 colors.txt 中的颜色列表&amp;quot;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;最后执行 &lt;code&gt;git push&lt;/code&gt; 将解决冲突后的结果推送到远程 &lt;code&gt;main&lt;/code&gt; 分支。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：&lt;code&gt;colors.txt&lt;/code&gt; 文件现在包含 &lt;strong&gt;6 种颜色&lt;/strong&gt;，AI &lt;strong&gt;流畅丝滑地完成了合并和冲突解决&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part4-规则-rule-功能介绍与项目规则配置&#34;&gt;part4: 规则 (Rule) 功能介绍与项目规则配置
&lt;/h1&gt;&lt;p&gt;(04:13-04:29) &lt;em&gt;&lt;strong&gt;4.1: 规则功能介绍&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;规则 (Rule)&lt;/strong&gt; 是 Trae 的另一个&lt;strong&gt;重磅更新&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;它的作用类似于&lt;strong&gt;系统级的提示词 (System Prompt)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;可以告诉 AI 当前项目的&lt;strong&gt;具体是做什么的&lt;/strong&gt;、使用的&lt;strong&gt;技术框架&lt;/strong&gt;以及开发者的&lt;strong&gt;开发习惯&lt;/strong&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 AI &lt;strong&gt;更懂项目&lt;/strong&gt;，也&lt;strong&gt;更懂你&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:29-04:36) &lt;em&gt;&lt;strong&gt;4.2: 项目设定：AI你画我猜&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;本次演示项目&lt;/strong&gt;：使用 Trae 完成一个 &lt;strong&gt;“AI 你画我猜”&lt;/strong&gt; 的小游戏。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心特点&lt;/strong&gt;：使用 &lt;strong&gt;AI (OpenAI Vision API)&lt;/strong&gt; 而不是真人作为&lt;strong&gt;裁判&lt;/strong&gt;来猜测玩家画的内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;准备工作&lt;/strong&gt;：作者删除了之前测试用的 &lt;code&gt;colors.txt&lt;/code&gt; 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:36-04:55) &lt;em&gt;&lt;strong&gt;4.3: 配置项目规则&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作路径&lt;/strong&gt;：点击右上角用户头像 -&amp;gt; AI 功能管理 -&amp;gt; 规则。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;规则类型&lt;/strong&gt;：分为&lt;strong&gt;个人规则&lt;/strong&gt;（全局生效）和&lt;strong&gt;项目规则&lt;/strong&gt;（仅对当前项目生效）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：作者选择添加&lt;strong&gt;项目规则&lt;/strong&gt;，点击 “+ 创建 project_rules.md” 按钮。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：在项目根目录下创建了一个名为 &lt;code&gt;.trae/rules/project_rules.md&lt;/code&gt; 的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:44-04:55) &lt;em&gt;&lt;strong&gt;4.4: 编写项目规则内容&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;目的&lt;/strong&gt;：在 &lt;code&gt;project_rules.md&lt;/code&gt; 文件中定义项目的基本信息和技术选型，供 AI 参考。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：使用 &lt;strong&gt;Markdown&lt;/strong&gt; 格式编写规则内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;♏&lt;strong&gt;画面内容 (技术栈选型)&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;# AI 你画我猜网页游戏
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;## 项目概述
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt;创建一个在线你画我猜游戏，玩家可以在画布上作画，AI 系统负责猜测画的是什么内容。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;## 技术栈选型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; 脚手架：**Vite**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; 前端：**React + TypeScript**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; 画布：**HTML5 Canvas**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; 后端：**Node.js + Express**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; AI 集成：**OpenAI Vision API**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -《“你画我猜”的应用，可能只需要调用 Vision API 这一个功能，这个功能的作用就是 直接通过 HTTP 请求与 OpenAI API 交互》
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这些信息将帮助 AI 更好地理解项目需求并生成符合技术栈的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part5-使用规则拆解任务与ai执行-前端部分&#34;&gt;part5: 使用规则拆解任务与AI执行 (前端部分)
&lt;/h1&gt;&lt;p&gt;(04:55-05:10) &lt;em&gt;&lt;strong&gt;5.1: 指示AI根据规则拆解任务&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：利用配置好的&lt;strong&gt;项目规则 (Rule)&lt;/strong&gt;，让 AI 自动将项目需求拆解成可执行的任务清单。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;切换回 Trae 的聊天界面。&lt;/li&gt;
&lt;li&gt;调用 &lt;strong&gt;&lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体。&lt;/li&gt;
&lt;li&gt;♋&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;请根据 #rules 里面的项目介绍，拆解任务，任务可以跟踪状态，把所有任务写到 task.md 文件&lt;/code&gt;。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#rules&lt;/code&gt; 指的是引用刚才创建的 &lt;code&gt;project_rules.md&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#task.md&lt;/code&gt; 指的是让 AI 将拆解结果输出到 &lt;code&gt;task.md&lt;/code&gt; 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:08-05:10) &lt;em&gt;&lt;strong&gt;5.2: AI生成任务清单&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 根据 &lt;code&gt;project_rules.md&lt;/code&gt; 的内容，&lt;strong&gt;成功生成&lt;/strong&gt;了一个包含详细步骤和状态追踪标记的&lt;strong&gt;任务清单&lt;/strong&gt; (&lt;code&gt;task.md&lt;/code&gt; 文件)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:10-05:18) &lt;em&gt;&lt;strong&gt;5.3: 简化任务清单&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原因&lt;/strong&gt;：为了&lt;strong&gt;演示方便&lt;/strong&gt;，AI 生成的原始任务清单可能过于复杂。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：作者&lt;strong&gt;手动编辑&lt;/strong&gt; &lt;code&gt;task.md&lt;/code&gt; 文件，&lt;strong&gt;删掉了一些复杂的功能&lt;/strong&gt;，只保留了实现核心功能所需的基础任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:18-05:27) &lt;em&gt;&lt;strong&gt;5.4: 指示AI进行逐项开发&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 AI 根据简化后的任务清单，开始逐步执行开发任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;再次调用 &lt;strong&gt;&lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;根据 #task.md 进行逐项开发，并且标记状态&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 开始分析 &lt;code&gt;task.md&lt;/code&gt; 文件并准备执行第一个任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:27-05:43) &lt;em&gt;&lt;strong&gt;5.5: AI执行前端任务 (环境搭建与画布开发)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行过程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI 首先执行&lt;strong&gt;环境搭建&lt;/strong&gt;任务：调用系统命令执行 &lt;code&gt;npm create vite@latest . --template react-ts&lt;/code&gt; 来创建 &lt;strong&gt;React + TypeScript&lt;/strong&gt; 项目。&lt;/li&gt;
&lt;li&gt;接着执行 &lt;code&gt;npm install&lt;/code&gt; 安装依赖。&lt;/li&gt;
&lt;li&gt;然后开始执行&lt;strong&gt;画布功能开发&lt;/strong&gt;任务，创建和修改相关组件文件 (&lt;code&gt;DrawingCanvas.tsx&lt;/code&gt;, &lt;code&gt;DrawingCanvas.css&lt;/code&gt; 等)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户交互&lt;/strong&gt;：AI 每生成一段代码或执行一个命令，都会展示给用户，用户只需&lt;strong&gt;点击“接受”&lt;/strong&gt;（或“全部接受”）即可。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者评价&lt;/strong&gt;：因为有任务列表的存在，AI 干活&lt;strong&gt;非常的有条理&lt;/strong&gt;，用户操作&lt;strong&gt;非常简单&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:46-05:59) &lt;em&gt;&lt;strong&gt;5.6: AI执行前端任务 (用户界面开发与测试)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行过程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI 继续根据 &lt;code&gt;task.md&lt;/code&gt; 执行后续的前端任务，包括&lt;strong&gt;用户界面布局&lt;/strong&gt; (&lt;code&gt;App.tsx&lt;/code&gt;, &lt;code&gt;App.css&lt;/code&gt;)、&lt;strong&gt;结果显示区域&lt;/strong&gt; (&lt;code&gt;ResultDisplay.tsx&lt;/code&gt;)、&lt;strong&gt;单元测试&lt;/strong&gt;等。&lt;/li&gt;
&lt;li&gt;AI 逐步创建、修改代码，并更新 &lt;code&gt;task.md&lt;/code&gt; 中对应任务的状态为&lt;strong&gt;已完成&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：&lt;strong&gt;一次调用 &lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体，AI 就&lt;strong&gt;直接创建了 26 个文件&lt;/strong&gt;，&lt;strong&gt;前端相关的工作已经完全完成&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part6-ai执行后端任务&#34;&gt;part6: AI执行后端任务
&lt;/h1&gt;&lt;p&gt;(06:01-06:08) &lt;em&gt;&lt;strong&gt;6.1: 指示AI进行后端开发&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 AI 继续执行任务清单中剩余的后端开发任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;新建一个会话。&lt;/li&gt;
&lt;li&gt;调用 &lt;strong&gt;&lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;请根据 #task.md 这些未完成的任务，继续完成后端的开发&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:08-06:13) &lt;em&gt;&lt;strong&gt;6.2: AI执行后端任务 (环境搭建与API开发)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行过程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI 开始执行后端任务：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;环境搭建&lt;/strong&gt;：创建 &lt;code&gt;server&lt;/code&gt; 目录，生成 &lt;code&gt;package.json&lt;/code&gt;, &lt;code&gt;tsconfig.json&lt;/code&gt; 等配置文件，安装 &lt;strong&gt;Node.js&lt;/strong&gt; 和 &lt;strong&gt;Express&lt;/strong&gt; 相关依赖 (&lt;code&gt;npm install express cors dotenv @types/node @types/express @types/cors ts-node nodemon typescript&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API 开发&lt;/strong&gt;：创建 &lt;strong&gt;Express&lt;/strong&gt; 服务器入口文件 (&lt;code&gt;index.ts&lt;/code&gt;)，配置路由 (&lt;code&gt;routes/drawing.ts&lt;/code&gt;)，实现 &lt;code&gt;/api/drawing/recognize&lt;/code&gt; 接口用于接收图片数据并调用 &lt;strong&gt;OpenAI Vision API&lt;/strong&gt; 进行图像识别。&lt;/li&gt;
&lt;li&gt;创建 &lt;code&gt;.env&lt;/code&gt; 文件模板用于存放 &lt;strong&gt;OpenAI API Key&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:13-06:16) &lt;em&gt;&lt;strong&gt;6.3: AI完成所有任务&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 成功执行了所有后端开发任务，并将 &lt;code&gt;task.md&lt;/code&gt; 中所有任务的状态标记为&lt;strong&gt;已完成&lt;/strong&gt;（绿色对勾）。&lt;strong&gt;AI 的开发工作至此完成&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:16-06:27) &lt;em&gt;&lt;strong&gt;6.4: 修复后端代码小问题&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;问题&lt;/strong&gt;：在 &lt;code&gt;drawing.ts&lt;/code&gt; 文件中，AI 错误地导入了 &lt;code&gt;openai&lt;/code&gt; 的 &lt;strong&gt;npm 包&lt;/strong&gt;，但项目规则指定的是直接调用 &lt;strong&gt;OpenAI Vision API&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;作者发现了这个小错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;修改 drawing.ts 文件，优先使用 fetch 调用 openai，不要引入 openai 的包&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 理解指令，&lt;strong&gt;修改了 &lt;code&gt;drawing.ts&lt;/code&gt;&lt;/strong&gt; 中的代码，将原本导入 &lt;code&gt;openai&lt;/code&gt; 包的方式改为了使用 Node.js 内置的 &lt;strong&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/strong&gt; 直接调用 OpenAI Vision API 端点 (&lt;code&gt;https://api.openai.com/v1/chat/completions&lt;/code&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：代码被成功修正，消除了不必要的依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:25-06:27) &lt;em&gt;&lt;strong&gt;6.5: 配置环境变量&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：作者手动编辑 &lt;code&gt;.env&lt;/code&gt; 文件，填入自己的 &lt;strong&gt;OpenAI API Key&lt;/strong&gt;，并配置了 &lt;strong&gt;CORS&lt;/strong&gt; 允许的来源（前端地址 &lt;code&gt;http://localhost:5173&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:27-06:41) &lt;em&gt;&lt;strong&gt;6.6: 启动前后端服务&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：运行刚刚由 AI 开发完成的前后端代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;启动后端&lt;/strong&gt;：在 Trae 的终端中，&lt;code&gt;cd ./server&lt;/code&gt; 进入后端目录，然后执行 &lt;code&gt;npm run dev&lt;/code&gt; 启动 &lt;strong&gt;Node.js (Express)&lt;/strong&gt; 服务。后端运行在 &lt;strong&gt;&lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;启动前端&lt;/strong&gt;：新建一个终端，在项目根目录执行 &lt;code&gt;npm run dev&lt;/code&gt; 启动 &lt;strong&gt;Vite&lt;/strong&gt; 开发服务器。前端运行在 &lt;strong&gt;&lt;code&gt;http://localhost:5173&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part7-智能体-debug-前端ui问题&#34;&gt;part7: 智能体 Debug (前端UI问题)
&lt;/h1&gt;&lt;p&gt;(06:42-06:48) &lt;em&gt;&lt;strong&gt;7.1: 发现前端UI问题&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：在浏览器中打开前端页面 &lt;code&gt;http://localhost:5173&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;问题描述&lt;/strong&gt;：页面上成功显示了&lt;strong&gt;画板 (Canvas)&lt;/strong&gt;，可以作画，也有“清空画布”按钮，但是&lt;strong&gt;缺少了用于触发 AI 猜测的按钮&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:48-07:01) &lt;em&gt;&lt;strong&gt;7.2: 使用截图和多模态能力请求修复&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：利用 Trae 的&lt;strong&gt;多模态能力&lt;/strong&gt;和 &lt;strong&gt;Claude 3.5&lt;/strong&gt; 模型，通过截图让 AI 理解并修复 UI 问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;对当前缺少按钮的前端页面进行&lt;strong&gt;截图&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;回到 Trae 的聊天界面，将&lt;strong&gt;截图粘贴&lt;/strong&gt;进去。&lt;/li&gt;
&lt;li&gt;选择 &lt;strong&gt;Claude 3.5 Sonnet&lt;/strong&gt; 模型（因为它支持多模态）。&lt;/li&gt;
&lt;li&gt;调用 &lt;strong&gt;&lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体，并引用 &lt;strong&gt;&lt;code&gt;#Workspace&lt;/code&gt;&lt;/strong&gt; (整个项目代码)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;没有让 AI 猜测的按钮，帮我修复一下&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(07:00-07:12) &lt;em&gt;&lt;strong&gt;7.3: AI修复前端UI&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行过程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI (Claude 3.5) &lt;strong&gt;分析了截图&lt;/strong&gt;和&lt;strong&gt;代码&lt;/strong&gt; (&lt;code&gt;#Workspace&lt;/code&gt;)，理解了问题所在。&lt;/li&gt;
&lt;li&gt;AI 识别出需要在 &lt;code&gt;DrawingCanvas.tsx&lt;/code&gt; 组件中添加一个按钮，并为其绑定触发 AI 猜测的事件处理函数。&lt;/li&gt;
&lt;li&gt;AI &lt;strong&gt;生成了修改后的代码&lt;/strong&gt;，在画板下方添加了一个 “AI 猜测” 按钮。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户交互&lt;/strong&gt;：用户检查 AI 生成的代码修改，确认无误后点击&lt;strong&gt;接受&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：前端页面刷新后，&lt;strong&gt;“AI 猜测”按钮成功出现&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part8-智能体-debug-后端api与浏览器工具&#34;&gt;part8: 智能体 Debug (后端API与浏览器工具)
&lt;/h1&gt;&lt;p&gt;(07:02-07:09) &lt;em&gt;&lt;strong&gt;8.1: 发现后端API调用错误&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：在添加了按钮的前端页面上，画一个图形（例如字母 A），然后点击 “AI 猜测” 按钮。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;问题描述&lt;/strong&gt;：点击按钮后，页面提示 &lt;strong&gt;“抱歉，AI 猜测失败，请重试”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♋&lt;strong&gt;Debug 操作&lt;/strong&gt;：打开浏览器的&lt;strong&gt;开发者工具&lt;/strong&gt; (F12)，切换到&lt;strong&gt;控制台 (Console)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误信息&lt;/strong&gt;：控制台显示了两个关键错误：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;POST http://localhost:5174/api/guess 404 (Not Found)&lt;/code&gt;：表明前端尝试请求的 API 地址错误（端口号 5174 不对，且路径 &lt;code&gt;/api/guess&lt;/code&gt; 可能与后端不符）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AI猜测出错: Error: AI猜测请求失败&lt;/code&gt;：这是前端代码中捕获到的网络请求错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(07:07-07:16) &lt;em&gt;&lt;strong&gt;8.2: 手动Debug的局限性&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;传统方式&lt;/strong&gt;：需要&lt;strong&gt;手动复制&lt;/strong&gt;控制台的错误信息，然后&lt;strong&gt;粘贴&lt;/strong&gt;到 Trae 中，让 AI 分析并修复。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Trae 的优势&lt;/strong&gt;：通过 &lt;strong&gt;MCP (Model Context Protocol)&lt;/strong&gt; 功能，提供了&lt;strong&gt;更进阶、更自动化&lt;/strong&gt;的 Debug 方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(07:16-08:13) &lt;em&gt;&lt;strong&gt;8.3: ♏配置Browser Tools MCP Server&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：设置一个 MCP Server，让 Trae 能够&lt;strong&gt;直接读取浏览器&lt;/strong&gt;的控制台信息、网络请求等状态，实现更智能的 Debug。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键步骤&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安装浏览器插件&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在 Trae 的 &lt;strong&gt;MCP 市场&lt;/strong&gt;中搜索 &lt;code&gt;browser&lt;/code&gt;，找到 &lt;strong&gt;Browser Tools&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;点击其介绍页面中的链接，下载 &lt;strong&gt;Chrome 扩展&lt;/strong&gt; (&lt;code&gt;BrowserToolsMCP Chrome Extension&lt;/code&gt;) 的压缩包。&lt;/li&gt;
&lt;li&gt;解压压缩包。&lt;/li&gt;
&lt;li&gt;♏打开浏览器的&lt;strong&gt;扩展管理页面&lt;/strong&gt; (&lt;code&gt;edge://extensions/&lt;/code&gt; 或 &lt;code&gt;chrome://extensions/&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;启用&lt;strong&gt;开发者模式&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;将解压后的插件文件夹&lt;strong&gt;拖拽&lt;/strong&gt;到扩展管理页面进行安装。安装成功后会显示 &lt;strong&gt;BrowserTools MCP&lt;/strong&gt; 插件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置 Trae 中的 MCP Server&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在 Trae 的 MCP 市场中&lt;strong&gt;添加 Browser Tools&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;参考其介绍页面，复制 &lt;strong&gt;npx&lt;/strong&gt; 启动命令的配置 &lt;strong&gt;JSON&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修改 JSON&lt;/strong&gt;：将示例的 &lt;code&gt;example-server&lt;/code&gt; 名称改为 &lt;code&gt;browser-tools&lt;/code&gt;，将 &lt;code&gt;mcp-server-example&lt;/code&gt; 参数改为 &lt;code&gt;@agentdeskai/browser-tools-mcp@latest&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;点击&lt;strong&gt;确认&lt;/strong&gt;保存配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;启动 MCP Server 进程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;打开一个&lt;strong&gt;新的命令行窗口&lt;/strong&gt;（不是 Trae 内置终端）。&lt;/li&gt;
&lt;li&gt;运行 Browser Tools 介绍页面提供的第三步命令：&lt;code&gt;npx @agentdeskai/browser-tools-server@latest&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保持此命令行窗口运行&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：成功配置并启动了 Browser Tools MCP Server，打通了 Trae 与浏览器之间的通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:13-08:19) &lt;em&gt;&lt;strong&gt;8.4: 创建浏览器专家智能体&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：创建一个专门利用 Browser Tools MCP 进行 Debug 的智能体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;点击“智能体” -&amp;gt; “+ 创建智能体”。&lt;/li&gt;
&lt;li&gt;命名为 &lt;strong&gt;“浏览器专家”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在“工具 - MCP”中&lt;strong&gt;只勾选 &lt;code&gt;browser-tools&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;点击“创建”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:19-08:42) &lt;em&gt;&lt;strong&gt;8.5: 使用浏览器专家Debug&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;准备工作&lt;/strong&gt;：&lt;strong&gt;重新打开&lt;/strong&gt;要 Debug 的浏览器页面 (&lt;code&gt;localhost:5174&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接确认&lt;/strong&gt;：打开开发者工具 (F12)，页面顶部会出现提示条：&lt;strong&gt;&amp;ldquo;BrowserTools MCP&amp;rdquo; 已开始调试此浏览器&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;触发错误&lt;/strong&gt;：在页面上画图并点击 “AI 猜测” 按钮，再次触发之前的 404 错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;回到 Trae。&lt;/li&gt;
&lt;li&gt;调用新创建的 &lt;strong&gt;&lt;code&gt;@浏览器专家&lt;/code&gt;&lt;/strong&gt; 智能体。&lt;/li&gt;
&lt;li&gt;♏&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;浏览器控制台有哪些报错&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:35-08:42) &lt;em&gt;&lt;strong&gt;8.6: AI分析错误并定位问题&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行过程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;“浏览器专家”&lt;/strong&gt; 智能体调用了其绑定的 &lt;code&gt;browser-tools&lt;/code&gt; MCP 工具中的 &lt;code&gt;getConsoleErrors&lt;/code&gt; 函数。&lt;/li&gt;
&lt;li&gt;MCP Server 从浏览器&lt;strong&gt;获取了控制台的错误日志&lt;/strong&gt;，并返回给 Trae 中的 AI。&lt;/li&gt;
&lt;li&gt;AI &lt;strong&gt;分析了返回的错误信息&lt;/strong&gt;（包含详细的错误类型、消息、堆栈等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 成功&lt;strong&gt;获取并理解了&lt;/strong&gt;浏览器端的报错信息，准备进行下一步分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:41-08:55) &lt;em&gt;&lt;strong&gt;8.7: 指示AI修复API路径问题&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 AI 结合浏览器报错信息和项目代码，定位并修复 API 路径不匹配的问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI 分析&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI 检查了浏览器报错信息，确认是 &lt;code&gt;/api/guess&lt;/code&gt; 接口返回 404。&lt;/li&gt;
&lt;li&gt;♏AI 检查了后端代码 (&lt;code&gt;server/src/routes/drawing.ts&lt;/code&gt; 和 &lt;code&gt;server/src/index.ts&lt;/code&gt;)，发现后端实际提供的接口路径是 &lt;code&gt;/api/drawing/recognize&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 检查了前端代码 (&lt;code&gt;src/App.tsx&lt;/code&gt; 和 &lt;code&gt;src/components/Canvas/index.tsx&lt;/code&gt;)，确认前端调用的是 &lt;code&gt;/api/guess&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结论&lt;/strong&gt;：AI 准确地指出了&lt;strong&gt;前后端 API 调用的路径不匹配&lt;/strong&gt;是导致 404 错误的原因。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;调用 &lt;strong&gt;&lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体（需要它来修改代码）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;（结合浏览器专家的分析结果）：&lt;code&gt;因为前端API调用的是 /api/guess，但服务器配置的路由是 /api/drawing/recognize。帮我修复问题&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI 修复&lt;/strong&gt;：AI 修改了前端代码 (&lt;code&gt;src/App.tsx&lt;/code&gt; 或相关调用处)，将 API 请求路径从 &lt;code&gt;/api/guess&lt;/code&gt; &lt;strong&gt;更正为 &lt;code&gt;/api/drawing/recognize&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part9-最终测试与效果展示&#34;&gt;part9: 最终测试与效果展示
&lt;/h1&gt;&lt;p&gt;(09:08-09:10) &lt;em&gt;&lt;strong&gt;9.1: 再次测试 - 依然报错&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：修复 API 路径后，再次在前端页面画图并点击 “AI 猜测”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：&lt;strong&gt;仍然报错&lt;/strong&gt;，控制台可能显示新的错误（视频中未明确显示具体新错误，但暗示问题未完全解决）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:10-09:13) &lt;em&gt;&lt;strong&gt;9.2: 结合控制台报错再次请求修复&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 AI 结合最新的控制台错误信息，进行进一步的 Debug 和修复。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;调用 &lt;strong&gt;&lt;code&gt;@浏览器专家&lt;/code&gt;&lt;/strong&gt; 智能体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;结合控制台报错修复问题&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI 分析&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;浏览器专家再次通过 &lt;code&gt;browser-tools&lt;/code&gt; 获取控制台错误。&lt;/li&gt;
&lt;li&gt;AI 分析后发现，这次的问题是前端在调用 &lt;code&gt;fetch&lt;/code&gt; 时，&lt;strong&gt;没有指定后端的端口号&lt;/strong&gt;，导致请求仍然发向了前端的 5173 端口，而非后端的 3000 端口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:13-09:16) &lt;em&gt;&lt;strong&gt;9.3: AI最终修复&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI 识别到需要修改前端发送请求时的 URL。&lt;/li&gt;
&lt;li&gt;♏AI 修改了 &lt;code&gt;src/components/Canvas/guessDrawing.tsx&lt;/code&gt; (或其他实际发送请求的文件) 中的 &lt;code&gt;fetch&lt;/code&gt; 调用，将 URL 明确指定为后端的地址和端口：&lt;code&gt;http://localhost:3000/api/drawing/recognize&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户交互&lt;/strong&gt;：用户接受 AI 的代码修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:16-09:20) &lt;em&gt;&lt;strong&gt;9.4: 成功测试 - 画A&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：进行最终测试，在画板上画一个字母 &lt;strong&gt;&amp;ldquo;A&amp;rdquo;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：点击 “AI 猜测” 后，&lt;strong&gt;请求成功&lt;/strong&gt;，AI 返回结果：“&lt;strong&gt;这张图片是一个手绘的字母 &amp;lsquo;A&amp;rsquo;，也就是英文字母表中的第一个字母。&lt;/strong&gt;”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:20-09:25) &lt;em&gt;&lt;strong&gt;9.5: 成功测试 - 画蜜蜂 (AI误认)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：画一个&lt;strong&gt;蝴蝶&lt;/strong&gt;的简笔画。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 返回结果：“&lt;strong&gt;这是一张手绘的蜜蜂简笔画。你可以看到它有四只翅膀、分节的身体，还有两根触角。&lt;/strong&gt;”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者评论&lt;/strong&gt;：AI 把蝴蝶认成了&lt;strong&gt;蜜蜂&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:25-09:31) &lt;em&gt;&lt;strong&gt;9.6: 成功测试 - 画房子&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：画一个带烟囱的&lt;strong&gt;房子&lt;/strong&gt;的简笔画。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 返回结果：“&lt;strong&gt;这是一幅简笔画，画的是一间房子。可以看到有屋顶、门和窗户，还有一个像是烟囱的结构。整体是一个简单的立体房屋造型。&lt;/strong&gt;”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:31-09:38) &lt;em&gt;&lt;strong&gt;9.7: 成功测试 - 画大象&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：画一个&lt;strong&gt;大象&lt;/strong&gt;的简笔画。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 返回结果：“&lt;strong&gt;这是一幅简笔画，看起来像是一只大象。可以看到大象的长鼻子、耳朵、四条腿和尾巴。画面风格简洁，但特征比较明显。&lt;/strong&gt;”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者总结&lt;/strong&gt;：整个过程&lt;strong&gt;还是挺有意思的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>全流程项目构建到部署_穷鬼套餐版</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E5%85%A8%E6%B5%81%E7%A8%8B%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%88%B0%E9%83%A8%E7%BD%B2_%E7%A9%B7%E9%AC%BC%E5%A5%97%E9%A4%90%E7%89%88/</link>
        <pubDate>Tue, 11 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E5%85%A8%E6%B5%81%E7%A8%8B%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%88%B0%E9%83%A8%E7%BD%B2_%E7%A9%B7%E9%AC%BC%E5%A5%97%E9%A4%90%E7%89%88/</guid>
        <description>&lt;p&gt;༼全流程项目构建到部署_穷鬼套餐版 ༽
༺https://aistudio.google.com/prompts/111ysUKgf9_PR3y4WpkPTJiuEsCHn5DcG ༻&lt;/p&gt;
&lt;h1 id=&#34;part1-独立开发者穷鬼套餐介绍&#34;&gt;part1: 独立开发者穷鬼套餐介绍
&lt;/h1&gt;&lt;p&gt;(0:00-0:06) &lt;em&gt;&lt;strong&gt;1.1: 论坛热门话题：独立开发者穷鬼套餐&lt;/strong&gt;&lt;/em&gt;
视频开头提到，在&lt;strong&gt;技术论坛&lt;/strong&gt;中经常看到一个有趣的话题，即**&amp;ldquo;独立开发者省钱之穷鬼套餐&amp;rdquo;**。&lt;/p&gt;
&lt;p&gt;(0:06-0:13) &lt;em&gt;&lt;strong&gt;1.2: 穷鬼套餐覆盖范围&lt;/strong&gt;&lt;/em&gt;
这些&lt;strong&gt;免费工具&lt;/strong&gt;涵盖了&lt;strong&gt;开发&lt;/strong&gt;、&lt;strong&gt;代码托管&lt;/strong&gt;、&lt;strong&gt;前后端部署&lt;/strong&gt;、&lt;strong&gt;数据库&lt;/strong&gt;以及&lt;strong&gt;用户行为分析&lt;/strong&gt;等一系列功能。&lt;/p&gt;
&lt;p&gt;(0:13-0:17) &lt;em&gt;&lt;strong&gt;1.3: 适用人群&lt;/strong&gt;&lt;/em&gt;
这种套餐&lt;strong&gt;尤其适合学生党&lt;/strong&gt;、&lt;strong&gt;独立开发者&lt;/strong&gt;以及&lt;strong&gt;初创公司&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(0:17-0:24) &lt;em&gt;&lt;strong&gt;1.4: 零成本启动与迭代&lt;/strong&gt;&lt;/em&gt;
开发者可以利用这些&lt;strong&gt;免费工具&lt;/strong&gt;，&lt;strong&gt;零成本&lt;/strong&gt;做出&lt;strong&gt;产品&lt;/strong&gt;并&lt;strong&gt;发布上线&lt;/strong&gt;，等到开始&lt;strong&gt;盈利&lt;/strong&gt;以后再&lt;strong&gt;慢慢迭代扩容&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(0:24-0:34) &lt;em&gt;&lt;strong&gt;1.5: 本期视频目标&lt;/strong&gt;&lt;/em&gt;
本期视频准备用一个&lt;strong&gt;小项目&lt;/strong&gt;（贪吃蛇游戏）把这些&lt;strong&gt;免费的工具&lt;/strong&gt;全部&lt;strong&gt;串联起来&lt;/strong&gt;，展示如何&lt;strong&gt;不花一分钱&lt;/strong&gt;就能&lt;strong&gt;上线一个可以赚钱的业务应用&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part2-技术选型&#34;&gt;part2: 技术选型
&lt;/h1&gt;&lt;p&gt;(0:34-0:40) &lt;em&gt;&lt;strong&gt;2.1: 后端部署成本最低方案：Node.js&lt;/strong&gt;&lt;/em&gt;
作者认为，对于&lt;strong&gt;后端&lt;/strong&gt;，&lt;strong&gt;部署成本最低&lt;/strong&gt;的方案是 &lt;strong&gt;Node.js&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(0:40-0:51) &lt;em&gt;&lt;strong&gt;2.2: Node.js 优势：Serverless Function&lt;/strong&gt;&lt;/em&gt;
原因是 ♋&lt;strong&gt;Node.js&lt;/strong&gt; 可以很轻松地改造成 &lt;strong&gt;Serverless Function&lt;/strong&gt;（&lt;strong&gt;无服务器函数&lt;/strong&gt;）。现在很多平台提供&lt;strong&gt;免费的云函数部署服务&lt;/strong&gt;，♐例如 &lt;strong&gt;Cloudflare Worker&lt;/strong&gt;、&lt;strong&gt;Vercel&lt;/strong&gt; 和 &lt;strong&gt;Netlify&lt;/strong&gt; 等。&lt;/p&gt;
&lt;p&gt;(0:51-0:56) &lt;em&gt;&lt;strong&gt;2.3: 前端选型：影响不大&lt;/strong&gt;&lt;/em&gt;
对于&lt;strong&gt;前端&lt;/strong&gt;选型，作者认为其对于&lt;strong&gt;部署成本几乎没有影响&lt;/strong&gt;，选择自己喜欢的就好。&lt;/p&gt;
&lt;p&gt;(0:56-1:04) &lt;em&gt;&lt;strong&gt;2.4: 前端推荐：React 与 React Native&lt;/strong&gt;&lt;/em&gt;
推荐使用 &lt;strong&gt;React&lt;/strong&gt;，因为&lt;strong&gt;后续&lt;/strong&gt;还可以使用 &lt;strong&gt;React Native&lt;/strong&gt; 改造成&lt;strong&gt;跨端的手机应用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(1:04-1:10) &lt;em&gt;&lt;strong&gt;2.5: ♈框架选择：Next.js&lt;/strong&gt;&lt;/em&gt;
♋结合&lt;strong&gt;后端 Node.js&lt;/strong&gt; 和&lt;strong&gt;前端 React&lt;/strong&gt;，很自然会想到 &lt;strong&gt;Next.js&lt;/strong&gt;，这是一个在&lt;strong&gt;海外十分流行&lt;/strong&gt;的&lt;strong&gt;开发框架&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(1:10-1:18) &lt;em&gt;&lt;strong&gt;2.6: Next.js 优势：SEO 友好&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;Next.js&lt;/strong&gt; 具有 &lt;strong&gt;SEO 友好&lt;/strong&gt;的特点，使得网站更容易被&lt;strong&gt;搜索引擎收录&lt;/strong&gt;。它结合了&lt;strong&gt;客户端（Client）渲染&lt;/strong&gt;和&lt;strong&gt;服务器端（Server）渲染&lt;/strong&gt;（&lt;strong&gt;SSR/Static HTML&lt;/strong&gt;）的能力。&lt;/p&gt;
&lt;p&gt;(1:18-1:24) &lt;em&gt;&lt;strong&gt;2.7: 本期项目选择与 AI 辅助&lt;/strong&gt;&lt;/em&gt;
本期视频决定使用 &lt;strong&gt;Next.js&lt;/strong&gt; 来&lt;strong&gt;搭建工程&lt;/strong&gt;。由于作者对 &lt;strong&gt;Next.js&lt;/strong&gt; 不太熟悉，计划将&lt;strong&gt;主要的开发任务交给 AI&lt;/strong&gt; 来完成。&lt;/p&gt;
&lt;h1 id=&#34;part3-ai开发工具与项目初始化&#34;&gt;part3: AI开发工具与项目初始化
&lt;/h1&gt;&lt;p&gt;(1:24-1:35) &lt;em&gt;&lt;strong&gt;3.1: 推荐免费AI编程方案 (VSCode + Cline + OpenRouter)&lt;/strong&gt;&lt;/em&gt;
推荐一个&lt;strong&gt;完全免费&lt;/strong&gt;的 &lt;strong&gt;AI 编程方案&lt;/strong&gt;：在 &lt;strong&gt;VS Code&lt;/strong&gt; 上使用 &lt;strong&gt;Cline&lt;/strong&gt; 插件，并接入 &lt;strong&gt;OpenRouter&lt;/strong&gt; 的&lt;strong&gt;免费 API&lt;/strong&gt;，以达到&lt;strong&gt;非常好的 AI 编程效果&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(1:35-1:44) &lt;em&gt;&lt;strong&gt;3.2: 安装VSCode&lt;/strong&gt;&lt;/em&gt;
首先访问 &lt;code&gt;code.visualstudio.com&lt;/code&gt;，&lt;strong&gt;下载&lt;/strong&gt;并&lt;strong&gt;安装 VS Code&lt;/strong&gt;。安装过程十分简单，&lt;strong&gt;一路点击下一步&lt;/strong&gt;即可。&lt;/p&gt;
&lt;p&gt;(1:44-1:47) &lt;em&gt;&lt;strong&gt;3.3: VSCode 基础使用参考&lt;/strong&gt;&lt;/em&gt;
作者提到之前有一个&lt;strong&gt;完整视频&lt;/strong&gt;介绍 &lt;strong&gt;VS Code&lt;/strong&gt; 的&lt;strong&gt;使用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(1:47-1:56) &lt;em&gt;&lt;strong&gt;3.4: 安装与配置Cline插件&lt;/strong&gt;&lt;/em&gt;
进入 &lt;strong&gt;VS Code&lt;/strong&gt; 后，在&lt;strong&gt;扩展市场&lt;/strong&gt;搜索 &lt;strong&gt;Cline&lt;/strong&gt; 插件，点击 &lt;strong&gt;Install&lt;/strong&gt; 进行安装。&lt;/p&gt;
&lt;p&gt;(1:56-2:05) &lt;em&gt;&lt;strong&gt;3.5: 获取 OpenRouter API Key&lt;/strong&gt;&lt;/em&gt;
打开 &lt;strong&gt;Cline&lt;/strong&gt; 插件界面，选择 &lt;strong&gt;&amp;ldquo;Use your own API key&amp;rdquo;&lt;/strong&gt;，API Provider 选择 &lt;strong&gt;OpenRouter&lt;/strong&gt;，然后点击 &lt;strong&gt;&amp;ldquo;Get OpenRouter API Key&amp;rdquo;&lt;/strong&gt; 按钮。&lt;/p&gt;
&lt;p&gt;(2:05-2:10) &lt;em&gt;&lt;strong&gt;3.6: OpenRouter授权&lt;/strong&gt;&lt;/em&gt;
跳转到 &lt;strong&gt;OpenRouter&lt;/strong&gt; 网站进行&lt;strong&gt;授权&lt;/strong&gt;（该网站在&lt;strong&gt;国内可以直连&lt;/strong&gt;），如果没有账号需要先&lt;strong&gt;注册&lt;/strong&gt;。点击 &lt;strong&gt;Authorize&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(2:10-2:23) &lt;em&gt;&lt;strong&gt;3.7: 完成Cline模型选择 (DeepSeek)&lt;/strong&gt;&lt;/em&gt;
回到 &lt;strong&gt;VS Code&lt;/strong&gt;，点击 &lt;strong&gt;Open&lt;/strong&gt; 允许插件打开 URI。这样 &lt;strong&gt;OpenRouter API key&lt;/strong&gt; 就配置好了。在 &lt;strong&gt;Model&lt;/strong&gt; 选择处，搜索并选择&lt;strong&gt;免费&lt;/strong&gt;的 &lt;strong&gt;DeepSeek free&lt;/strong&gt; 模型（&lt;code&gt;deepseek/deepseek-chat-v3-0324-free&lt;/code&gt;）。&lt;strong&gt;AI 编程软件&lt;/strong&gt;配置完成。&lt;/p&gt;
&lt;p&gt;(2:23-2:30) &lt;em&gt;&lt;strong&gt;3.8: 安装Node.js&lt;/strong&gt;&lt;/em&gt;
♈访问 &lt;strong&gt;Node.js&lt;/strong&gt; 官网 (&lt;code&gt;nodejs.org&lt;/code&gt;)，&lt;strong&gt;下载&lt;/strong&gt;并&lt;strong&gt;安装 Node.js&lt;/strong&gt;（LTS 版本）。安装过程同样是&lt;strong&gt;一路点击下一步&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(2:30-2:54) &lt;em&gt;&lt;strong&gt;3.9: ♈ 创建Next.js项目 (Snake)&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;♓安装完 Node.js 后&lt;/strong&gt;，&lt;strong&gt;♓重启 VS Code&lt;/strong&gt;。打开一个新的&lt;strong&gt;终端（Terminal）&lt;/strong&gt;，&lt;strong&gt;切换&lt;/strong&gt;到&lt;strong&gt;目标项目文件夹&lt;/strong&gt;（例如 &lt;code&gt;D:\Project2025&lt;/code&gt;）。♋输入命令 &lt;code&gt;npx create-next-app&lt;/code&gt; 并按回车。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;项目命名：&lt;/strong&gt; 输入 &lt;code&gt;snake&lt;/code&gt;（贪吃蛇）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置选项：&lt;/strong&gt; 对于 &lt;strong&gt;TypeScript&lt;/strong&gt;, &lt;strong&gt;ESLint&lt;/strong&gt;, &lt;strong&gt;Tailwind CSS&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;src/&lt;/code&gt; directory&lt;/strong&gt;, &lt;strong&gt;App Router&lt;/strong&gt;, &lt;strong&gt;import alias&lt;/strong&gt; 等选项，♋全部&lt;strong&gt;一路回车&lt;/strong&gt;使用&lt;strong&gt;默认配置&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(2:54-3:06) &lt;em&gt;&lt;strong&gt;3.10: 启动初始Next.js项目&lt;/strong&gt;&lt;/em&gt;
项目创建成功后，使用 &lt;strong&gt;VS Code&lt;/strong&gt; 打开&lt;strong&gt;新创建&lt;/strong&gt;的 &lt;code&gt;snake&lt;/code&gt; &lt;strong&gt;目录&lt;/strong&gt;，点击&lt;strong&gt;信任&lt;/strong&gt;。♋在&lt;strong&gt;终端&lt;/strong&gt;中输入 &lt;code&gt;npm run dev&lt;/code&gt; &lt;strong&gt;启动项目&lt;/strong&gt;。♋浏览器访问 &lt;code&gt;http://localhost:3000&lt;/code&gt;，可以看到一个&lt;strong&gt;空白的 Next.js 工程&lt;/strong&gt;已成功运行。&lt;/p&gt;
&lt;p&gt;(3:07-3:18) &lt;em&gt;&lt;strong&gt;3.11: 使用Cline生成贪吃蛇游戏页面&lt;/strong&gt;&lt;/em&gt;
接下来，准备使用&lt;strong&gt;AI工具（Cline）&lt;strong&gt;将&lt;/strong&gt;Next.js&lt;/strong&gt;的&lt;strong&gt;初始页面&lt;/strong&gt;改造。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目标：&lt;/strong&gt; 将&lt;strong&gt;页面&lt;/strong&gt;改造成一个&lt;strong&gt;贪吃蛇的网页小游戏&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作：&lt;/strong&gt; 在&lt;strong&gt;Cline&lt;/strong&gt;中输入&lt;strong&gt;改造需求&lt;/strong&gt;的&lt;strong&gt;prompt&lt;/strong&gt;。（♋⌊把这个项目⌋改造成一个含吃蛇的网页版小游戏。）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果：&lt;/strong&gt; &lt;strong&gt;AI（Cline）&lt;strong&gt;成功&lt;/strong&gt;生成&lt;/strong&gt;了&lt;strong&gt;贪吃蛇游戏&lt;/strong&gt;的&lt;strong&gt;代码&lt;/strong&gt;，并在浏览器中&lt;strong&gt;演示&lt;/strong&gt;了&lt;strong&gt;基本的游戏界面&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part4-代码管理&#34;&gt;part4: 代码管理
&lt;/h1&gt;&lt;p&gt;(3:18-3:24) &lt;em&gt;&lt;strong&gt;4.1: 个人开发者代码管理最佳选择：GitHub&lt;/strong&gt;&lt;/em&gt;
对于&lt;strong&gt;个人开发者&lt;/strong&gt;来说，&lt;strong&gt;代码管理&lt;/strong&gt;的&lt;strong&gt;最佳选择&lt;/strong&gt;是 &lt;strong&gt;GitHub&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(3:24-3:38) &lt;em&gt;&lt;strong&gt;4.2: GitHub 功能与优势&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;GitHub&lt;/strong&gt; 是&lt;strong&gt;全球最大&lt;/strong&gt;的&lt;strong&gt;代码仓库托管与协作平台&lt;/strong&gt;，可以在其中&lt;strong&gt;存储&lt;/strong&gt;、&lt;strong&gt;分享&lt;/strong&gt;并与他人一起&lt;strong&gt;编写代码&lt;/strong&gt;。它支持创建&lt;strong&gt;私有（private）仓库&lt;/strong&gt;，只有&lt;strong&gt;自己&lt;/strong&gt;和&lt;strong&gt;被授权的协作者&lt;/strong&gt;可以访问，&lt;strong&gt;不用担心&lt;/strong&gt;源代码泄露。&lt;/p&gt;
&lt;p&gt;(3:38-3:50) &lt;em&gt;&lt;strong&gt;4.3: 解决GitHub访问慢的问题&lt;/strong&gt;&lt;/em&gt;
如果&lt;strong&gt;访问 GitHub 速度很慢&lt;/strong&gt;，可以在&lt;strong&gt;搜索栏&lt;/strong&gt;搜索&amp;quot;&lt;strong&gt;商店&lt;/strong&gt;&amp;quot;，来到&lt;strong&gt;微软的应用商店（Microsoft Store）&lt;/strong&gt;，下载 &lt;strong&gt;Watt Toolkit&lt;/strong&gt; 这个工具。&lt;/p&gt;
&lt;p&gt;(3:50-3:53) &lt;em&gt;&lt;strong&gt;4.4: GitHub 账号注册&lt;/strong&gt;&lt;/em&gt;
如果没有 &lt;strong&gt;GitHub 账号&lt;/strong&gt;，需要先&lt;strong&gt;注册&lt;/strong&gt;一个。&lt;/p&gt;
&lt;p&gt;(3:53-4:07) &lt;em&gt;&lt;strong&gt;4.5: 安装 Git&lt;/strong&gt;&lt;/em&gt;
为了将 &lt;strong&gt;Next.js 工程&lt;/strong&gt;上传到 &lt;strong&gt;GitHub&lt;/strong&gt;，需要先安装 &lt;strong&gt;Git&lt;/strong&gt;。在 &lt;strong&gt;VS Code&lt;/strong&gt; 的&lt;strong&gt;源代码管理（Source Control）&lt;strong&gt;面板，点击 &lt;strong&gt;&amp;ldquo;Download Git for Windows&amp;rdquo;&lt;/strong&gt; 按钮，跳转到下载页面。&lt;strong&gt;下载 64 位的安装包&lt;/strong&gt;并&lt;/strong&gt;安装&lt;/strong&gt;，安装过程同样是&lt;strong&gt;一路点击下一步&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(4:07-4:18) &lt;em&gt;&lt;strong&gt;4.6: 配置 Git 并发布到 GitHub&lt;/strong&gt;&lt;/em&gt;
安装完 &lt;strong&gt;Git&lt;/strong&gt; 后，在 &lt;strong&gt;VS Code 终端&lt;/strong&gt;中配置 &lt;strong&gt;Git 用户名和邮箱&lt;/strong&gt;：
&lt;code&gt;git config --global user.name &amp;quot;your_username&amp;quot;&lt;/code&gt;
&lt;code&gt;git config --global user.email &amp;quot;your_email@example.com&amp;quot;&lt;/code&gt;
然后，在 &lt;strong&gt;VS Code&lt;/strong&gt; 的&lt;strong&gt;源代码管理&lt;/strong&gt;面板♋点击 &lt;strong&gt;&amp;ldquo;Publish Branch&amp;rdquo;&lt;/strong&gt; 按钮。选择 &lt;strong&gt;&amp;ldquo;Publish to GitHub private repository&amp;rdquo;&lt;/strong&gt;♋⌊将代码发⌋ 布为&lt;strong&gt;私有仓库&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(4:18-4:23) &lt;em&gt;&lt;strong&gt;4.7: 确认代码备份&lt;/strong&gt;&lt;/em&gt;
现在，项目代码已经&lt;strong&gt;提交备份&lt;/strong&gt;到 &lt;strong&gt;GitHub&lt;/strong&gt; 上面了，拥有了一个&lt;strong&gt;远程的 Git 仓库&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part5-数据库&#34;&gt;part5: 数据库
&lt;/h1&gt;&lt;p&gt;(4:23-4:33) &lt;em&gt;&lt;strong&gt;5.1: 免费数据库服务推荐：Neon 与 Supabase&lt;/strong&gt;&lt;/em&gt;
对于&lt;strong&gt;免费的数据库服务&lt;/strong&gt;，这里推荐两个：&lt;strong&gt;Neon&lt;/strong&gt; 和 &lt;strong&gt;Supabase&lt;/strong&gt;。它们都提供 &lt;strong&gt;500 MB&lt;/strong&gt; 的&lt;strong&gt;免费存储空间&lt;/strong&gt;。本视频选择使用 &lt;strong&gt;Neon&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(4:33-4:46) &lt;em&gt;&lt;strong&gt;5.2: 创建 Neon 数据库&lt;/strong&gt;&lt;/em&gt;
来到 &lt;strong&gt;Neon&lt;/strong&gt; 的官网 (&lt;code&gt;neon.tech&lt;/code&gt;)，♋点击 &lt;strong&gt;&amp;ldquo;Start for free&amp;rdquo;&lt;/strong&gt;。选择使用 &lt;strong&gt;GitHub 登录&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据库配置：&lt;/strong&gt; &lt;strong&gt;Neon&lt;/strong&gt; 是基于 &lt;strong&gt;PostgreSQL&lt;/strong&gt; 的免费数据库。进入后，选择 &lt;strong&gt;PostgreSQL 版本&lt;/strong&gt;（如 17），给 &lt;strong&gt;Project name&lt;/strong&gt; 起个名字（如 &lt;code&gt;tech-shrimp-db&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果：&lt;/strong&gt; 瞬间就拥有了&lt;strong&gt;自己的免费数据库&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(4:46-4:50) &lt;em&gt;&lt;strong&gt;5.3: 查看数据库连接信息&lt;/strong&gt;&lt;/em&gt;
在 &lt;strong&gt;Neon&lt;/strong&gt; 的 ♈&lt;strong&gt;Project Dashboard&lt;/strong&gt;，♋点击右上角的 &lt;strong&gt;Connect&lt;/strong&gt; 按钮，可以查看&lt;strong&gt;数据库连接&lt;/strong&gt;的相关信息（如连接字符串、用户名、密码、主机地址、数据库名）。&lt;/p&gt;
&lt;h1 id=&#34;part6-数据库工具与集成&#34;&gt;part6: 数据库工具与集成
&lt;/h1&gt;&lt;p&gt;(4:50-4:57) &lt;em&gt;&lt;strong&gt;6.1: 数据库管理工具推荐：DBeaver&lt;/strong&gt;&lt;/em&gt;
推荐使用&lt;strong&gt;开源免费&lt;/strong&gt;的&lt;strong&gt;数据库管理工具&lt;/strong&gt; &lt;strong&gt;DBeaver&lt;/strong&gt;。先来到其官网 (&lt;code&gt;dbeaver.io&lt;/code&gt;)，&lt;strong&gt;下载&lt;/strong&gt; &lt;strong&gt;DBeaver Community&lt;/strong&gt; 版本。&lt;/p&gt;
&lt;p&gt;(4:57-5:20) &lt;em&gt;&lt;strong&gt;6.2: ♈连接 DBeaver 到 Neon 数据库&lt;/strong&gt;&lt;/em&gt;
打开 &lt;strong&gt;DBeaver&lt;/strong&gt; 软件，&lt;strong&gt;新建数据库连接&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;选择数据库类型：&lt;/strong&gt; 选择 &lt;strong&gt;PostgreSQL&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;填写连接信息：&lt;/strong&gt; 回到 &lt;strong&gt;Neon&lt;/strong&gt; 的♎&lt;strong&gt;connect连接信息&lt;/strong&gt;界面，将对应的&lt;strong&gt;主机（Host）地址&lt;/strong&gt;、&lt;strong&gt;数据库（Database）名&lt;/strong&gt;、&lt;strong&gt;用户（User）名&lt;/strong&gt;、&lt;strong&gt;密码（Password）&lt;/strong&gt; 复制并粘贴到 &lt;strong&gt;DBeaver&lt;/strong&gt; 的相应字段中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试连接：&lt;/strong&gt; 点击 &lt;strong&gt;&amp;ldquo;测试连接&amp;rdquo;&lt;/strong&gt;。&lt;strong&gt;DBeaver&lt;/strong&gt; 会&lt;strong&gt;自动下载 PostgreSQL 驱动&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果：&lt;/strong&gt; &lt;strong&gt;连接成功&lt;/strong&gt;。点击&lt;strong&gt;完成&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(5:20-5:35) &lt;em&gt;&lt;strong&gt;6.3: 在 DBeaver 中创建数据表&lt;/strong&gt;&lt;/em&gt;
在 &lt;strong&gt;DBeaver&lt;/strong&gt; 左侧导航栏可以打开&lt;strong&gt;数据库&lt;/strong&gt;。♋接下来准备&lt;strong&gt;创建&lt;/strong&gt;一个&lt;strong&gt;表&lt;/strong&gt;，用来&lt;strong&gt;保存玩家分数&lt;/strong&gt;，做一个&lt;strong&gt;分数排行榜&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作：&lt;/strong&gt; 在 &lt;code&gt;public&lt;/code&gt; 模式下的**表（Tables）**上右键，选择 &lt;strong&gt;&amp;ldquo;新建 表&amp;rdquo;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表结构：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;表名：&lt;/strong&gt; &lt;code&gt;player_score&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列：&lt;/strong&gt; 添加两列：&lt;code&gt;player_name&lt;/code&gt; (类型 &lt;code&gt;varchar&lt;/code&gt;) 和 &lt;code&gt;score&lt;/code&gt; (类型 &lt;code&gt;int&lt;/code&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保存：&lt;/strong&gt; 按 &lt;strong&gt;Ctrl+S&lt;/strong&gt; 保存，点击&lt;strong&gt;执行（Persist）&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(5:35-5:58) &lt;em&gt;&lt;strong&gt;6.4: ♎使用 AI (Cline) 生成数据库操作代码&lt;/strong&gt;&lt;/em&gt;
在 &lt;strong&gt;DBeaver&lt;/strong&gt; 中右键点击刚创建的♈ &lt;code&gt;player_score&lt;/code&gt; 表，选择 &lt;strong&gt;&amp;ldquo;生成 SQL&amp;rdquo;&lt;/strong&gt; -&amp;gt; &lt;strong&gt;DDL&lt;/strong&gt;，♐复制 &lt;strong&gt;&lt;code&gt;CREATE TABLE&lt;/code&gt;&lt;/strong&gt; 语句。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Prompt 构建：&lt;/strong&gt; ♐回到 &lt;strong&gt;VS Code&lt;/strong&gt; 的 &lt;strong&gt;Cline&lt;/strong&gt;，粘贴 &lt;code&gt;CREATE TABLE&lt;/code&gt; 语句，并提出需求：
&lt;ol&gt;
&lt;li&gt;♐请把&lt;strong&gt;玩家的数据&lt;/strong&gt;保存到 &lt;strong&gt;PostgreSQL 数据库&lt;/strong&gt;里面，以下是&lt;strong&gt;建表语句&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♋&lt;strong&gt;游戏开始前&lt;/strong&gt;弄一个&lt;strong&gt;输入框&lt;/strong&gt;，让&lt;strong&gt;玩家自己填名字&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(5:58-6:10) &lt;em&gt;&lt;strong&gt;6.5: 向 AI 提供数据库连接信息&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;♈⌊AI（Cline）&lt;/strong&gt; 询问 &lt;strong&gt;⌋PostgreSQL 数据库的连接信息&lt;/strong&gt;。回到 &lt;strong&gt;Neon&lt;/strong&gt; 复制完整的&lt;strong&gt;连接字符串（Connection string）&lt;/strong&gt;。
♈它的主要目的是获取这些信息，以便生成正确配置的、能够连接数据库的应用程序代码 ♋因为它需要这些信息来生成正确的应用程序代码&lt;/p&gt;
&lt;p&gt;(6:10-6:16) &lt;em&gt;&lt;strong&gt;6.6: AI 生成代码并测试&lt;/strong&gt;&lt;/em&gt;
将&lt;strong&gt;连接字符串&lt;/strong&gt;粘贴给 &lt;strong&gt;AI（Cline）&lt;/strong&gt;。&lt;strong&gt;AI&lt;/strong&gt; 修改了代码。点击 &lt;strong&gt;Save&lt;/strong&gt; 保存更改。在终端运行 &lt;code&gt;npm run dev&lt;/code&gt; 启动项目进行测试。&lt;/p&gt;
&lt;p&gt;(6:16-6:41) &lt;em&gt;&lt;strong&gt;6.7: 发现并分析错误&lt;/strong&gt;&lt;/em&gt;
启动时出现&lt;strong&gt;构建错误&lt;/strong&gt;：&lt;code&gt;Module not found: Can&#39;t resolve &#39;dns&#39;&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定位原因：&lt;/strong&gt; 查看 &lt;strong&gt;AI&lt;/strong&gt; 写的代码，发现 &lt;code&gt;page.tsx&lt;/code&gt;（&lt;strong&gt;前端页面&lt;/strong&gt;）直接 &lt;code&gt;import&lt;/code&gt; 并调用了 &lt;code&gt;lib/db.ts&lt;/code&gt; 中的 &lt;code&gt;saveScore&lt;/code&gt; 方法。而 &lt;code&gt;saveScore&lt;/code&gt; 方法内部使用了 &lt;code&gt;pg&lt;/code&gt; 包进行数据库连接和操作 (&lt;code&gt;await pool.connect()&lt;/code&gt;, &lt;code&gt;client.query()&lt;/code&gt;)，并读取了环境变量 &lt;code&gt;process.env.DATABASE_URL&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;问题分析：&lt;/strong&gt; &lt;strong&gt;Next.js&lt;/strong&gt; 默认会将 &lt;code&gt;page.tsx&lt;/code&gt; 作为&lt;strong&gt;前端组件&lt;/strong&gt;处理。在&lt;strong&gt;前端（浏览器）环境&lt;/strong&gt;中直接调用包含&lt;strong&gt;后端数据库操作&lt;/strong&gt;（需要 &lt;code&gt;pg&lt;/code&gt; 包）和&lt;strong&gt;敏感信息&lt;/strong&gt;（数据库连接字符串）的代码是&lt;strong&gt;错误&lt;/strong&gt;的，并且存在&lt;strong&gt;严重的安全隐患&lt;/strong&gt;，会导致&lt;strong&gt;敏感信息暴露&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(6:41-6:56) &lt;em&gt;&lt;strong&gt;6.8: 向 AI 反馈错误并寻求解决方案&lt;/strong&gt;&lt;/em&gt;
与 &lt;strong&gt;AI（Cline）&lt;/strong&gt; 交流，指出&lt;strong&gt;保存数据库的逻辑&lt;/strong&gt;似乎不正常，询问♒⌊保存数据库这块的逻辑正常么？这是后台操作还是前端操作？⌋，♒AI肯定没有意识到自己的错误，让 &lt;strong&gt;AI&lt;/strong&gt; 检查其生成的代码，特别是 &lt;code&gt;db.ts&lt;/code&gt; 和 &lt;code&gt;page.tsx&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;(6:56-7:04) &lt;em&gt;&lt;strong&gt;6.9: AI 提出正确解决方案 (API Route)&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;AI（Cline）&lt;/strong&gt; 识别到错误，并提出了&lt;strong&gt;正确的解决方案&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建 API 路由：&lt;/strong&gt; 新建一个 &lt;strong&gt;API 端点&lt;/strong&gt;（例如 &lt;code&gt;/api/saveScore&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前后端分离：&lt;/strong&gt; &lt;strong&gt;前端页面&lt;/strong&gt;通过&lt;strong&gt;发送 POST 请求&lt;/strong&gt;到这个 &lt;strong&gt;API 端点&lt;/strong&gt;来触发&lt;strong&gt;后端&lt;/strong&gt;的&lt;strong&gt;数据库保存&lt;/strong&gt;操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(7:04-7:19) &lt;em&gt;&lt;strong&gt;7.1: 更简洁的 Next.js 解决方案 (&lt;code&gt;use server&lt;/code&gt;)&lt;/strong&gt;&lt;/em&gt;
作者指出，其实还有一种&lt;strong&gt;更简单&lt;/strong&gt;的 &lt;strong&gt;Next.js&lt;/strong&gt; 改法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;lib/db.ts&lt;/code&gt; 文件的&lt;strong&gt;顶部&lt;/strong&gt;加上一行 &lt;code&gt;&#39;use server&#39;;&lt;/code&gt; 指令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用：&lt;/strong&gt; 这会告诉 &lt;strong&gt;Next.js&lt;/strong&gt;，这个文件里的函数是&lt;strong&gt;服务器后端方法&lt;/strong&gt;。♋&lt;strong&gt;Next.js&lt;/strong&gt; 会&lt;strong&gt;自动&lt;/strong&gt;处理，♐生成相应的 &lt;strong&gt;API 端点&lt;/strong&gt;，♋将&lt;strong&gt;前后端的逻辑分割开&lt;/strong&gt;，无需手动创建 API 路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(7:19-7:51) &lt;em&gt;&lt;strong&gt;7.2: 对 AI 编程能力的思考&lt;/strong&gt;&lt;/em&gt;
这个例子体现了作者对 &lt;strong&gt;AI 编程&lt;/strong&gt;的看法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AI 的角色：&lt;/strong&gt; 现阶段的 &lt;strong&gt;AI&lt;/strong&gt; 水平相当于一个&lt;strong&gt;知识面广&lt;/strong&gt;的&lt;strong&gt;初级程序员&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;人类的角色：&lt;/strong&gt; 人类依旧是&lt;strong&gt;高级程序员&lt;/strong&gt;、&lt;strong&gt;项目架构师&lt;/strong&gt;，需要负责&lt;strong&gt;系统架构设计&lt;/strong&gt;、理解&lt;strong&gt;编程原理&lt;/strong&gt;（如♈&lt;strong&gt;前后端交互&lt;/strong&gt;、&lt;strong&gt;保护安全信息&lt;/strong&gt;等系统架构的知识）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协作方式：&lt;/strong&gt; 不能完全依赖 &lt;strong&gt;AI&lt;/strong&gt;，人类需要&lt;strong&gt;审查和指导 AI&lt;/strong&gt; 的工作，将更多精力投入到&lt;strong&gt;架构设计&lt;/strong&gt;和&lt;strong&gt;业务需求理解&lt;/strong&gt;上。作为&lt;strong&gt;人类&lt;/strong&gt;，掌握&lt;strong&gt;系统架构&lt;/strong&gt;、&lt;strong&gt;编程原理&lt;/strong&gt;等知识仍然是&lt;strong&gt;必学必会的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part7-部署&#34;&gt;part7: 部署
&lt;/h1&gt;&lt;p&gt;(7:51-8:00) &lt;em&gt;&lt;strong&gt;8.1: Next.js 项目最佳部署平台：Vercel&lt;/strong&gt;&lt;/em&gt;
作为一个 &lt;strong&gt;Next.js 项目&lt;/strong&gt;，&lt;strong&gt;最方便&lt;/strong&gt;的部署方式就是部署到 &lt;strong&gt;Vercel&lt;/strong&gt; 里面，♋因为 &lt;strong&gt;Vercel&lt;/strong&gt; 目前是 &lt;strong&gt;Next.js 的母公司&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(8:00-8:08) &lt;em&gt;&lt;strong&gt;8.2: 开始 Vercel 部署流程&lt;/strong&gt;&lt;/em&gt;
来到 &lt;strong&gt;Vercel&lt;/strong&gt; 官网 (&lt;code&gt;vercel.com&lt;/code&gt;)，♋点击 &lt;strong&gt;&amp;ldquo;Start Deploying&amp;rdquo;&lt;/strong&gt;。选择 &lt;strong&gt;Continue with GitHub&lt;/strong&gt; 登录。♈选择之前创建的 &lt;code&gt;snake&lt;/code&gt; &lt;strong&gt;GitHub 仓库&lt;/strong&gt;，点击 &lt;strong&gt;Import&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(8:08-8:18) &lt;em&gt;&lt;strong&gt;8.3: 配置环境变量并部署&lt;/strong&gt;&lt;/em&gt;
项目设置基本保持&lt;strong&gt;默认&lt;/strong&gt;。♐&lt;strong&gt;唯一&lt;/strong&gt;需要修改的是在 &lt;strong&gt;Environment Variables（环境变量）&lt;/strong&gt; 中添加数据库连接信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Key:&lt;/strong&gt; &lt;code&gt;DATABASE_URL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Value:&lt;/strong&gt; 粘贴从 &lt;strong&gt;Neon&lt;/strong&gt; 获取的&lt;strong&gt;连接字符串&lt;/strong&gt;。
点击 &lt;strong&gt;Deploy&lt;/strong&gt; 开始部署。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(8:18-8:32) &lt;em&gt;&lt;strong&gt;8.4: 部署完成与访问&lt;/strong&gt;&lt;/em&gt;
等待大约 &lt;strong&gt;1 分钟&lt;/strong&gt;左右，项目就&lt;strong&gt;部署完成&lt;/strong&gt;了。点击 &lt;strong&gt;&amp;ldquo;Continue to Dashboard&amp;rdquo;&lt;/strong&gt;。&lt;strong&gt;Vercel&lt;/strong&gt; 会分配一个&lt;strong&gt;默认域名&lt;/strong&gt;（例如 &lt;code&gt;snake-bice-three.vercel.app&lt;/code&gt;）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试：&lt;/strong&gt; 访问该域名，功能与&lt;strong&gt;本地&lt;/strong&gt;一致，可以&lt;strong&gt;正常游戏&lt;/strong&gt;并&lt;strong&gt;保存分数&lt;/strong&gt;到 &lt;strong&gt;Neon 数据库&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♋&lt;strong&gt;注意：&lt;/strong&gt; &lt;strong&gt;Vercel&lt;/strong&gt; 的&lt;strong&gt;默认域名&lt;/strong&gt;♋只能在&lt;strong&gt;国外的上网环境&lt;/strong&gt;访问到。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(8:32-8:45) &lt;em&gt;&lt;strong&gt;8.5: Vercel 免费额度限制&lt;/strong&gt;&lt;/em&gt;
在♋ &lt;strong&gt;Vercel&lt;/strong&gt; 的 &lt;strong&gt;Dashboard&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Usage&lt;/strong&gt; 页面，♈可以看到&lt;strong&gt;免费用户&lt;/strong&gt;的&lt;strong&gt;用量限制&lt;/strong&gt;。作者认为 &lt;strong&gt;Edge Requests&lt;/strong&gt;（每月 100 万次）可能比较&lt;strong&gt;瓶颈&lt;/strong&gt;。如果&lt;strong&gt;升级到 Pro 模式&lt;/strong&gt;，这些用量限制可以&lt;strong&gt;提高 10 倍&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part8-域名&#34;&gt;part8: 域名
&lt;/h1&gt;&lt;p&gt;(8:45-8:55) &lt;em&gt;&lt;strong&gt;9.1: 域名的重要性与选择&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;域名&lt;/strong&gt;作为一个&lt;strong&gt;产品的排面&lt;/strong&gt;，不建议用&lt;strong&gt;免费的&lt;/strong&gt;，因为&lt;strong&gt;不稳定&lt;/strong&gt;且&lt;strong&gt;非常折腾&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(8:55-9:05) &lt;em&gt;&lt;strong&gt;9.2: 推荐廉价域名注册商：NameSilo&lt;/strong&gt;&lt;/em&gt;
可以来到 &lt;strong&gt;NameSilo&lt;/strong&gt; (&lt;code&gt;namesilo.com&lt;/code&gt;) 这个地址，以&lt;strong&gt;最低成本&lt;/strong&gt;获得一个域名。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;示例：&lt;/strong&gt; 搜索一个&lt;strong&gt;6 位数字&lt;/strong&gt;，发现 &lt;code&gt;6位数字.xyz&lt;/code&gt; 的域名只需要 &lt;strong&gt;0.99 美元一年&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(9:05-9:18) &lt;em&gt;&lt;strong&gt;9.3: 使用 Cloudflare 托管域名&lt;/strong&gt;&lt;/em&gt;
有了域名以后，可以把它♐&lt;strong&gt;托管&lt;/strong&gt;到 &lt;strong&gt;Cloudflare&lt;/strong&gt; 上面。作者提到，关于&lt;strong&gt;如何把域名托管到 Cloudflare&lt;/strong&gt;，在&lt;strong&gt;之前的视频&lt;/strong&gt;里有过详细介绍，这里不再赘述。&lt;/p&gt;
&lt;p&gt;(9:18-9:34) &lt;em&gt;&lt;strong&gt;9.4: Vercel 绑定自定义域名&lt;/strong&gt;&lt;/em&gt;
回到 &lt;strong&gt;Vercel&lt;/strong&gt; 的项目♍&lt;strong&gt;设置（Settings）&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Domains&lt;/strong&gt; 页面，点击 &lt;strong&gt;Add&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;输入域名：&lt;/strong&gt; 输入自己购买并托管到 &lt;strong&gt;Cloudflare&lt;/strong&gt; 的域名（或子域名），♋例如 &lt;code&gt;snake.tech-shrimp.com&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动配置：&lt;/strong&gt; 点击 &lt;strong&gt;Add&lt;/strong&gt; 后，♋选择 &lt;strong&gt;Configure Automatically&lt;/strong&gt;。&lt;strong&gt;Vercel&lt;/strong&gt; 会自动通过 &lt;strong&gt;Cloudflare API&lt;/strong&gt; 配置 &lt;strong&gt;DNS 记录&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(9:34-9:40) &lt;em&gt;&lt;strong&gt;9.5: 测试自定义域名&lt;/strong&gt;&lt;/em&gt;
配置完成后，页面上会显示&lt;strong&gt;两个蓝色的对勾&lt;/strong&gt;，表示&lt;strong&gt;配置完成&lt;/strong&gt;。使用这个&lt;strong&gt;自定义域名&lt;/strong&gt;（&lt;code&gt;snake.tech-shrimp.com&lt;/code&gt;）同样可以&lt;strong&gt;访问&lt;/strong&gt;到刚才部署的网站，并且♉这个域名在&lt;strong&gt;国内是可以直连&lt;/strong&gt;的。&lt;/p&gt;
&lt;h1 id=&#34;part9-用户行为分析&#34;&gt;part9: 用户行为分析
&lt;/h1&gt;&lt;p&gt;(9:40-9:51) &lt;em&gt;&lt;strong&gt;10.1: 免费用户行为监控工具：Microsoft Clarity&lt;/strong&gt;&lt;/em&gt;
推荐使用 &lt;strong&gt;Microsoft Clarity&lt;/strong&gt; (&lt;code&gt;clarity.microsoft.com&lt;/code&gt;)，这是&lt;strong&gt;微软&lt;/strong&gt;推出的&lt;strong&gt;免费用户行为监控工具&lt;/strong&gt;。它提供了&lt;strong&gt;热点地图（Heatmaps）&lt;/strong&gt;、♈&lt;strong&gt;用户行为录像（Session Recordings）&lt;/strong&gt;、**报表（Dashboard）**等一系列功能。&lt;/p&gt;
&lt;p&gt;(9:51-10:02) &lt;em&gt;&lt;strong&gt;10.2: 集成 Clarity 到 Next.js 项目&lt;/strong&gt;&lt;/em&gt;
登录 &lt;strong&gt;Clarity&lt;/strong&gt;（可以使用 &lt;strong&gt;Google 账号&lt;/strong&gt;）。♋在 &lt;strong&gt;Clarity&lt;/strong&gt; 项目设置中，♉选择&lt;strong&gt;手动安装（Manual install）&lt;/strong&gt;，♈获取&lt;strong&gt;跟踪代码（Tracking Code）&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作：&lt;/strong&gt; 回到 &lt;strong&gt;VS Code&lt;/strong&gt;，打开 ♋⌊&lt;code&gt;app/layout.tsx&lt;/code&gt; 文件⌋。在 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 标签内，定义一个 &lt;code&gt;&amp;lt;Script&amp;gt;&lt;/code&gt; 组件（从 &lt;code&gt;next/script&lt;/code&gt; 导入），。将 &lt;strong&gt;Clarity&lt;/strong&gt; 的&lt;strong&gt;跟踪代码&lt;/strong&gt;粘贴到 &lt;code&gt;&amp;lt;Script&amp;gt;&lt;/code&gt; 组件内部。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(10:02-10:10) &lt;em&gt;&lt;strong&gt;10.3: 验证 Clarity 集成&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;保存&lt;/strong&gt; &lt;code&gt;layout.tsx&lt;/code&gt; 文件。在&lt;strong&gt;本地&lt;/strong&gt;重新&lt;strong&gt;启动项目&lt;/strong&gt; (&lt;code&gt;npm run dev&lt;/code&gt;) 并进行一些操作。♈回到 &lt;strong&gt;Clarity&lt;/strong&gt; 网站，在&lt;strong&gt;录制（Recordings）&lt;strong&gt;页面，♐可以看到&lt;/strong&gt;作为用户的操作&lt;/strong&gt;已经被&lt;strong&gt;录制&lt;/strong&gt;下来了。&lt;/p&gt;
&lt;p&gt;(10:10-10:17) &lt;em&gt;&lt;strong&gt;10.4: Clarity 其他功能说明&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;Clarity&lt;/strong&gt; 的&lt;strong&gt;仪表板（Dashboard）&lt;strong&gt;和&lt;/strong&gt;热点地图（Heatmaps）&lt;strong&gt;需要&lt;/strong&gt;过 24 小时&lt;/strong&gt;才能呈现数据。至此，♉已将网站&lt;strong&gt;轻松接入&lt;/strong&gt;了 &lt;strong&gt;Clarity&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part10-邮件&#34;&gt;part10: 邮件
&lt;/h1&gt;&lt;p&gt;(10:17-10:39) &lt;em&gt;&lt;strong&gt;11.1: 免费邮件收发方案&lt;/strong&gt;&lt;/em&gt;
作者之前有一期视频介绍&lt;strong&gt;如何使用 Cloudflare 获取无限多个免费邮箱&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;收邮件：&lt;/strong&gt; 主要使用 **Cloudflare 的电子邮箱路由（Email Routing）**功能。&lt;/li&gt;
&lt;li&gt;♉&lt;strong&gt;发邮件「白Cloudflare无限多企业邮箱，可收发邮件」：&lt;/strong&gt; 借助 &lt;strong&gt;Resend&lt;/strong&gt; (&lt;code&gt;resend.com&lt;/code&gt;) 的&lt;strong&gt;免费 API&lt;/strong&gt;。&lt;strong&gt;Resend&lt;/strong&gt; 的&lt;strong&gt;免费套餐&lt;/strong&gt;每天可以发送 &lt;strong&gt;100 封&lt;/strong&gt;邮件，每个月最多 &lt;strong&gt;3000 封&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明：&lt;/strong&gt; 详细用法在&lt;strong&gt;之前的视频&lt;/strong&gt;里，本期不再赘述。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part11-ddos-防御&#34;&gt;part11: DDoS 防御
&lt;/h1&gt;&lt;p&gt;(10:39-10:55) &lt;em&gt;&lt;strong&gt;12.1: 免费 DDoS 防御方案&lt;/strong&gt;&lt;/em&gt;
之前也有一期&lt;strong&gt;完整视频&lt;/strong&gt;介绍使用 &lt;strong&gt;Cloudflare 防御 DDoS 攻击&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主要方法：&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;配置 &lt;strong&gt;CDN&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;配置 &lt;strong&gt;IP 白名单&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;使用 &lt;strong&gt;Cloudflare 防火墙（Firewall）&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明：&lt;/strong&gt; 这三种方法可以有效防御 &lt;strong&gt;DDoS 攻击&lt;/strong&gt;，详细内容在那期视频里，这里不再赘述。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part12-其他免费工具与总结&#34;&gt;part12: 其他免费工具与总结
&lt;/h1&gt;&lt;p&gt;(10:55-1:01) &lt;em&gt;&lt;strong&gt;13.1: 其他推荐的免费工具&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;♎&lt;strong&gt;UI 设计：&lt;/strong&gt; 可以选择 &lt;strong&gt;Figma&lt;/strong&gt; (&lt;code&gt;figma.com&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文档工具：&lt;/strong&gt; 可以选择 &lt;strong&gt;Notion&lt;/strong&gt; (&lt;code&gt;notion.so&lt;/code&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(11:01-1:04) &lt;em&gt;&lt;strong&gt;13.2: 工单管理工具&lt;/strong&gt;&lt;/em&gt;
♎&lt;strong&gt;工单管理&lt;/strong&gt;可以使用 &lt;strong&gt;GitHub 的 Project 功能&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(11:04-11:13) &lt;em&gt;&lt;strong&gt;13.3: 作者开发习惯与视频总结&lt;/strong&gt;&lt;/em&gt;
作者自嘲写代码风格是**&amp;ldquo;一把梭&amp;rdquo;&lt;strong&gt;，通常&lt;/strong&gt;不做设计**、&lt;strong&gt;不写文档&lt;/strong&gt;、也&lt;strong&gt;不创建 ticket&lt;/strong&gt;。视频到此结束。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>用AI独立开发MCP服务 集合</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E7%94%A8ai%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91mcp%E6%9C%8D%E5%8A%A1-%E9%9B%86%E5%90%88/</link>
        <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E7%94%A8ai%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91mcp%E6%9C%8D%E5%8A%A1-%E9%9B%86%E5%90%88/</guid>
        <description>&lt;h1 id=&#34;用ai独立开发mcp服务的集合&#34;&gt;用AI独立开发MCP服务的集合
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;生成MCP服务 生成调用本地项目的MCP服务   &lt;a class=&#34;link&#34; href=&#34;https://aistudio.google.com/prompts/1yTmovHhdhAThW5Fzigr_4hYlBB8GEaLM&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://aistudio.google.com/prompts/1yTmovHhdhAThW5Fzigr_4hYlBB8GEaLM&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; - [1 如何AI编程开发MCP]
 	- 用AI开发MCP服务 这里用对应的提示词让AI客户端生成满足自己需求的本地MCP服务代码
 	- （markdown格式 、简单描述MCP服务要实现的功能 、 告诉AI 本地项目的路径、 告诉AI 要激活哪个虚拟环境、 告诉AI要设置的 模型的key）、
 	- （把本地项目的全部代码直接告诉AI、告诉AI 项目运行后的响应情况 也就是直接把终端的完整内容复制给AI，这个终端的完整内容包含程序的运行命令和项目运行效果）
 	- （  给AI详细的MCP文档（告诉AI MCP是什么） 、 应该可以让AI生成MCP的标准配置标准配置的对应的字段和参数我还是了解的 ）
 - 【2 案例  创建MCP服务TimeServer的提示词】	 https://aistudio.google.com/prompts/1yTmovHhdhAThW5Fzigr_4hYlBB8GEaLM
 	- 提示词里面需要MCP的哪些参考资料，这里给了链接，直接在链接里面粘贴内容过来
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
