<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>提示词润色 on 个人笔记博客</title>
        <link>https://yichixing.github.io/hugo-stack-dev/categories/%E6%8F%90%E7%A4%BA%E8%AF%8D%E6%B6%A6%E8%89%B2/</link>
        <description>Recent content in 提示词润色 on 个人笔记博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Sun, 27 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://yichixing.github.io/hugo-stack-dev/categories/%E6%8F%90%E7%A4%BA%E8%AF%8D%E6%B6%A6%E8%89%B2/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>MCP&#43;智能体，开发AI版“你画我猜”效率翻倍</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/mcp-%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91ai%E7%89%88%E4%BD%A0%E7%94%BB%E6%88%91%E7%8C%9C%E6%95%88%E7%8E%87%E7%BF%BB%E5%80%8D/</link>
        <pubDate>Sun, 27 Apr 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/mcp-%E6%99%BA%E8%83%BD%E4%BD%93%E5%BC%80%E5%8F%91ai%E7%89%88%E4%BD%A0%E7%94%BB%E6%88%91%E7%8C%9C%E6%95%88%E7%8E%87%E7%BF%BB%E5%80%8D/</guid>
        <description>&lt;p&gt;༼ MCP+智能体，开发AI版“你画我猜”效率翻倍༽&lt;/p&gt;
&lt;h1 id=&#34;part1-自定义智能体-mcp-git--github-配置&#34;&gt;part1: 自定义智能体 (MCP Git &amp;amp; Github 配置)
&lt;/h1&gt;&lt;p&gt;(02:42-03:04) &lt;em&gt;&lt;strong&gt;1.1: 添加Git MCP Server&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍如何添加 &lt;strong&gt;Git&lt;/strong&gt; 的 &lt;strong&gt;MCP Server&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;作者展示了在 &lt;strong&gt;MCP 市场&lt;/strong&gt; 中找到 &lt;strong&gt;Git&lt;/strong&gt; 工具，并点击添加。&lt;/li&gt;
&lt;li&gt;添加过程需要参考 &lt;strong&gt;介绍页面&lt;/strong&gt;，将 &lt;strong&gt;JSON 配置&lt;/strong&gt; 复制过来。作者展示了从 Github 上的 &lt;code&gt;modelcontextprotocol/servers&lt;/code&gt; 仓库中找到 &lt;code&gt;mcp-server-git&lt;/code&gt; 的配置，特别是 &lt;strong&gt;uvx&lt;/strong&gt; 的配置方式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：复制了使用 &lt;code&gt;uvx&lt;/code&gt; 命令启动 &lt;code&gt;mcp-server-git&lt;/code&gt; 的 &lt;strong&gt;JSON&lt;/strong&gt; 配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者建议&lt;/strong&gt;：使用 &lt;strong&gt;uvx&lt;/strong&gt; 之前需要在电脑上先安装 &lt;strong&gt;uv&lt;/strong&gt;（一个 Python 版本和包管理工具），可以使用官网的&lt;strong&gt;一键安装命令&lt;/strong&gt;进行安装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;画面内容 (JSON 配置)&lt;/strong&gt;：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;mcpServers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;git&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;uvx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mcp-server-git&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;--repository-path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;作者将复制的 &lt;strong&gt;JSON&lt;/strong&gt; 粘贴到 Trae 的 &lt;strong&gt;MCP Server&lt;/strong&gt; 添加窗口中，并点击确认完成添加。现在 &lt;strong&gt;MCP Servers&lt;/strong&gt; 列表中同时有了 &lt;code&gt;git&lt;/code&gt; 和 &lt;code&gt;GitHub&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:04-03:09) &lt;em&gt;&lt;strong&gt;1.2: 创建Git专家智能体&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：将已配置的 &lt;code&gt;git&lt;/code&gt; 和 &lt;code&gt;GitHub&lt;/code&gt; &lt;strong&gt;MCP Server&lt;/strong&gt; 工具组合成一个专门处理 Git 相关任务的智能体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;点击“智能体” -&amp;gt; “+ 创建智能体”。&lt;/li&gt;
&lt;li&gt;将智能体命名为 &lt;strong&gt;“Git 专家”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在“工具” -&amp;gt; “工具 - MCP”部分，&lt;strong&gt;勾选&lt;/strong&gt;上刚刚配置好的 &lt;code&gt;git&lt;/code&gt; 和 &lt;code&gt;GitHub&lt;/code&gt; 两个工具。&lt;/li&gt;
&lt;li&gt;编写&lt;strong&gt;提示词&lt;/strong&gt;，定义该智能体的角色：&lt;code&gt;你是一个Git专家，擅长使用MCP Server操作Git与Github&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;点击“创建”完成智能体配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part2-git专家智能体测试-初始化与提交&#34;&gt;part2: Git专家智能体测试 (初始化与提交)
&lt;/h1&gt;&lt;p&gt;(03:10-03:21) &lt;em&gt;&lt;strong&gt;2.1: 使用Git专家初始化项目&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：测试新创建的 &lt;strong&gt;“Git 专家”&lt;/strong&gt; 智能体的 Git 初始化能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;新建一个对话窗口。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;@&lt;/code&gt; 符号&lt;strong&gt;调用“Git 专家”智能体&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♏&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;把这个文件夹初始化成一个git工程，名字用文件夹名字即可&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 开始执行任务，依次调用了 &lt;code&gt;git&lt;/code&gt; MCP 工具执行了 &lt;code&gt;git init&lt;/code&gt; 命令，并&lt;strong&gt;创建了 &lt;code&gt;.gitignore&lt;/code&gt; 文件&lt;/strong&gt;，然后执行了 &lt;code&gt;git add .gitignore&lt;/code&gt; 和 &lt;code&gt;git commit -m &amp;quot;初始初始化仓库：添加.gitignore文件&amp;quot;&lt;/code&gt; 命令。&lt;/li&gt;
&lt;li&gt;用户&lt;strong&gt;一路点击确认&lt;/strong&gt;（或设置为自动执行），AI &lt;strong&gt;成功完成了初始化&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:22-03:37) &lt;em&gt;&lt;strong&gt;2.2: 使用Git专家提交到Github&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：测试 &lt;strong&gt;“Git 专家”&lt;/strong&gt; 智能体与 Github 的交互能力，将本地仓库推送到远程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;♏&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;把这个仓库，提交到Github上面&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 开始执行任务，调用 &lt;code&gt;GitHub&lt;/code&gt; MCP 工具&lt;strong&gt;创建了一个新的 Github 仓库&lt;/strong&gt; (&lt;code&gt;tech-shrimp/trae_test&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;接着调用 &lt;code&gt;git&lt;/code&gt; MCP 工具执行了 &lt;code&gt;git remote add origin ...&lt;/code&gt; 和 &lt;code&gt;git push -u origin main&lt;/code&gt; 命令，将本地仓库与远程仓库关联并&lt;strong&gt;推送代码&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：操作成功完成，代码被推送到新创建的 Github 仓库。作者切换到浏览器验证，确认 Github 上已成功创建 &lt;code&gt;trae_test&lt;/code&gt; 仓库。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part3-git专家智能体测试-分支合并与冲突解决&#34;&gt;part3: Git专家智能体测试 (分支合并与冲突解决)
&lt;/h1&gt;&lt;p&gt;(03:37-03:48) &lt;em&gt;&lt;strong&gt;3.1: 模拟分支冲突&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：创建一个更复杂的场景来测试 &lt;strong&gt;“Git 专家”&lt;/strong&gt; 智能体处理&lt;strong&gt;分支合并冲突&lt;/strong&gt;的能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;作者在 Github 仓库 &lt;code&gt;trae_test&lt;/code&gt; 中手动操作：
&lt;ul&gt;
&lt;li&gt;创建了一个 &lt;code&gt;colors.txt&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;创建了两个分支：&lt;code&gt;feature&lt;/code&gt; 和 &lt;code&gt;main&lt;/code&gt;。
♋- 在 &lt;code&gt;feature&lt;/code&gt; 分支的 &lt;code&gt;colors.txt&lt;/code&gt; 文件末尾&lt;strong&gt;添加了一行 &amp;ldquo;pink&amp;rdquo;&lt;/strong&gt;。
♋- 在 &lt;code&gt;main&lt;/code&gt; 分支的 &lt;code&gt;colors.txt&lt;/code&gt; 文件末尾&lt;strong&gt;添加了一行 &amp;ldquo;black&amp;rdquo;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：这样就在两个分支的同一个文件 (&lt;code&gt;colors.txt&lt;/code&gt;) 的同一位置（末尾）产生了&lt;strong&gt;修改冲突&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者观点&lt;/strong&gt;：这是开发过程中&lt;strong&gt;经常遇到的问题&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(03:48-04:12) &lt;em&gt;&lt;strong&gt;3.2: 指示Git专家合并分支并解决冲突&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 &lt;strong&gt;“Git 专家”&lt;/strong&gt; 智能体自动&lt;strong&gt;合并&lt;/strong&gt; &lt;code&gt;feature&lt;/code&gt; 分支到 &lt;code&gt;main&lt;/code&gt; 分支，并&lt;strong&gt;解决&lt;/strong&gt;期间产生的&lt;strong&gt;冲突&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;♏&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;把远程的feature分支合并到main分支，并且帮我解决冲突&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 开始执行任务：
&lt;ul&gt;
&lt;li&gt;调用 &lt;code&gt;git&lt;/code&gt; MCP 工具执行 &lt;code&gt;git status&lt;/code&gt; 检查状态，然后 &lt;code&gt;git fetch origin&lt;/code&gt; 获取远程更新。&lt;/li&gt;
&lt;li&gt;尝试执行 &lt;code&gt;git merge origin/feature&lt;/code&gt; 进行合并，此时检测到&lt;strong&gt;冲突&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;AI &lt;strong&gt;分析冲突&lt;/strong&gt;，决定&lt;strong&gt;保留两个分支的修改&lt;/strong&gt;（即同时保留 &amp;ldquo;pink&amp;rdquo; 和 &amp;ldquo;black&amp;rdquo;）。&lt;/li&gt;
&lt;li&gt;AI 修改 &lt;code&gt;colors.txt&lt;/code&gt; 文件以解决冲突，然后执行 &lt;code&gt;git add colors.txt&lt;/code&gt; 和 &lt;code&gt;git commit -m &amp;quot;Merge feature branch: 合并 colors.txt 中的颜色列表&amp;quot;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;最后执行 &lt;code&gt;git push&lt;/code&gt; 将解决冲突后的结果推送到远程 &lt;code&gt;main&lt;/code&gt; 分支。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：&lt;code&gt;colors.txt&lt;/code&gt; 文件现在包含 &lt;strong&gt;6 种颜色&lt;/strong&gt;，AI &lt;strong&gt;流畅丝滑地完成了合并和冲突解决&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part4-规则-rule-功能介绍与项目规则配置&#34;&gt;part4: 规则 (Rule) 功能介绍与项目规则配置
&lt;/h1&gt;&lt;p&gt;(04:13-04:29) &lt;em&gt;&lt;strong&gt;4.1: 规则功能介绍&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;规则 (Rule)&lt;/strong&gt; 是 Trae 的另一个&lt;strong&gt;重磅更新&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;它的作用类似于&lt;strong&gt;系统级的提示词 (System Prompt)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;可以告诉 AI 当前项目的&lt;strong&gt;具体是做什么的&lt;/strong&gt;、使用的&lt;strong&gt;技术框架&lt;/strong&gt;以及开发者的&lt;strong&gt;开发习惯&lt;/strong&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 AI &lt;strong&gt;更懂项目&lt;/strong&gt;，也&lt;strong&gt;更懂你&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:29-04:36) &lt;em&gt;&lt;strong&gt;4.2: 项目设定：AI你画我猜&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;本次演示项目&lt;/strong&gt;：使用 Trae 完成一个 &lt;strong&gt;“AI 你画我猜”&lt;/strong&gt; 的小游戏。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心特点&lt;/strong&gt;：使用 &lt;strong&gt;AI (OpenAI Vision API)&lt;/strong&gt; 而不是真人作为&lt;strong&gt;裁判&lt;/strong&gt;来猜测玩家画的内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;准备工作&lt;/strong&gt;：作者删除了之前测试用的 &lt;code&gt;colors.txt&lt;/code&gt; 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:36-04:55) &lt;em&gt;&lt;strong&gt;4.3: 配置项目规则&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作路径&lt;/strong&gt;：点击右上角用户头像 -&amp;gt; AI 功能管理 -&amp;gt; 规则。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;规则类型&lt;/strong&gt;：分为&lt;strong&gt;个人规则&lt;/strong&gt;（全局生效）和&lt;strong&gt;项目规则&lt;/strong&gt;（仅对当前项目生效）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：作者选择添加&lt;strong&gt;项目规则&lt;/strong&gt;，点击 “+ 创建 project_rules.md” 按钮。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：在项目根目录下创建了一个名为 &lt;code&gt;.trae/rules/project_rules.md&lt;/code&gt; 的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(04:44-04:55) &lt;em&gt;&lt;strong&gt;4.4: 编写项目规则内容&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;目的&lt;/strong&gt;：在 &lt;code&gt;project_rules.md&lt;/code&gt; 文件中定义项目的基本信息和技术选型，供 AI 参考。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：使用 &lt;strong&gt;Markdown&lt;/strong&gt; 格式编写规则内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;♏&lt;strong&gt;画面内容 (技术栈选型)&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;# AI 你画我猜网页游戏
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;## 项目概述
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt;创建一个在线你画我猜游戏，玩家可以在画布上作画，AI 系统负责猜测画的是什么内容。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;## 技术栈选型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; 脚手架：**Vite**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; 前端：**React + TypeScript**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; 画布：**HTML5 Canvas**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; 后端：**Node.js + Express**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; AI 集成：**OpenAI Vision API**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -《“你画我猜”的应用，可能只需要调用 Vision API 这一个功能，这个功能的作用就是 直接通过 HTTP 请求与 OpenAI API 交互》
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这些信息将帮助 AI 更好地理解项目需求并生成符合技术栈的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part5-使用规则拆解任务与ai执行-前端部分&#34;&gt;part5: 使用规则拆解任务与AI执行 (前端部分)
&lt;/h1&gt;&lt;p&gt;(04:55-05:10) &lt;em&gt;&lt;strong&gt;5.1: 指示AI根据规则拆解任务&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：利用配置好的&lt;strong&gt;项目规则 (Rule)&lt;/strong&gt;，让 AI 自动将项目需求拆解成可执行的任务清单。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;切换回 Trae 的聊天界面。&lt;/li&gt;
&lt;li&gt;调用 &lt;strong&gt;&lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体。&lt;/li&gt;
&lt;li&gt;♋&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;请根据 #rules 里面的项目介绍，拆解任务，任务可以跟踪状态，把所有任务写到 task.md 文件&lt;/code&gt;。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#rules&lt;/code&gt; 指的是引用刚才创建的 &lt;code&gt;project_rules.md&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#task.md&lt;/code&gt; 指的是让 AI 将拆解结果输出到 &lt;code&gt;task.md&lt;/code&gt; 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:08-05:10) &lt;em&gt;&lt;strong&gt;5.2: AI生成任务清单&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 根据 &lt;code&gt;project_rules.md&lt;/code&gt; 的内容，&lt;strong&gt;成功生成&lt;/strong&gt;了一个包含详细步骤和状态追踪标记的&lt;strong&gt;任务清单&lt;/strong&gt; (&lt;code&gt;task.md&lt;/code&gt; 文件)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:10-05:18) &lt;em&gt;&lt;strong&gt;5.3: 简化任务清单&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原因&lt;/strong&gt;：为了&lt;strong&gt;演示方便&lt;/strong&gt;，AI 生成的原始任务清单可能过于复杂。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：作者&lt;strong&gt;手动编辑&lt;/strong&gt; &lt;code&gt;task.md&lt;/code&gt; 文件，&lt;strong&gt;删掉了一些复杂的功能&lt;/strong&gt;，只保留了实现核心功能所需的基础任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:18-05:27) &lt;em&gt;&lt;strong&gt;5.4: 指示AI进行逐项开发&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 AI 根据简化后的任务清单，开始逐步执行开发任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;再次调用 &lt;strong&gt;&lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;根据 #task.md 进行逐项开发，并且标记状态&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 开始分析 &lt;code&gt;task.md&lt;/code&gt; 文件并准备执行第一个任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:27-05:43) &lt;em&gt;&lt;strong&gt;5.5: AI执行前端任务 (环境搭建与画布开发)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行过程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI 首先执行&lt;strong&gt;环境搭建&lt;/strong&gt;任务：调用系统命令执行 &lt;code&gt;npm create vite@latest . --template react-ts&lt;/code&gt; 来创建 &lt;strong&gt;React + TypeScript&lt;/strong&gt; 项目。&lt;/li&gt;
&lt;li&gt;接着执行 &lt;code&gt;npm install&lt;/code&gt; 安装依赖。&lt;/li&gt;
&lt;li&gt;然后开始执行&lt;strong&gt;画布功能开发&lt;/strong&gt;任务，创建和修改相关组件文件 (&lt;code&gt;DrawingCanvas.tsx&lt;/code&gt;, &lt;code&gt;DrawingCanvas.css&lt;/code&gt; 等)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户交互&lt;/strong&gt;：AI 每生成一段代码或执行一个命令，都会展示给用户，用户只需&lt;strong&gt;点击“接受”&lt;/strong&gt;（或“全部接受”）即可。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者评价&lt;/strong&gt;：因为有任务列表的存在，AI 干活&lt;strong&gt;非常的有条理&lt;/strong&gt;，用户操作&lt;strong&gt;非常简单&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(05:46-05:59) &lt;em&gt;&lt;strong&gt;5.6: AI执行前端任务 (用户界面开发与测试)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行过程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI 继续根据 &lt;code&gt;task.md&lt;/code&gt; 执行后续的前端任务，包括&lt;strong&gt;用户界面布局&lt;/strong&gt; (&lt;code&gt;App.tsx&lt;/code&gt;, &lt;code&gt;App.css&lt;/code&gt;)、&lt;strong&gt;结果显示区域&lt;/strong&gt; (&lt;code&gt;ResultDisplay.tsx&lt;/code&gt;)、&lt;strong&gt;单元测试&lt;/strong&gt;等。&lt;/li&gt;
&lt;li&gt;AI 逐步创建、修改代码，并更新 &lt;code&gt;task.md&lt;/code&gt; 中对应任务的状态为&lt;strong&gt;已完成&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：&lt;strong&gt;一次调用 &lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体，AI 就&lt;strong&gt;直接创建了 26 个文件&lt;/strong&gt;，&lt;strong&gt;前端相关的工作已经完全完成&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part6-ai执行后端任务&#34;&gt;part6: AI执行后端任务
&lt;/h1&gt;&lt;p&gt;(06:01-06:08) &lt;em&gt;&lt;strong&gt;6.1: 指示AI进行后端开发&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 AI 继续执行任务清单中剩余的后端开发任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;新建一个会话。&lt;/li&gt;
&lt;li&gt;调用 &lt;strong&gt;&lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;请根据 #task.md 这些未完成的任务，继续完成后端的开发&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:08-06:13) &lt;em&gt;&lt;strong&gt;6.2: AI执行后端任务 (环境搭建与API开发)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行过程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI 开始执行后端任务：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;环境搭建&lt;/strong&gt;：创建 &lt;code&gt;server&lt;/code&gt; 目录，生成 &lt;code&gt;package.json&lt;/code&gt;, &lt;code&gt;tsconfig.json&lt;/code&gt; 等配置文件，安装 &lt;strong&gt;Node.js&lt;/strong&gt; 和 &lt;strong&gt;Express&lt;/strong&gt; 相关依赖 (&lt;code&gt;npm install express cors dotenv @types/node @types/express @types/cors ts-node nodemon typescript&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API 开发&lt;/strong&gt;：创建 &lt;strong&gt;Express&lt;/strong&gt; 服务器入口文件 (&lt;code&gt;index.ts&lt;/code&gt;)，配置路由 (&lt;code&gt;routes/drawing.ts&lt;/code&gt;)，实现 &lt;code&gt;/api/drawing/recognize&lt;/code&gt; 接口用于接收图片数据并调用 &lt;strong&gt;OpenAI Vision API&lt;/strong&gt; 进行图像识别。&lt;/li&gt;
&lt;li&gt;创建 &lt;code&gt;.env&lt;/code&gt; 文件模板用于存放 &lt;strong&gt;OpenAI API Key&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:13-06:16) &lt;em&gt;&lt;strong&gt;6.3: AI完成所有任务&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 成功执行了所有后端开发任务，并将 &lt;code&gt;task.md&lt;/code&gt; 中所有任务的状态标记为&lt;strong&gt;已完成&lt;/strong&gt;（绿色对勾）。&lt;strong&gt;AI 的开发工作至此完成&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:16-06:27) &lt;em&gt;&lt;strong&gt;6.4: 修复后端代码小问题&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;问题&lt;/strong&gt;：在 &lt;code&gt;drawing.ts&lt;/code&gt; 文件中，AI 错误地导入了 &lt;code&gt;openai&lt;/code&gt; 的 &lt;strong&gt;npm 包&lt;/strong&gt;，但项目规则指定的是直接调用 &lt;strong&gt;OpenAI Vision API&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;作者发现了这个小错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;修改 drawing.ts 文件，优先使用 fetch 调用 openai，不要引入 openai 的包&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 理解指令，&lt;strong&gt;修改了 &lt;code&gt;drawing.ts&lt;/code&gt;&lt;/strong&gt; 中的代码，将原本导入 &lt;code&gt;openai&lt;/code&gt; 包的方式改为了使用 Node.js 内置的 &lt;strong&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/strong&gt; 直接调用 OpenAI Vision API 端点 (&lt;code&gt;https://api.openai.com/v1/chat/completions&lt;/code&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：代码被成功修正，消除了不必要的依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:25-06:27) &lt;em&gt;&lt;strong&gt;6.5: 配置环境变量&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：作者手动编辑 &lt;code&gt;.env&lt;/code&gt; 文件，填入自己的 &lt;strong&gt;OpenAI API Key&lt;/strong&gt;，并配置了 &lt;strong&gt;CORS&lt;/strong&gt; 允许的来源（前端地址 &lt;code&gt;http://localhost:5173&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:27-06:41) &lt;em&gt;&lt;strong&gt;6.6: 启动前后端服务&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：运行刚刚由 AI 开发完成的前后端代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;启动后端&lt;/strong&gt;：在 Trae 的终端中，&lt;code&gt;cd ./server&lt;/code&gt; 进入后端目录，然后执行 &lt;code&gt;npm run dev&lt;/code&gt; 启动 &lt;strong&gt;Node.js (Express)&lt;/strong&gt; 服务。后端运行在 &lt;strong&gt;&lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;启动前端&lt;/strong&gt;：新建一个终端，在项目根目录执行 &lt;code&gt;npm run dev&lt;/code&gt; 启动 &lt;strong&gt;Vite&lt;/strong&gt; 开发服务器。前端运行在 &lt;strong&gt;&lt;code&gt;http://localhost:5173&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part7-智能体-debug-前端ui问题&#34;&gt;part7: 智能体 Debug (前端UI问题)
&lt;/h1&gt;&lt;p&gt;(06:42-06:48) &lt;em&gt;&lt;strong&gt;7.1: 发现前端UI问题&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：在浏览器中打开前端页面 &lt;code&gt;http://localhost:5173&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;问题描述&lt;/strong&gt;：页面上成功显示了&lt;strong&gt;画板 (Canvas)&lt;/strong&gt;，可以作画，也有“清空画布”按钮，但是&lt;strong&gt;缺少了用于触发 AI 猜测的按钮&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(06:48-07:01) &lt;em&gt;&lt;strong&gt;7.2: 使用截图和多模态能力请求修复&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：利用 Trae 的&lt;strong&gt;多模态能力&lt;/strong&gt;和 &lt;strong&gt;Claude 3.5&lt;/strong&gt; 模型，通过截图让 AI 理解并修复 UI 问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;对当前缺少按钮的前端页面进行&lt;strong&gt;截图&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;回到 Trae 的聊天界面，将&lt;strong&gt;截图粘贴&lt;/strong&gt;进去。&lt;/li&gt;
&lt;li&gt;选择 &lt;strong&gt;Claude 3.5 Sonnet&lt;/strong&gt; 模型（因为它支持多模态）。&lt;/li&gt;
&lt;li&gt;调用 &lt;strong&gt;&lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体，并引用 &lt;strong&gt;&lt;code&gt;#Workspace&lt;/code&gt;&lt;/strong&gt; (整个项目代码)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;没有让 AI 猜测的按钮，帮我修复一下&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(07:00-07:12) &lt;em&gt;&lt;strong&gt;7.3: AI修复前端UI&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行过程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI (Claude 3.5) &lt;strong&gt;分析了截图&lt;/strong&gt;和&lt;strong&gt;代码&lt;/strong&gt; (&lt;code&gt;#Workspace&lt;/code&gt;)，理解了问题所在。&lt;/li&gt;
&lt;li&gt;AI 识别出需要在 &lt;code&gt;DrawingCanvas.tsx&lt;/code&gt; 组件中添加一个按钮，并为其绑定触发 AI 猜测的事件处理函数。&lt;/li&gt;
&lt;li&gt;AI &lt;strong&gt;生成了修改后的代码&lt;/strong&gt;，在画板下方添加了一个 “AI 猜测” 按钮。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户交互&lt;/strong&gt;：用户检查 AI 生成的代码修改，确认无误后点击&lt;strong&gt;接受&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：前端页面刷新后，&lt;strong&gt;“AI 猜测”按钮成功出现&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part8-智能体-debug-后端api与浏览器工具&#34;&gt;part8: 智能体 Debug (后端API与浏览器工具)
&lt;/h1&gt;&lt;p&gt;(07:02-07:09) &lt;em&gt;&lt;strong&gt;8.1: 发现后端API调用错误&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：在添加了按钮的前端页面上，画一个图形（例如字母 A），然后点击 “AI 猜测” 按钮。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;问题描述&lt;/strong&gt;：点击按钮后，页面提示 &lt;strong&gt;“抱歉，AI 猜测失败，请重试”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♋&lt;strong&gt;Debug 操作&lt;/strong&gt;：打开浏览器的&lt;strong&gt;开发者工具&lt;/strong&gt; (F12)，切换到&lt;strong&gt;控制台 (Console)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误信息&lt;/strong&gt;：控制台显示了两个关键错误：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;POST http://localhost:5174/api/guess 404 (Not Found)&lt;/code&gt;：表明前端尝试请求的 API 地址错误（端口号 5174 不对，且路径 &lt;code&gt;/api/guess&lt;/code&gt; 可能与后端不符）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AI猜测出错: Error: AI猜测请求失败&lt;/code&gt;：这是前端代码中捕获到的网络请求错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(07:07-07:16) &lt;em&gt;&lt;strong&gt;8.2: 手动Debug的局限性&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;传统方式&lt;/strong&gt;：需要&lt;strong&gt;手动复制&lt;/strong&gt;控制台的错误信息，然后&lt;strong&gt;粘贴&lt;/strong&gt;到 Trae 中，让 AI 分析并修复。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Trae 的优势&lt;/strong&gt;：通过 &lt;strong&gt;MCP (Model Context Protocol)&lt;/strong&gt; 功能，提供了&lt;strong&gt;更进阶、更自动化&lt;/strong&gt;的 Debug 方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(07:16-08:13) &lt;em&gt;&lt;strong&gt;8.3: ♏配置Browser Tools MCP Server&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：设置一个 MCP Server，让 Trae 能够&lt;strong&gt;直接读取浏览器&lt;/strong&gt;的控制台信息、网络请求等状态，实现更智能的 Debug。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键步骤&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安装浏览器插件&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在 Trae 的 &lt;strong&gt;MCP 市场&lt;/strong&gt;中搜索 &lt;code&gt;browser&lt;/code&gt;，找到 &lt;strong&gt;Browser Tools&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;点击其介绍页面中的链接，下载 &lt;strong&gt;Chrome 扩展&lt;/strong&gt; (&lt;code&gt;BrowserToolsMCP Chrome Extension&lt;/code&gt;) 的压缩包。&lt;/li&gt;
&lt;li&gt;解压压缩包。&lt;/li&gt;
&lt;li&gt;♏打开浏览器的&lt;strong&gt;扩展管理页面&lt;/strong&gt; (&lt;code&gt;edge://extensions/&lt;/code&gt; 或 &lt;code&gt;chrome://extensions/&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;启用&lt;strong&gt;开发者模式&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;将解压后的插件文件夹&lt;strong&gt;拖拽&lt;/strong&gt;到扩展管理页面进行安装。安装成功后会显示 &lt;strong&gt;BrowserTools MCP&lt;/strong&gt; 插件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置 Trae 中的 MCP Server&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在 Trae 的 MCP 市场中&lt;strong&gt;添加 Browser Tools&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;参考其介绍页面，复制 &lt;strong&gt;npx&lt;/strong&gt; 启动命令的配置 &lt;strong&gt;JSON&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修改 JSON&lt;/strong&gt;：将示例的 &lt;code&gt;example-server&lt;/code&gt; 名称改为 &lt;code&gt;browser-tools&lt;/code&gt;，将 &lt;code&gt;mcp-server-example&lt;/code&gt; 参数改为 &lt;code&gt;@agentdeskai/browser-tools-mcp@latest&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;点击&lt;strong&gt;确认&lt;/strong&gt;保存配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;启动 MCP Server 进程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;打开一个&lt;strong&gt;新的命令行窗口&lt;/strong&gt;（不是 Trae 内置终端）。&lt;/li&gt;
&lt;li&gt;运行 Browser Tools 介绍页面提供的第三步命令：&lt;code&gt;npx @agentdeskai/browser-tools-server@latest&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保持此命令行窗口运行&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：成功配置并启动了 Browser Tools MCP Server，打通了 Trae 与浏览器之间的通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:13-08:19) &lt;em&gt;&lt;strong&gt;8.4: 创建浏览器专家智能体&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：创建一个专门利用 Browser Tools MCP 进行 Debug 的智能体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;点击“智能体” -&amp;gt; “+ 创建智能体”。&lt;/li&gt;
&lt;li&gt;命名为 &lt;strong&gt;“浏览器专家”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在“工具 - MCP”中&lt;strong&gt;只勾选 &lt;code&gt;browser-tools&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;点击“创建”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:19-08:42) &lt;em&gt;&lt;strong&gt;8.5: 使用浏览器专家Debug&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;准备工作&lt;/strong&gt;：&lt;strong&gt;重新打开&lt;/strong&gt;要 Debug 的浏览器页面 (&lt;code&gt;localhost:5174&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接确认&lt;/strong&gt;：打开开发者工具 (F12)，页面顶部会出现提示条：&lt;strong&gt;&amp;ldquo;BrowserTools MCP&amp;rdquo; 已开始调试此浏览器&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;触发错误&lt;/strong&gt;：在页面上画图并点击 “AI 猜测” 按钮，再次触发之前的 404 错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;回到 Trae。&lt;/li&gt;
&lt;li&gt;调用新创建的 &lt;strong&gt;&lt;code&gt;@浏览器专家&lt;/code&gt;&lt;/strong&gt; 智能体。&lt;/li&gt;
&lt;li&gt;♏&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;浏览器控制台有哪些报错&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:35-08:42) &lt;em&gt;&lt;strong&gt;8.6: AI分析错误并定位问题&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行过程&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;“浏览器专家”&lt;/strong&gt; 智能体调用了其绑定的 &lt;code&gt;browser-tools&lt;/code&gt; MCP 工具中的 &lt;code&gt;getConsoleErrors&lt;/code&gt; 函数。&lt;/li&gt;
&lt;li&gt;MCP Server 从浏览器&lt;strong&gt;获取了控制台的错误日志&lt;/strong&gt;，并返回给 Trae 中的 AI。&lt;/li&gt;
&lt;li&gt;AI &lt;strong&gt;分析了返回的错误信息&lt;/strong&gt;（包含详细的错误类型、消息、堆栈等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 成功&lt;strong&gt;获取并理解了&lt;/strong&gt;浏览器端的报错信息，准备进行下一步分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(08:41-08:55) &lt;em&gt;&lt;strong&gt;8.7: 指示AI修复API路径问题&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 AI 结合浏览器报错信息和项目代码，定位并修复 API 路径不匹配的问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI 分析&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI 检查了浏览器报错信息，确认是 &lt;code&gt;/api/guess&lt;/code&gt; 接口返回 404。&lt;/li&gt;
&lt;li&gt;♏AI 检查了后端代码 (&lt;code&gt;server/src/routes/drawing.ts&lt;/code&gt; 和 &lt;code&gt;server/src/index.ts&lt;/code&gt;)，发现后端实际提供的接口路径是 &lt;code&gt;/api/drawing/recognize&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;AI 检查了前端代码 (&lt;code&gt;src/App.tsx&lt;/code&gt; 和 &lt;code&gt;src/components/Canvas/index.tsx&lt;/code&gt;)，确认前端调用的是 &lt;code&gt;/api/guess&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结论&lt;/strong&gt;：AI 准确地指出了&lt;strong&gt;前后端 API 调用的路径不匹配&lt;/strong&gt;是导致 404 错误的原因。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;调用 &lt;strong&gt;&lt;code&gt;@Builder&lt;/code&gt;&lt;/strong&gt; 智能体（需要它来修改代码）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;（结合浏览器专家的分析结果）：&lt;code&gt;因为前端API调用的是 /api/guess，但服务器配置的路由是 /api/drawing/recognize。帮我修复问题&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI 修复&lt;/strong&gt;：AI 修改了前端代码 (&lt;code&gt;src/App.tsx&lt;/code&gt; 或相关调用处)，将 API 请求路径从 &lt;code&gt;/api/guess&lt;/code&gt; &lt;strong&gt;更正为 &lt;code&gt;/api/drawing/recognize&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part9-最终测试与效果展示&#34;&gt;part9: 最终测试与效果展示
&lt;/h1&gt;&lt;p&gt;(09:08-09:10) &lt;em&gt;&lt;strong&gt;9.1: 再次测试 - 依然报错&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：修复 API 路径后，再次在前端页面画图并点击 “AI 猜测”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：&lt;strong&gt;仍然报错&lt;/strong&gt;，控制台可能显示新的错误（视频中未明确显示具体新错误，但暗示问题未完全解决）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:10-09:13) &lt;em&gt;&lt;strong&gt;9.2: 结合控制台报错再次请求修复&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：让 AI 结合最新的控制台错误信息，进行进一步的 Debug 和修复。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;调用 &lt;strong&gt;&lt;code&gt;@浏览器专家&lt;/code&gt;&lt;/strong&gt; 智能体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入指令&lt;/strong&gt;：&lt;code&gt;结合控制台报错修复问题&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI 分析&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;浏览器专家再次通过 &lt;code&gt;browser-tools&lt;/code&gt; 获取控制台错误。&lt;/li&gt;
&lt;li&gt;AI 分析后发现，这次的问题是前端在调用 &lt;code&gt;fetch&lt;/code&gt; 时，&lt;strong&gt;没有指定后端的端口号&lt;/strong&gt;，导致请求仍然发向了前端的 5173 端口，而非后端的 3000 端口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:13-09:16) &lt;em&gt;&lt;strong&gt;9.3: AI最终修复&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关键操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;AI 识别到需要修改前端发送请求时的 URL。&lt;/li&gt;
&lt;li&gt;♏AI 修改了 &lt;code&gt;src/components/Canvas/guessDrawing.tsx&lt;/code&gt; (或其他实际发送请求的文件) 中的 &lt;code&gt;fetch&lt;/code&gt; 调用，将 URL 明确指定为后端的地址和端口：&lt;code&gt;http://localhost:3000/api/drawing/recognize&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户交互&lt;/strong&gt;：用户接受 AI 的代码修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:16-09:20) &lt;em&gt;&lt;strong&gt;9.4: 成功测试 - 画A&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：进行最终测试，在画板上画一个字母 &lt;strong&gt;&amp;ldquo;A&amp;rdquo;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：点击 “AI 猜测” 后，&lt;strong&gt;请求成功&lt;/strong&gt;，AI 返回结果：“&lt;strong&gt;这张图片是一个手绘的字母 &amp;lsquo;A&amp;rsquo;，也就是英文字母表中的第一个字母。&lt;/strong&gt;”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:20-09:25) &lt;em&gt;&lt;strong&gt;9.5: 成功测试 - 画蜜蜂 (AI误认)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：画一个&lt;strong&gt;蝴蝶&lt;/strong&gt;的简笔画。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 返回结果：“&lt;strong&gt;这是一张手绘的蜜蜂简笔画。你可以看到它有四只翅膀、分节的身体，还有两根触角。&lt;/strong&gt;”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者评论&lt;/strong&gt;：AI 把蝴蝶认成了&lt;strong&gt;蜜蜂&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:25-09:31) &lt;em&gt;&lt;strong&gt;9.6: 成功测试 - 画房子&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：画一个带烟囱的&lt;strong&gt;房子&lt;/strong&gt;的简笔画。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 返回结果：“&lt;strong&gt;这是一幅简笔画，画的是一间房子。可以看到有屋顶、门和窗户，还有一个像是烟囱的结构。整体是一个简单的立体房屋造型。&lt;/strong&gt;”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(09:31-09:38) &lt;em&gt;&lt;strong&gt;9.7: 成功测试 - 画大象&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试场景&lt;/strong&gt;：画一个&lt;strong&gt;大象&lt;/strong&gt;的简笔画。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：AI 返回结果：“&lt;strong&gt;这是一幅简笔画，看起来像是一只大象。可以看到大象的长鼻子、耳朵、四条腿和尾巴。画面风格简洁，但特征比较明显。&lt;/strong&gt;”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作者总结&lt;/strong&gt;：整个过程&lt;strong&gt;还是挺有意思的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>在线AI工具合集（没钱做推广的冷门AI好用吗？AI工具大合集）</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E5%9C%A8%E7%BA%BFai%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86%E6%B2%A1%E9%92%B1%E5%81%9A%E6%8E%A8%E5%B9%BF%E7%9A%84%E5%86%B7%E9%97%A8ai%E5%A5%BD%E7%94%A8%E5%90%97ai%E5%B7%A5%E5%85%B7%E5%A4%A7%E5%90%88%E9%9B%86/</link>
        <pubDate>Fri, 11 Apr 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E5%9C%A8%E7%BA%BFai%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86%E6%B2%A1%E9%92%B1%E5%81%9A%E6%8E%A8%E5%B9%BF%E7%9A%84%E5%86%B7%E9%97%A8ai%E5%A5%BD%E7%94%A8%E5%90%97ai%E5%B7%A5%E5%85%B7%E5%A4%A7%E5%90%88%E9%9B%86/</guid>
        <description>&lt;p&gt;༼没钱做推广的冷门AI好用吗？AI工具大合集！【Git源宝】 ༽&lt;/p&gt;
&lt;h1 id=&#34;part1-ai工具合集推荐导览&#34;&gt;part1: AI工具合集推荐导览
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(00:00-00:07)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;1.1: 思维导图介绍&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视频开头展示了一个&lt;strong&gt;思维导图&lt;/strong&gt;，介绍其囊括了许多&lt;strong&gt;没有足够预算做推广&lt;/strong&gt;但&lt;strong&gt;很好用&lt;/strong&gt;却&lt;strong&gt;少有人发掘&lt;/strong&gt;的&lt;strong&gt;小众AI&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;(00:07-00:15)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;1.2: 整理与分类&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者表示&lt;strong&gt;花费了一个多月&lt;/strong&gt;整理这些好玩的小众AI。&lt;/li&gt;
&lt;li&gt;将AI工具按照&lt;strong&gt;学习类&lt;/strong&gt;、&lt;strong&gt;职场类&lt;/strong&gt;、&lt;strong&gt;自媒体类&lt;/strong&gt;三个大类进行了分类，并制作成思维导图供大家查阅使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;(00:15-00:25)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;1.3: 思维导图价值与声明&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展示了思维导图的部分内容，包含&lt;strong&gt;学生&lt;/strong&gt;、&lt;strong&gt;新媒体&lt;/strong&gt;、&lt;strong&gt;职场&lt;/strong&gt;等分类下的具体AI工具名称。&lt;/li&gt;
&lt;li&gt;这个导图旨在帮助用户在&lt;strong&gt;特定领域&lt;/strong&gt;找到&lt;strong&gt;合适的AI&lt;/strong&gt;，避免&lt;strong&gt;盲目寻找（一头雾水）&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;作者声明本期视频&lt;strong&gt;全程无广告&lt;/strong&gt;，观众可以放心&lt;strong&gt;收藏&lt;/strong&gt;和&lt;strong&gt;点赞&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part2-jpghd---人工智能老照片无损修复&#34;&gt;part2: jpgHD - 人工智能老照片无损修复
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(00:25-00:35)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;2.1: ♏jpgHD 功能介绍与演示&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;jpgHD&lt;/strong&gt;，一个&lt;strong&gt;修复AI&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;适用场景：当制作视频搜集的&lt;strong&gt;素材比较模糊&lt;/strong&gt;时。&lt;/li&gt;
&lt;li&gt;核心功能：可以&lt;strong&gt;免费修复&lt;/strong&gt;和&lt;strong&gt;画质增强&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;演示：将一张模糊的初音未来毛绒玩具图片修复并增强为清晰的二次元画风图片。&lt;/li&gt;
&lt;li&gt;评价：对于修复&lt;strong&gt;电子包浆&lt;/strong&gt;的照片&lt;strong&gt;非常好用&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;(00:35-00:43)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;2.2: jpgHD 更多功能展示&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展示了 &lt;strong&gt;jpgHD&lt;/strong&gt; 的效果演示界面。&lt;/li&gt;
&lt;li&gt;除了&lt;strong&gt;超分辨率&lt;/strong&gt;外，还支持：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;给黑白照片上色&lt;/strong&gt;（示例：林肯照片）。&lt;/li&gt;
&lt;li&gt;让&lt;strong&gt;模糊的二次元图片变得更加清晰&lt;/strong&gt;（示例：戴帽子的奥黛丽·赫本与马、另一个二次元女孩）。&lt;/li&gt;
&lt;li&gt;修复破损照片、老照片（示例：女孩和男孩的老照片对比）。&lt;/li&gt;
&lt;li&gt;魔法动态照片。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part3-elevenlabs---ai配音与声音克隆&#34;&gt;part3: ElevenLabs - AI配音与声音克隆
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(00:43-00:54)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;3.1: ♏ElevenLabs 功能与应用场景&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;ElevenLabs&lt;/strong&gt;，一个&lt;strong&gt;配音AI&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ul&gt;
&lt;li&gt;不方便给视频录音时。&lt;/li&gt;
&lt;li&gt;想拥有&lt;strong&gt;女孩的声音&lt;/strong&gt;时。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;核心功能：
&lt;ul&gt;
&lt;li&gt;♈&lt;strong&gt;克隆甜美的声音 (Voice Cloning)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;♈将&lt;strong&gt;文本直接转换成语音 (Text to Speech)&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;界面展示：显示了 &lt;strong&gt;Text to Speech&lt;/strong&gt; 界面，左侧有 &lt;strong&gt;Voices (声音)&lt;/strong&gt;、&lt;strong&gt;Playground (游乐场)&lt;/strong&gt;、&lt;strong&gt;Voice Lab (声音实验室)&lt;/strong&gt;、&lt;strong&gt;Voice Changer (变声器)&lt;/strong&gt; 等选项。&lt;/li&gt;
&lt;li&gt;评价：效果比&lt;strong&gt;剪辑软件自带的要好很多&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part4-suno---ai-作曲&#34;&gt;part4: Suno - AI 作曲
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(00:54-01:07)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;4.1: Suno 功能与效果试听&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;Suno&lt;/strong&gt;，一个&lt;strong&gt;作曲AI&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;适用场景：当找不到合适的&lt;strong&gt;视频BGM&lt;/strong&gt;时，可以用它来制作。&lt;/li&gt;
&lt;li&gt;界面展示：显示了 &lt;strong&gt;Suno&lt;/strong&gt; 的网站界面，包含 Trending (趋势)、Hot in April (四月热门) 等板块。&lt;/li&gt;
&lt;li&gt;效果试听：播放了一段由 Suno 生成的英文歌曲片段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;(01:07-01:24)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;4.2: Suno 使用方法与免费额度&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强调最重要的优势：&lt;strong&gt;每天都有几次免费的使用&lt;/strong&gt;额度。&lt;/li&gt;
&lt;li&gt;使用方法：
&lt;ol&gt;
&lt;li&gt;在 &lt;strong&gt;Lyrics (歌词)&lt;/strong&gt; 区域&lt;strong&gt;输入好歌词&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;选择 &lt;strong&gt;Styles (风格)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;点击生成 (Create) 即可&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;演示：输入了中文古诗词作为歌词，选择了 hiphop 风格，并播放了生成的中文说唱片段。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part5-viggle-ai---视频人物动作替换&#34;&gt;part5: Viggle AI - 视频人物动作替换
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(01:24-01:37)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;5.1:♏ Viggle AI 功能与演示&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;Viggle AI&lt;/strong&gt;，一个可以用来&lt;strong&gt;整活&lt;/strong&gt; (制作创意/搞笑内容) 的AI。&lt;/li&gt;
&lt;li&gt;演示：展示了一个由两个跳舞的人组成的&lt;strong&gt;抽象视频&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;核心功能：可以&lt;strong&gt;用它免费来制作&lt;/strong&gt;这类视频。&lt;/li&gt;
&lt;li&gt;界面展示：显示了 &lt;strong&gt;Viggle AI&lt;/strong&gt; 的操作界面。&lt;/li&gt;
&lt;li&gt;操作流程（多人场景）：
&lt;ol&gt;
&lt;li&gt;选择 &lt;strong&gt;Multi&lt;/strong&gt; 功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;左上角上传&lt;/strong&gt;动作&lt;strong&gt;视频 (Motion)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;右上角上传&lt;/strong&gt;你的&lt;strong&gt;照片 (Character)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;点击 &lt;strong&gt;Generate&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;评价：&lt;strong&gt;上手简单，值得推荐&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part6-白日梦---ai短剧生成&#34;&gt;part6: 白日梦 - AI短剧生成
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(01:37-01:51)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;6.1: 白日梦 功能与制作流程&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;白日梦 (Bairimeng)&lt;/strong&gt;，一个可以用来做 &lt;strong&gt;AI短视频&lt;/strong&gt; 的AI。&lt;/li&gt;
&lt;li&gt;制作流程：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;写故事&lt;/strong&gt;：首先可以&lt;strong&gt;根据你的设定写一个故事&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选形象&lt;/strong&gt;：然后&lt;strong&gt;确定好主角&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成图片&lt;/strong&gt;：根据分镜&lt;strong&gt;生成每一个场景的图片&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;视频编辑&lt;/strong&gt;：AI 会将图片组合成&lt;strong&gt;一部抽象短片&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;附加功能：可以&lt;strong&gt;配上旁白和对话&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;评价：&lt;strong&gt;非常方便&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;界面展示：显示了其包含“写故事”、“选形象”、“生成图片”、“视频编辑”四个步骤的界面，并展示了生成的图片序列和旁白输入框。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;(01:51-02:00)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;6.2: 白日梦 生成效果展示&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展示了一段由白日梦生成的&lt;strong&gt;动画短片&lt;/strong&gt;效果。&lt;/li&gt;
&lt;li&gt;内容为宫崎骏风格的动画，一个女孩和一个猪形态的角色在对话。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part7-whisper---ai字幕识别&#34;&gt;part7: Whisper - AI字幕识别
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(02:00-02:12)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;7.1: Whisper 功能与应用&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;Whisper&lt;/strong&gt;，一个&lt;strong&gt;识别字幕的AI (自动语音识别 ASR 系统)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;主要用途：给&lt;strong&gt;视频配上字幕&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对比：平时使用&lt;strong&gt;剪映&lt;/strong&gt;，但其自动识别字幕功能&lt;strong&gt;需要会员&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;推荐理由：Whisper 是一个&lt;strong&gt;免费 (白嫖)&lt;/strong&gt; 的选择。&lt;/li&gt;
&lt;li&gt;开源信息：&lt;strong&gt;已经在GitHub开源了&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;评价：&lt;strong&gt;十分推荐&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;界面展示：显示了 Whisper 的介绍页面和 GitHub 仓库页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part8-朱雀大模型---ai内容检测&#34;&gt;part8: 朱雀大模型 - AI内容检测
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(02:12-02:28)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;8.1: 朱雀大模型 功能与使用&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;朱雀大模型&lt;/strong&gt; 的在线 &lt;strong&gt;AI检测器&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;功能：可以&lt;strong&gt;检测&lt;/strong&gt;文本中的 &lt;strong&gt;AI率 (疑似AI生成内容占比)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;作用：帮助&lt;strong&gt;识别文章的AI生成率&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;适用场景：
&lt;ul&gt;
&lt;li&gt;当&lt;strong&gt;拿不准自己写的文章&lt;/strong&gt; AI 味重不重时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;老师&lt;/strong&gt;可以用它来&lt;strong&gt;检测学生的作业是不是AI生成的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;界面演示：展示了粘贴文本、点击检测后，显示 &lt;strong&gt;100% 疑似AI&lt;/strong&gt; 的结果。&lt;/li&gt;
&lt;li&gt;语言支持：&lt;strong&gt;中文英文都可以&lt;/strong&gt;检测。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part9-ai-short---提示词ai&#34;&gt;part9: AI Short - 提示词AI
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(02:28-02:43)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;9.1: AI Short 功能与特点&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;AI Short&lt;/strong&gt;，一个&lt;strong&gt;提示词AI&lt;/strong&gt; (AI Short 效率革命)。&lt;/li&gt;
&lt;li&gt;特点：其提供的&lt;strong&gt;提示词非常离谱&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;示例1 (学术)：可以通过提示词将&lt;strong&gt;文章润色成Nature风格&lt;/strong&gt;，方便成为&lt;strong&gt;学术大牛&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;示例2 (娱乐)：甚至提供一些&lt;strong&gt;魅魔扮演&lt;/strong&gt;的提示词。&lt;/li&gt;
&lt;li&gt;适用人群：&lt;strong&gt;很适合学生党在学习之余玩乐使用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;界面展示：显示了网站 (&lt;code&gt;aishort.top&lt;/code&gt;) 及其分类筛选和提示词列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part10-沉浸式翻译---网页翻译ai插件&#34;&gt;part10: 沉浸式翻译 - 网页翻译AI插件
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(02:43-03:03)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;10.1: 网页翻译痛点与沉浸式翻译介绍&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;网页翻译AI&lt;/strong&gt;，特指&lt;strong&gt;沉浸式翻译 (Immersive Translate)&lt;/strong&gt; 这个&lt;strong&gt;小插件&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;适用场景：看一些&lt;strong&gt;英文论坛&lt;/strong&gt;来学习英语。&lt;/li&gt;
&lt;li&gt;痛点：&lt;strong&gt;浏览器自带的机翻&lt;/strong&gt;不仅&lt;strong&gt;经常翻译错误&lt;/strong&gt;，还会&lt;strong&gt;覆盖掉原来的原始英文&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;推荐：&lt;strong&gt;沉浸式翻译&lt;/strong&gt;插件。&lt;/li&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;小巧性能好&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;能形成&lt;strong&gt;对照双语翻译&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;评价：&lt;strong&gt;非常方便&lt;/strong&gt;我们去看一些英文网站。&lt;/li&gt;
&lt;li&gt;界面演示：展示了在 Reddit 和 Wikipedia 页面上使用沉浸式翻译实现双语对照的效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part11-trae---免费ai-ide&#34;&gt;part11: Trae - 免费AI IDE
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(03:03-03:22)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;11.1: Trae 功能与优势&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;Trae&lt;/strong&gt;，一个&lt;strong&gt;免费的AI IDE&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对比：相比 &lt;strong&gt;VS Code 里的 AI 插件&lt;/strong&gt;，它的&lt;strong&gt;体验会更加的整体一些&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;适用场景：如果专业里会涉及到&lt;strong&gt;编程&lt;/strong&gt;，在遇到很难的题时，可以用它来&lt;strong&gt;辅助写代码&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;集成模型：里面也&lt;strong&gt;接入了 Deepseek 和 豆包 的模型&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;扩展性：也能&lt;strong&gt;通过 API 添加其他的模型&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;评价：&lt;strong&gt;十分建议收藏&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;界面演示：展示了 Trae 的安装配置过程（导入 VS Code 配置、安装命令行）和 IDE 主界面、模型设置（可添加 API）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part12-稿定ai---设计类ai&#34;&gt;part12: 稿定AI - 设计类AI
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(03:22-03:37)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;12.1: 稿定AI 功能与免费使用注意&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;稿定AI&lt;/strong&gt;，一个&lt;strong&gt;设计类AI&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;功能：可以制作 &lt;strong&gt;LOGO&lt;/strong&gt;、&lt;strong&gt;科普攻略&lt;/strong&gt;、&lt;strong&gt;商品图&lt;/strong&gt;、&lt;strong&gt;海报&lt;/strong&gt;等。&lt;/li&gt;
&lt;li&gt;特定应用：制作在&lt;strong&gt;某红薯 (小红书)&lt;/strong&gt; 上常见的&lt;strong&gt;显眼的大字封面&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;免费使用注意：生成结果中只有&lt;strong&gt;不带皇冠&lt;/strong&gt;的模板才可以&lt;strong&gt;免费白嫖&lt;/strong&gt;，需要避开带皇冠的。&lt;/li&gt;
&lt;li&gt;界面演示：展示了稿定AI的模板库，特别是大字封面模板，并指出了皇冠标识。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part13-islide---ai-ppt制作&#34;&gt;part13: iSlide - AI PPT制作
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(03:37-03:47)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;13.1: iSlide 功能与应用&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;iSlide&lt;/strong&gt;，一个能&lt;strong&gt;白嫖制作PPT的AI&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;集成方式：作为 PowerPoint 的插件 &lt;strong&gt;(iSlide AI 助手)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;适用场景：当&lt;strong&gt;工作中需要制作PPT&lt;/strong&gt;的时候。&lt;/li&gt;
&lt;li&gt;特点：里面&lt;strong&gt;内置了很多模板&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;评价：&lt;strong&gt;还是挺方便应急的&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;界面演示：展示了在 PowerPoint 中通过 iSlide AI 助手输入主题，AI 自动生成 PPT 大纲和内容的过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part14-通义法睿---法律ai助手&#34;&gt;part14: 通义法睿 - 法律AI助手
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(03:47-03:59)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;14.1: 通义法睿 功能与应用场景&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍 &lt;strong&gt;通义法睿&lt;/strong&gt;，一个&lt;strong&gt;法律AI&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;适用场景：当在&lt;strong&gt;职场中受到法律纠纷&lt;/strong&gt;，比如&lt;strong&gt;恶意裁员&lt;/strong&gt;等情况。&lt;/li&gt;
&lt;li&gt;作用：可以使用这个 &lt;strong&gt;AI法律助手&lt;/strong&gt; 来&lt;strong&gt;查询相关的法条&lt;/strong&gt;，&lt;strong&gt;保护自己的权益&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;界面演示：展示了通义法睿的问答界面，并输入了“面对被公司解雇的情况，我有哪些法律权利和赔偿可以争取？”的问题，AI 正在生成回答。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;part15-总结与后续&#34;&gt;part15: 总结与后续
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;(03:59-04:16)&lt;/em&gt; &lt;em&gt;&lt;strong&gt;15.1: 视频总结与资源获取&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以上就是本期视频介绍的所有&lt;strong&gt;小众AI&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;为了方便大家访问，视频中提到的东西都放在了&lt;strong&gt;老地方&lt;/strong&gt;，大家可以&lt;strong&gt;自行免费获取&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;呼吁观众&lt;strong&gt;点赞、收藏、加关注&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;作者自我介绍：&lt;strong&gt;源宝，一台AI和黑科技的挖掘机&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;结束语：&lt;strong&gt;我们下期见&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
