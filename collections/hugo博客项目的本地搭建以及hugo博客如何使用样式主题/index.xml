<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hugo博客项目的本地搭建以及hugo博客如何使用样式主题 on 个人笔记博客</title>
        <link>https://yichixing.github.io/hugo-stack-dev/collections/hugo%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8Ahugo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%A0%B7%E5%BC%8F%E4%B8%BB%E9%A2%98/</link>
        <description>Recent content in Hugo博客项目的本地搭建以及hugo博客如何使用样式主题 on 个人笔记博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Thu, 20 Feb 2025 20:14:22 +0800</lastBuildDate><atom:link href="https://yichixing.github.io/hugo-stack-dev/collections/hugo%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8Ahugo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%A0%B7%E5%BC%8F%E4%B8%BB%E9%A2%98/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>搭建本地hugo博客</title>
        <link>https://yichixing.github.io/hugo-stack-dev/p/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0hugo%E5%8D%9A%E5%AE%A2/</link>
        <pubDate>Thu, 20 Feb 2025 20:14:22 +0800</pubDate>
        
        <guid>https://yichixing.github.io/hugo-stack-dev/p/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0hugo%E5%8D%9A%E5%AE%A2/</guid>
        <description>&lt;h1 id=&#34;part1-hugo--github-免费部署自己的博客介绍&#34;&gt;part1: Hugo + GitHub 免费部署自己的博客介绍
&lt;/h1&gt;&lt;p&gt;(00:00-00:15) &lt;em&gt;&lt;strong&gt;1.1: 视频目标与演示&lt;/strong&gt;&lt;/em&gt;
视频旨在分享如何使用 &lt;strong&gt;Hugo&lt;/strong&gt; 和 &lt;strong&gt;GitHub&lt;/strong&gt; &lt;strong&gt;免费部署&lt;/strong&gt;一个属于自己的&lt;strong&gt;个人博客&lt;/strong&gt;。开头展示了作者已经&lt;strong&gt;部署成功&lt;/strong&gt;的博客页面作为最终效果预览。&lt;/p&gt;
&lt;p&gt;(00:15-00:37) &lt;em&gt;&lt;strong&gt;1.2: 作者说明与目的&lt;/strong&gt;&lt;/em&gt;
作者声明自己并非专业的教学视频制作者，制作此视频主要是因为近期想更新内容，且正好在研究 &lt;strong&gt;Hugo&lt;/strong&gt; 博客的搭建过程。目的是分享经验，帮助观看者在搭建过程中&lt;strong&gt;少走弯路&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(00:37-00:44) &lt;em&gt;&lt;strong&gt;1.3: 博客内容示例&lt;/strong&gt;&lt;/em&gt;
简要展示了博客中的一篇文章，内容即为本次视频所要讲解的 &lt;strong&gt;Hugo + GitHub 免费部署博客&lt;/strong&gt;的&lt;strong&gt;教程记录&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part2-搭建动机与-hugo-vs-hexo-对比&#34;&gt;part2: 搭建动机与 Hugo vs Hexo 对比
&lt;/h1&gt;&lt;p&gt;(00:45-00:57) &lt;em&gt;&lt;strong&gt;2.1: 历史背景 (Hexo)&lt;/strong&gt;&lt;/em&gt;
作者提到自己之前已经使用 &lt;strong&gt;Hexo&lt;/strong&gt; 框架搭建过一个&lt;strong&gt;个人博客&lt;/strong&gt; (展示了之前的 Hexo 博客页面)。&lt;/p&gt;
&lt;p&gt;(00:57-01:19) &lt;em&gt;&lt;strong&gt;2.2: 转向 Hugo 的原因&lt;/strong&gt;&lt;/em&gt;
解释了为何选择使用 &lt;strong&gt;Hugo&lt;/strong&gt; 重新搭建：更换了新电脑 (&lt;strong&gt;天选4&lt;/strong&gt;) 后，之前的 &lt;strong&gt;Hexo&lt;/strong&gt; 本地文件丢失（因为&lt;strong&gt;没有上传备份到 GitHub&lt;/strong&gt;），所以需要重新搭建。借此机会研究并尝试了 &lt;strong&gt;Hugo&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(01:19-01:30) &lt;em&gt;&lt;strong&gt;2.3: Hugo 使用体验&lt;/strong&gt;&lt;/em&gt;
作者认为实际使用下来，&lt;strong&gt;Hugo&lt;/strong&gt; &lt;strong&gt;感觉&lt;/strong&gt;比 &lt;strong&gt;Hexo&lt;/strong&gt; &lt;strong&gt;更方便&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(01:30-01:41) &lt;em&gt;&lt;strong&gt;2.4: 对新手的建议 (Hugo vs Hexo)&lt;/strong&gt;&lt;/em&gt;
指出 &lt;strong&gt;Hugo&lt;/strong&gt; 的官方文档&lt;strong&gt;基本都是英文&lt;/strong&gt;，可能对新手不太友好。因此，&lt;strong&gt;推荐新手&lt;/strong&gt;优先尝试 &lt;strong&gt;Hexo&lt;/strong&gt; (文档相对更完善，中文资源多)。使用 Hugo 需要&lt;strong&gt;啃英文文档&lt;/strong&gt;，对新手来说较为&lt;strong&gt;麻烦&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part3-下载-hugo&#34;&gt;part3: 下载 Hugo
&lt;/h1&gt;&lt;p&gt;(01:41-01:54) &lt;em&gt;&lt;strong&gt;3.1: 开始教程：下载准备&lt;/strong&gt;&lt;/em&gt;
正式进入教程环节，第一步是&lt;strong&gt;下载 Hugo&lt;/strong&gt;。作者打开浏览器并搜索 &lt;strong&gt;Hugo&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(01:54-02:22) &lt;em&gt;&lt;strong&gt;3.2: 定位 Hugo GitHub Releases&lt;/strong&gt;&lt;/em&gt;
进入 &lt;strong&gt;Hugo&lt;/strong&gt; 官网 (&lt;strong&gt;gohugo.io&lt;/strong&gt;)，点击 &lt;strong&gt;GitHub&lt;/strong&gt; 链接跳转到 &lt;strong&gt;Hugo&lt;/strong&gt; 的 &lt;strong&gt;GitHub 仓库&lt;/strong&gt;。在仓库页面，点击 &lt;code&gt;Tags&lt;/code&gt; (标签/版本) 来查找发布版本。选择了当时的最新版本 &lt;strong&gt;v0.131.0&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(02:22-02:30) &lt;em&gt;&lt;strong&gt;3.3: 选择并下载 Hugo Extended 版本&lt;/strong&gt;&lt;/em&gt;
在版本发布页面向下滚动到 &lt;code&gt;Assets&lt;/code&gt; (资源) 部分，强调需要下载 &lt;strong&gt;Extended&lt;/strong&gt; (扩展) 版本，并选择了适用于 Windows 64位的 &lt;code&gt;hugo_extended_0.131.0_windows-amd64.zip&lt;/code&gt; 文件进行&lt;strong&gt;下载&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part4-hugo-文件准备与站点创建&#34;&gt;part4: Hugo 文件准备与站点创建
&lt;/h1&gt;&lt;p&gt;(02:30-02:55) &lt;em&gt;&lt;strong&gt;4.1: 解压 Hugo 文件&lt;/strong&gt;&lt;/em&gt;
展示了下载好的 &lt;strong&gt;zip 压缩包&lt;/strong&gt;。在桌面上创建了一个名为 &lt;code&gt;test&lt;/code&gt; 的新文件夹。将下载的 &lt;strong&gt;zip 包&lt;/strong&gt;移动到 &lt;code&gt;test&lt;/code&gt; 文件夹中，并进行&lt;strong&gt;解压&lt;/strong&gt;。解压后得到包含 &lt;code&gt;hugo.exe&lt;/code&gt; 等文件的文件夹。&lt;/p&gt;
&lt;p&gt;(02:55-03:04) &lt;em&gt;&lt;strong&gt;4.2: Hugo 可执行文件说明&lt;/strong&gt;&lt;/em&gt;
强调 &lt;strong&gt;Hugo&lt;/strong&gt; 是用 &lt;strong&gt;Go&lt;/strong&gt; 语言编写的，但使用时&lt;strong&gt;不需要单独安装 Go 环境&lt;/strong&gt;，♈下载解压后的 &lt;code&gt;hugo.exe&lt;/code&gt; &lt;strong&gt;可执行文件&lt;/strong&gt;即可直接使用，这一点很方便。清理了多余的文件和文件夹，只保留核心文件。&lt;/p&gt;
&lt;p&gt;(03:04-03:13) &lt;em&gt;&lt;strong&gt;4.3: 打开命令行工具 (CMD)&lt;/strong&gt;&lt;/em&gt;
在包含 &lt;code&gt;hugo.exe&lt;/code&gt; 的文件夹（路径类似 &lt;code&gt;C:\Users\Letere\Desktop\test\hugo_extended_0.131.0_windows-amd64&lt;/code&gt;）的&lt;strong&gt;地址栏&lt;/strong&gt;输入 &lt;code&gt;cmd&lt;/code&gt; 并回车，从而&lt;strong&gt;直接在该目录下打开命令行窗口&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(03:13-03:34) &lt;em&gt;&lt;strong&gt;4.4: 创建新站点命令 (&lt;code&gt;hugo new site&lt;/code&gt;)&lt;/strong&gt;&lt;/em&gt;
在命令行窗口中，♈输入命令 &lt;strong&gt;&lt;code&gt;hugo new site dev&lt;/code&gt;&lt;/strong&gt;。该命令会创建一个名为 &lt;code&gt;dev&lt;/code&gt; 的新文件夹，并在其中♈♈生成 &lt;strong&gt;Hugo 站点&lt;/strong&gt;的&lt;strong&gt;基本目录结构&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(03:34-03:45) &lt;em&gt;&lt;strong&gt;4.5: 理解命令输出与后续步骤&lt;/strong&gt;&lt;/em&gt;
展示了 &lt;strong&gt;&lt;code&gt;hugo new site&lt;/code&gt;&lt;/strong&gt; 命令执行后的&lt;strong&gt;输出提示&lt;/strong&gt;，其中包含了建议的后续操作步骤，如切换目录、安装主题、编辑配置、创建内容和启动服务。作者&lt;strong&gt;截图保存&lt;/strong&gt;了这些步骤提示。&lt;/p&gt;
&lt;p&gt;(03:45-04:10) &lt;em&gt;&lt;strong&gt;4.6: 切换目录与复制 Hugo 执行文件&lt;/strong&gt;&lt;/em&gt;
根据提示，首先使用 &lt;strong&gt;&lt;code&gt;cd dev&lt;/code&gt;&lt;/strong&gt; 命令&lt;strong&gt;切换到&lt;/strong&gt;新创建的 &lt;code&gt;dev&lt;/code&gt; 站点&lt;strong&gt;根目录&lt;/strong&gt;。因为 &lt;code&gt;hugo.exe&lt;/code&gt; 不在系统路径中，需要将其&lt;strong&gt;复制&lt;/strong&gt;到当前的 &lt;code&gt;dev&lt;/code&gt; 目录下，才能在该目录中执行 &lt;strong&gt;Hugo&lt;/strong&gt; 相关命令。&lt;/p&gt;
&lt;h1 id=&#34;part5-本地预览-无主题&#34;&gt;part5: 本地预览 (无主题)
&lt;/h1&gt;&lt;p&gt;(04:10-04:28) &lt;em&gt;&lt;strong&gt;5.1: 准备本地预览&lt;/strong&gt;&lt;/em&gt;
根据之前的步骤提示，下一步是安装主题，但作者决定先&lt;strong&gt;不安装主题&lt;/strong&gt;，直接&lt;strong&gt;启动本地服务&lt;/strong&gt;看下效果。&lt;/p&gt;
&lt;p&gt;(04:28-05:08) &lt;em&gt;&lt;strong&gt;5.2: 启动 Hugo 本地服务 (&lt;code&gt;hugo server -D&lt;/code&gt;)&lt;/strong&gt;&lt;/em&gt;
在 &lt;code&gt;dev&lt;/code&gt; 目录下，执行命令 &lt;strong&gt;&lt;code&gt;hugo server -D&lt;/code&gt;&lt;/strong&gt; 来启动 &lt;strong&gt;Hugo&lt;/strong&gt; 的&lt;strong&gt;内置Web服务器&lt;/strong&gt;进行本地预览。解释 &lt;code&gt;-D&lt;/code&gt; 是 &lt;code&gt;--buildDrafts&lt;/code&gt; 的&lt;strong&gt;简写&lt;/strong&gt;，用于包含草稿内容。命令成功执行后，输出了本地服务器地址 &lt;strong&gt;&lt;code&gt;http://localhost:1313&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(05:08-05:16) &lt;em&gt;&lt;strong&gt;5.3: 浏览器访问与结果 (Page Not Found)&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;复制&lt;/strong&gt;该地址并在浏览器中打开。♈页面显示 &lt;strong&gt;&lt;code&gt;Page Not Found&lt;/code&gt;&lt;/strong&gt; (404错误)。作者解释这是&lt;strong&gt;正常现象&lt;/strong&gt;，因为目前&lt;strong&gt;既没有安装主题，也没有任何内容&lt;/strong&gt;，但这表明 &lt;strong&gt;Hugo 服务已经成功启动&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part6-查找与下载-hugo-主题-stack&#34;&gt;part6: 查找与下载 Hugo 主题 (Stack)
&lt;/h1&gt;&lt;p&gt;(05:16-05:33) &lt;em&gt;&lt;strong&gt;6.1: 前往 Hugo 主题站&lt;/strong&gt;&lt;/em&gt;
回到命令行输出提示，明确需要&lt;strong&gt;安装一个主题&lt;/strong&gt;。再次访问 &lt;strong&gt;Hugo&lt;/strong&gt; 官网 (&lt;strong&gt;gohugo.io&lt;/strong&gt;)，点击导航栏中的 &lt;code&gt;Themes&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;(05:33-05:56) &lt;em&gt;&lt;strong&gt;6.2: 选择 Stack 主题&lt;/strong&gt;&lt;/em&gt;
浏览 &lt;strong&gt;Hugo 主题&lt;/strong&gt;列表，作者选择了名为 &lt;strong&gt;&lt;code&gt;Stack&lt;/code&gt;&lt;/strong&gt; 的主题（卡片式风格，适用于博主）。点击进入该主题的详情页。&lt;/p&gt;
&lt;p&gt;(05:56-06:13) &lt;em&gt;&lt;strong&gt;6.3: ♈下载 Stack 主题源码&lt;/strong&gt;&lt;/em&gt;
在 &lt;strong&gt;Stack&lt;/strong&gt; 主题详情页，点击 &lt;code&gt;Download&lt;/code&gt; 按钮，跳转到该主题的 &lt;strong&gt;GitHub 仓库&lt;/strong&gt; (&lt;code&gt;CallMeMaybe/hugo-theme-stack&lt;/code&gt;)。在仓库页面，同样通过 &lt;code&gt;Tags&lt;/code&gt; 找到最新版本 &lt;strong&gt;v3.26.0&lt;/strong&gt;，♈并点击 &lt;strong&gt;&lt;code&gt;Source code (zip)&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;下载主题的源代码压缩包&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;part7-安装与配置-hugo-主题&#34;&gt;part7: 安装与配置 Hugo 主题
&lt;/h1&gt;&lt;p&gt;(06:13-06:33) &lt;em&gt;&lt;strong&gt;7.1: 放置主题文件&lt;/strong&gt;&lt;/em&gt;
展示下载好的主题压缩包 &lt;code&gt;hugo-theme-stack-3.26.0.zip&lt;/code&gt;。回到本地的 &lt;strong&gt;Hugo&lt;/strong&gt; 站点 &lt;code&gt;dev&lt;/code&gt; 目录，找到 &lt;code&gt;themes&lt;/code&gt; 文件夹。♈将下载的&lt;strong&gt;主题压缩包&lt;/strong&gt;移动到 &lt;code&gt;themes&lt;/code&gt; 文件夹内，并进行&lt;strong&gt;解压&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(06:33-07:03) &lt;em&gt;&lt;strong&gt;7.2: 重命名主题文件夹与修改配置&lt;/strong&gt;&lt;/em&gt;
解压后的主题文件夹名带有版本号 (&lt;code&gt;hugo-theme-stack-3.26.0&lt;/code&gt;)。为了方便配置，♒将其&lt;strong&gt;重命名&lt;/strong&gt;为 &lt;code&gt;hugo-theme-stack&lt;/code&gt;。打开站点根目录下的&lt;strong&gt;配置文件&lt;/strong&gt; &lt;code&gt;hugo.yaml&lt;/code&gt; (之前从主题的 &lt;code&gt;exampleSite&lt;/code&gt; 复制过来的)。找到 &lt;code&gt;theme&lt;/code&gt; 配置项，将其值修改为&lt;strong&gt;刚刚重命名&lt;/strong&gt;的文件夹名 &lt;code&gt;hugo-theme-stack&lt;/code&gt;。&lt;strong&gt;保存&lt;/strong&gt;配置文件。&lt;/p&gt;
&lt;p&gt;(07:03-07:19) &lt;em&gt;&lt;strong&gt;7.3: 应用主题示例配置与内容&lt;/strong&gt;&lt;/em&gt;
为了快速看到效果，作者将主题♐ &lt;code&gt;exampleSite&lt;/code&gt; 目录下的 &lt;code&gt;content&lt;/code&gt; 文件夹和 &lt;code&gt;hugo.yaml&lt;/code&gt; 文件&lt;strong&gt;复制&lt;/strong&gt;到站点根目录 (&lt;code&gt;dev&lt;/code&gt;) 下，并选择&lt;strong&gt;覆盖&lt;/strong&gt;现有文件。这样就♈直接使用了主题&lt;strong&gt;自带的示例内容和配置&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(07:19-07:28) &lt;em&gt;&lt;strong&gt;7.4: 清理与重启服务&lt;/strong&gt;&lt;/em&gt;
♐删除了站点根目录下原有的 &lt;code&gt;hugo.toml&lt;/code&gt; 文件【因为现在使用 &lt;code&gt;hugo.yaml&lt;/code&gt;，它们是同一个配置文件，只是后缀名不同】。回到命令行窗口，&lt;strong&gt;停止&lt;/strong&gt;之前运行的 &lt;strong&gt;Hugo&lt;/strong&gt; 服务（通过按 Ctrl+C，虽然画面未显示），然后再次执行 &lt;strong&gt;&lt;code&gt;hugo server -D&lt;/code&gt;&lt;/strong&gt; 命令&lt;strong&gt;重新启动服务&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(07:28-07:47) &lt;em&gt;&lt;strong&gt;7.5: 预览带主题的站点&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;刷新&lt;/strong&gt;浏览器中 &lt;code&gt;http://localhost:1313&lt;/code&gt; 页面。此时，网站成功加载了 &lt;strong&gt;Stack 主题&lt;/strong&gt;和其&lt;strong&gt;示例内容&lt;/strong&gt;，外观与之前展示的成品相似。&lt;/p&gt;
&lt;h1 id=&#34;part8-主题示例内容处理&#34;&gt;part8: 主题示例内容处理
&lt;/h1&gt;&lt;p&gt;(07:47-08:07) &lt;em&gt;&lt;strong&gt;8.1: 删除 Rich Content 示例文章&lt;/strong&gt;&lt;/em&gt;
在预览页面滚动时，作者提到主题♋示例中有一个名为 &lt;code&gt;rich-content&lt;/code&gt; 的文章。因为这篇文章&lt;strong&gt;引用了 YouTube 等外部资源&lt;/strong&gt;，在国内网络环境下可能导致&lt;strong&gt;加载超时&lt;/strong&gt;或构建失败，所以♈建议&lt;strong&gt;删除&lt;/strong&gt;。随后展示了♈在 &lt;code&gt;根目录/content/post&lt;/code&gt; 目录下&lt;strong&gt;删除 &lt;code&gt;rich-content&lt;/code&gt; 文件夹&lt;/strong&gt;的操作。&lt;/p&gt;
&lt;p&gt;(08:07-08:39) &lt;em&gt;&lt;strong&gt;8.2: 参考主题 Demo 站&lt;/strong&gt;&lt;/em&gt;
回到主题的 &lt;strong&gt;GitHub 仓库&lt;/strong&gt;页面，指出 &lt;code&gt;README.md&lt;/code&gt; 文件通常包含重要信息。找到了♋主题提供的 &lt;strong&gt;Demo 演示站点&lt;/strong&gt;链接 (&lt;code&gt;demo.stack.jimmycai.com&lt;/code&gt;) 并打开。说明可以通过访问 &lt;strong&gt;Demo 站点&lt;/strong&gt;来了解 &lt;code&gt;rich-content&lt;/code&gt; 页面原本包含哪些内容（如嵌入视频、特殊格式等）。&lt;/p&gt;
&lt;h1 id=&#34;part9-hugo-国际化-i18n-功能说明&#34;&gt;part9: Hugo 国际化 (i18n) 功能说明
&lt;/h1&gt;&lt;p&gt;(08:39-09:04) &lt;em&gt;&lt;strong&gt;9.1: 文件名与语言代码&lt;/strong&gt;&lt;/em&gt;
解释 &lt;strong&gt;Hugo&lt;/strong&gt; 的&lt;strong&gt;国际化 (i18n)&lt;/strong&gt; 功能。以 &lt;code&gt;dev/content/post/chinese-test&lt;/code&gt; 文件夹为例，其中的内容文件是 &lt;code&gt;index.zh-cn.md&lt;/code&gt;。指出文件名中的 &lt;strong&gt;&lt;code&gt;.zh-cn&lt;/code&gt;&lt;/strong&gt; 就是&lt;strong&gt;语言代码&lt;/strong&gt;。对比 &lt;code&gt;emoji-support&lt;/code&gt; 文件夹下的 &lt;code&gt;index.md&lt;/code&gt; 文件，它&lt;strong&gt;没有语言代码&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(09:04-09:19) &lt;em&gt;&lt;strong&gt;9.2: 国际化工作原理&lt;/strong&gt;&lt;/em&gt;
说明：如果文件名&lt;strong&gt;不带语言代码&lt;/strong&gt; (如 &lt;code&gt;index.md&lt;/code&gt;)，则该内容属于在 &lt;code&gt;hugo.yaml&lt;/code&gt; 中配置的&lt;strong&gt;默认语言&lt;/strong&gt;（此例中为&lt;strong&gt;英语&lt;/strong&gt;）。♈网站会根据用户切换的语言（通过页面上的语言切换器）加载对应语言代码的文件【&lt;strong&gt;切出对应后缀名的文件&lt;/strong&gt;】。例如，♈切换到中文，会加载 &lt;code&gt;index.zh-cn.md&lt;/code&gt;；♈切换到英文，会加载 &lt;code&gt;index.en.md&lt;/code&gt; 或默认的 &lt;code&gt;index.md&lt;/code&gt;。
也就是当访问者在您的网站上选择或&lt;strong&gt;切换到中文（简体） 这个语言选项&lt;/strong&gt;时，&lt;strong&gt;Hugo 会查找并使用带有 .zh-cn.md 后缀的文件来渲染该页面&lt;/strong&gt;，比如 有一个名为 我的笔记.md 的 Markdown 文件，并且您希望它只在网站的中文环境下显示，需要将其重命名为 &lt;strong&gt;我的笔记.zh-cn.md&lt;/strong&gt;
(09:19-09:29) &lt;em&gt;&lt;strong&gt;9.3: 国际化演示&lt;/strong&gt;&lt;/em&gt;
为了演示，♈将 &lt;code&gt;chinese-test&lt;/code&gt; 文件夹下的 &lt;code&gt;index.zh-cn.md&lt;/code&gt; &lt;strong&gt;重命名&lt;/strong&gt;为 &lt;code&gt;index.en.md&lt;/code&gt;【&lt;strong&gt;就是改改后缀名而&lt;/strong&gt;】。&lt;strong&gt;刷新&lt;/strong&gt;本地预览页面。此时切换到&lt;strong&gt;英文&lt;/strong&gt;环境，会显示原 &amp;ldquo;Chinese Test&amp;rdquo; 的内容；♈切换到&lt;strong&gt;中文&lt;/strong&gt;环境，则该文章消失，因为对应的中文文件 (&lt;code&gt;index.zh-cn.md&lt;/code&gt;) 已不存在。说明 &lt;strong&gt;Hugo&lt;/strong&gt; 的国际化实现相对&lt;strong&gt;简单&lt;/strong&gt;，只需复制文件并修改语言代码即可。&lt;/p&gt;
&lt;h1 id=&#34;part10-创建与编辑新内容&#34;&gt;part10: 创建与编辑新内容
&lt;/h1&gt;&lt;p&gt;(09:29-09:57) &lt;em&gt;&lt;strong&gt;10.1: 创建新文章命令 (&lt;code&gt;hugo new content&lt;/code&gt;)&lt;/strong&gt;&lt;/em&gt;
演示如何使用命令行&lt;strong&gt;创建新文章&lt;/strong&gt;。命令格式为 &lt;strong&gt;&lt;code&gt;hugo new content &amp;lt;section&amp;gt;/&amp;lt;slug&amp;gt;/index.md&lt;/code&gt;&lt;/strong&gt;。其中 &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; 通常是 &lt;code&gt;content&lt;/code&gt; 目录下的子目录（如 &lt;code&gt;post&lt;/code&gt;），&lt;code&gt;&amp;lt;slug&amp;gt;&lt;/code&gt; 是文章的唯一标识（会成为文件夹名），&lt;code&gt;index.md&lt;/code&gt; 是内容文件名。
♈作者执行了命令 &lt;strong&gt;&lt;code&gt;hugo new content post/myFirstBlog/index.md&lt;/code&gt;&lt;/strong&gt;，成功创建了一个名为 &lt;code&gt;myFirstBlog&lt;/code&gt; 的文章。&lt;/p&gt;
&lt;p&gt;(09:57-10:15) &lt;em&gt;&lt;strong&gt;10.2: 编辑新文章内容 (Markdown)&lt;/strong&gt;&lt;/em&gt;
使用 &lt;strong&gt;Typora&lt;/strong&gt; 编辑器打开新创建的 &lt;code&gt;dev/content/post/myFirstBlog/index.md&lt;/code&gt; 文件。文件自动包含了&lt;strong&gt;基础的 front matter&lt;/strong&gt;（如 &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;draft: true&lt;/code&gt;）。在文件末尾添加了一行 &lt;strong&gt;Markdown&lt;/strong&gt; 内容：&lt;strong&gt;&lt;code&gt;### Hello World!&lt;/code&gt;&lt;/strong&gt;。&lt;strong&gt;保存&lt;/strong&gt;文件。&lt;/p&gt;
&lt;p&gt;(10:15-10:31) &lt;em&gt;&lt;strong&gt;10.3: 预览新文章&lt;/strong&gt;&lt;/em&gt;
&lt;strong&gt;刷新&lt;/strong&gt;本地预览页面 (&lt;code&gt;http://localhost:1313&lt;/code&gt;)。新创建的 &lt;strong&gt;&amp;ldquo;MyFirstBlog&amp;rdquo;&lt;/strong&gt; 文章出现在首页列表。点击进入该文章，可以看到刚才添加的 &lt;strong&gt;&amp;ldquo;Hello World!&amp;rdquo;&lt;/strong&gt; 标题。这表明文章已成功创建并显示。&lt;/p&gt;
&lt;h1 id=&#34;part11-本地搭建完成与后续步骤&#34;&gt;part11: 本地搭建完成与后续步骤
&lt;/h1&gt;&lt;p&gt;(10:31-10:38) &lt;em&gt;&lt;strong&gt;11.1: 本地搭建总结&lt;/strong&gt;&lt;/em&gt;
至此，使用 &lt;strong&gt;Hugo&lt;/strong&gt; 和 &lt;strong&gt;Stack 主题&lt;/strong&gt;在&lt;strong&gt;本地搭建博客&lt;/strong&gt;的基本流程已经完成。&lt;/p&gt;
&lt;p&gt;(10:38-10:43) &lt;em&gt;&lt;strong&gt;11.2: 后续内容预告&lt;/strong&gt;&lt;/em&gt;
说明接下来的步骤将涉及♐&lt;strong&gt;修改配置 hugo.yaml&lt;/strong&gt;【♐至于hugo.yaml有哪些配置 一般要么样式文件里面的hugo.yaml会讲在哪里找，要么样式文件里面的hugo.yaml已经把全部配置给你了】以及如何将博客&lt;strong&gt;部署到 GitHub Pages&lt;/strong&gt;。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
